// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effects.pfx ********

// File data
static const char _effects_pfx[] = 
	"[HEADER]\n"
	"\tVERSION\t\t01.00.00.00\n"
	"\tDESCRIPTION texture example\n"
	"\tCOPYRIGHT\tImg Tec\n"
	"[/HEADER]\n"
	"\n"
	"// Define the textures that we'll be using\n"
	"[TEXTURES] \n"
	"\tFILE Balloon \t Balloon.pvr\t\tLINEAR-LINEAR-LINEAR\n"
	"\tFILE Balloon_pvr Balloon_pvr.pvr\tLINEAR-LINEAR-LINEAR\n"
	"\tFILE Noise \t \t Noise.pvr\t\t\tLINEAR-LINEAR-LINEAR\n"
	"\tFILE Skybox  \t Skybox.pvr\t\t\tLINEAR-LINEAR-LINEAR CLAMP-CLAMP\n"
	"\tFILE SkyboxMidnight SkyboxMidnight.pvr\tLINEAR-LINEAR-LINEAR CLAMP-CLAMP\n"
	"[/TEXTURES]\n"
	"\n"
	"//Effect 0//////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect is used for the skybox. The inverse of the vertex positions for \n"
	"// the skybox are used as texture coordinates for accessing the skybox texture.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tskybox_vert\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3 myVertex;\n"
	"\t\tuniform   highp mat4 myMVPMatrix;\n"
	"\t\tvarying   highp vec3 EyeDir;\n"
	"\n"
	"\t\tvoid main(void)\n"
	"\t\t{             \n"
	"\t\t\tEyeDir = -myVertex;\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(myVertex,1.0);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tskybox_frag\n"
	"\t\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp vec3  EyeDir;\n"
	"\t\tuniform samplerCube myCubeMap;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t    gl_FragColor = textureCube(myCubeMap, EyeDir);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tskybox_effect\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyCubeMap\t\t\tTEXTURE0\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\n"
	"\tVERTEXSHADER \tskybox_vert\n"
	"\tFRAGMENTSHADER \tskybox_frag\n"
	"\tTEXTURE 0 Skybox\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 1 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect displays a textured balloon with some simple lighting.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert1\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\tuniform highp mat4\tmyMVPMatrix;\n"
	"\t\tuniform highp mat3\tmyModelViewIT;\n"
	"\t\tuniform mediump vec3\tmyLightDirection;\n"
	"\t\tuniform mediump float\tfAnim;\n"
	"\t\tvarying mediump float\tfDot;\n"
	"\t\tvarying lowp vec2\tfTexCoord;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(myVertex,1);\n"
	"\t\t\tfTexCoord = myUV;\n"
	"\t\t\tmediump vec3 fTransNormal = myModelViewIT * myNormal;\n"
	"\t\t\tfDot = 0.1 * dot(fTransNormal, myLightDirection) + 0.9;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag1\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tuniform \t\tsampler2D \tsampler2d;\n"
	"\t\tvarying mediump float\t\tfDot;\n"
	"\t\tvarying lowp vec2\t\tfTexCoord;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t    gl_FragColor = texture2D(sampler2d,fTexCoord) * fDot;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect1\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER \tballoon_vert1\n"
	"\tFRAGMENTSHADER \tballoon_frag1\n"
	"\tTEXTURE 0 Balloon_pvr\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 2 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect creates a burning effect that burns the balloon from the basket \n"
	"// up. It does this by calculating whether a pixel is below at least one of \n"
	"// three thresholds (which rise over time). If it is not then the balloon \n"
	"// is textured and lit in the same way as effect 1 otherwise the burn effect is \n"
	"// applied according to the threshold it is below.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert2\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\t\n"
	"\t\tuniform highp mat4 myMVPMatrix;\n"
	"\t\tuniform highp mat3 myModelViewIT;\n"
	"\t\t\n"
	"\t\tuniform mediump vec3\tmyLightDirection;\n"
	"\t\tuniform highp float fAnim;\n"
	"\t\t\n"
	"\t\tvarying float\tfDiffuse;\n"
	"\t\tvarying lowp   vec2 fTexCoord;\n"
	"\t\tvarying lowp   vec2 fTexCoord2;\n"
	"\t\t\n"
	"\t\tvarying highp vec3  fPosition;\n"
	"\t\tvarying highp float fBurn;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(myVertex,1);\n"
	"\t\t\t\n"
	"\t\t\tfDiffuse = 0.1 * dot(myModelViewIT * myNormal, myLightDirection) + 0.9;\n"
	"\t\t\t\n"
	"\t\t\tfPosition =  myVertex * 0.05;\n"
	"\t\t\t\n"
	"\t\t\thighp float fOffset = fract(0.999 * fAnim) * 2.1;\n"
	"\t\t\tfBurn = fOffset - 0.53 * (fPosition.y + 0.2);\t\n"
	"\t\t    fBurn = clamp(fBurn, 0.0, 1.0);\n"
	"\t\t    \n"
	"\t\t    fTexCoord = myUV;\n"
	"\t\t    fTexCoord2 = vec2(fPosition.x + fPosition.z * fPosition.z, fPosition.y + 0.5 * fPosition.z + 0.5 * fPosition.x * fPosition.x);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag2\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp float\tfDiffuse;\n"
	"\t\tvarying lowp vec2\tfTexCoord;\n"
	"\t\tvarying lowp vec2  fTexCoord2;\n"
	"\n"
	"\t\tuniform sampler2D sampler2d;\n"
	"\t\tuniform sampler2D Noise;\n"
	"\t\t\n"
	"\t\tvarying highp float fBurn;\n"
	"\t\t\n"
	"\t\thighp vec3 reflect (void)\n"
	"\t\t{\t\n"
	"\t\t\treturn texture2D(sampler2d,fTexCoord).rgb * fDiffuse;\n"
	"\t\t}\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t    highp vec4  noisevec;\n"
	"\t\t    highp vec3  color;\n"
	"\t\t    highp float intensity;\n"
	"\t\t\n"
	"\t\t    noisevec = texture2D(Noise, fTexCoord2);\n"
	"\t\t \n"
	"\t\t    intensity = 0.6 * (noisevec.x + noisevec.y + noisevec.z + noisevec.w);\n"
	"\t\t    intensity = abs(intensity - 1.0);\n"
	"\t\t    intensity = clamp(intensity, 0.0, 1.0);\n"
	"\t\t\n"
	"\t\t    if (intensity < fBurn)\n"
	"\t\t\t\tcolor = vec3(0.0);\n"
	"\t\t    else if(intensity < 1.5 * fBurn)\n"
	"\t\t\t\tcolor = vec3(0.1);\n"
	"\t\t    else if(intensity < 1.7 * fBurn)\n"
	"\t\t\t\tcolor = vec3(1.0, 10.0 * (-intensity + 1.7 * fBurn) ,0.0);\n"
	"\t\t    else\n"
	"\t\t\t\tcolor = reflect();\n"
	"\t\t\n"
	"\t\t    gl_FragColor = vec4(color, 1);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\t\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect2\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\tUNIFORM\tNoise\t\t\t\tTEXTURE1\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER \tballoon_vert2\n"
	"\tFRAGMENTSHADER \tballoon_frag2\n"
	"\tTEXTURE 0 Balloon_pvr\n"
	"\tTEXTURE 1 Noise\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 3 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// Effect 3 is very similar to effect 1 in that it displays a textured \n"
	"// balloon with diffuse lighting. However, it applies two textures to the \n"
	"// balloon. The second texture is the skybox cube map which is applied using a \n"
	"// reflection vector as texture coordinates. This makes it look like the balloon \n"
	"// is reflecting the skybox.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert3\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\t\n"
	"\t\tuniform highp mat4\tmyMVPMatrix;\n"
	"\t\tuniform highp mat3\tmyModelViewIT;\n"
	"\t\tuniform highp mat4\tmyModelView;\n"
	"\t\tuniform highp mat3 \tmyViewIT;\n"
	"\t\t\n"
	"\t\tuniform mediump vec3\tmyLightDirection;\n"
	"\t\tvarying highp\tfloat\tfDiffuse;\n"
	"\t\tvarying lowp\tvec2\tfTexCoord;\n"
	"\n"
	"\t\tuniform mediump float myFrame;\n"
	"\t\tuniform mediump float fAnim;\n"
	"\t\tvarying lowp vec3 fReflectVec;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\tmediump vec4 myVertex4 = vec4(myVertex, 1);\n"
	"\t\t\t\n"
	"\t\t\tgl_Position = myMVPMatrix * myVertex4;\n"
	"\t\t\tmediump vec3 fTransNormal = myModelViewIT * myNormal;\n"
	"\t\t\t\n"
	"\t\t\tfDiffuse = (0.05 * dot(fTransNormal, myLightDirection) + 0.95) * fAnim * 0.5;\n"
	"\t\t\t\n"
	"\t\t\tmediump vec3 EyeDir = vec3(0.0,-1.0,0.0) - vec3(myModelView * myVertex4);\t\n"
	"\t\t\tfReflectVec = myViewIT * reflect(EyeDir, normalize(fTransNormal) );\n"
	"\t\t\t\n"
	"\t\t\tfTexCoord\t= myUV.st;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag3\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp \tfloat\tfDiffuse;\n"
	"\t\tvarying lowp \tvec2\tfTexCoord;\n"
	"\t\tvarying lowp \tvec3 \tfReflectVec;\n"
	"\t\t\t\n"
	"\t\tuniform sampler2D \tsampler2d;\n"
	"\t\tuniform samplerCube myCubeMap;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{    \n"
	"\t\t\tgl_FragColor = textureCube(myCubeMap, fReflectVec) + texture2D(sampler2d, fTexCoord);\n"
	"\t\t\tgl_FragColor *= fDiffuse;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect3\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM myModelView\t\t\tWORLDVIEW\n"
	"\tUNIFORM myViewIT\t\t\tVIEWIT\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\tUNIFORM\tmyCubeMap\t\t\tTEXTURE1\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER \tballoon_vert3\n"
	"\tFRAGMENTSHADER \tballoon_frag3\n"
	"\tTEXTURE 0 Balloon\n"
	"\tTEXTURE 1 Skybox\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 4 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect alters the transparency of the balloon based on an external \n"
	"// variable calculated in the app. The basket isn't affected as much as the \n"
	"// balloon as pixels over the height of 0.1 are given a lower alpha value.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert4\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\t\n"
	"\t\tuniform highp mat4 myMVPMatrix;\n"
	"\t\tuniform highp mat3 myModelViewIT;\n"
	"\t\tuniform mediump vec3  myLightDirection;\n"
	"\t\tuniform mediump float fAnim;\n"
	"\t\t\n"
	"\t\tvarying float\tfDiffuse;\n"
	"\t\tvarying lowp vec2\tfTexCoord;\n"
	"\n"
	"\t\tvarying mediump float fHeight;\n"
	"\t\tvarying mediump float fAlteredAnim;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(myVertex, 1);\n"
	"\t\t\t\n"
	"\t\t\tmediump vec3 fTransNormal = myModelViewIT * myNormal;\n"
	"\t\t\tfDiffuse = (0.05 * dot(fTransNormal, myLightDirection) + 0.95) * 0.5;\n"
	"\t\t\n"
	"\t\t\tfTexCoord = myUV;\n"
	"\n"
	"\t\t\tfHeight = myVertex.y;\n"
	"\t\t\t\n"
	"\t\t\tfAlteredAnim = (1.0 - fAnim) + fAnim;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag4\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp \tfloat\tfDiffuse;\n"
	"\t\tvarying lowp \tvec2\tfTexCoord;\n"
	"\t\tvarying mediump float \tfHeight;\n"
	"\t\tvarying mediump float \tfAlteredAnim;\n"
	"\t\t\n"
	"\t\tuniform sampler2D sampler2d;\n"
	"\n"
	"\t\tuniform bool bBackFace;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t\tgl_FragColor.rgb = texture2D(sampler2d, fTexCoord).rgb * fDiffuse;\n"
	"\t\t\n"
	"\t\t\tif(fHeight > -0.1)\n"
	"\t\t\t{\n"
	"\t\t\t\tif(bBackFace)\n"
	"\t\t\t\t\tgl_FragColor.a = fAlteredAnim * 0.3;\n"
	"\t\t\t\telse\n"
	"\t\t\t\t\tgl_FragColor.a = 0.0;\n"
	"\t\t\t}\n"
	"\t\t\telse \n"
	"\t\t\t{\n"
	"\t\t\t\tgl_FragColor.a = fAlteredAnim;\n"
	"\t\t\t}\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect4\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER balloon_vert4\n"
	"\tFRAGMENTSHADER balloon_frag4\n"
	"\tTEXTURE 0 Balloon\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 5 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect gives a sort of liquid metal effect by only using the skybox \n"
	"// cubemap as the source for texturing and manipulating the vertex position in \n"
	"// the vertex shader.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert5\n"
	"\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\t\n"
	"\t\tuniform highp mat4\tmyMVPMatrix;\n"
	"\t\tuniform highp mat3\tmyModelViewIT;\n"
	"\t\tuniform highp mat4\tmyModelView;\n"
	"\t\t\n"
	"\t\tuniform mediump mat3 myViewIT;\n"
	"\t\t\n"
	"\t\tvarying mediump vec3 Normal;\n"
	"\t\tvarying mediump vec3 EyeDir;\n"
	"\t\t\n"
	"\t\tvarying highp vec3 CubeUVs;\n"
	"\t\t\n"
	"\t\tuniform mediump float myFrame;\n"
	"\t\tuniform mediump float fAnim;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\thighp vec3  tVertex = myVertex;\n"
	"\t\t\thighp float fValue  = 3.0 * myFrame * radians(360.0/500.0) - 0.1 * myVertex.y;\n"
	"\t\t\t\n"
	"\t\t\tif(myVertex.y > -0.1)\n"
	"\t\t\t{\n"
	"\t\t\t\tmediump float fValue2 = fAnim * (1.0 + 0.3 * cos(fValue));\n"
	"\t\t\t\t\n"
	"\t\t\t\ttVertex.x *= fValue2;\n"
	"\t\t\t\ttVertex.z *= fValue2;\n"
	"\t\t\t\ttVertex.y *= fAnim * fAnim;\n"
	"\t\t\t}\n"
	"\t\t\t\n"
	"\t\t\tmediump vec4 tVertex4 = vec4(tVertex,1);\n"
	"\t\t\t\n"
	"\t\t\tEyeDir = vec3(0.0,-1.0,0.0) - vec3(myModelView * tVertex4);\n"
	"\t\t\t\n"
	"\t\t\tif(myVertex.y > -0.1)\n"
	"\t\t\t\tNormal = normalize(myModelViewIT * (myNormal+ sin(fValue))) ;\n"
	"\t\t\telse\n"
	"\t\t\t\tNormal = normalize(myModelViewIT * myNormal) ;\n"
	"\t\t\n"
	"\t\t\tmediump vec3 n;\n"
	"\t\t\tn = 0.7 * (dot(EyeDir , Normal) * Normal - EyeDir);\n"
	"\t\t\tCubeUVs = myViewIT * normalize(-1.0 * (EyeDir + n));\n"
	"\t\t\t\n"
	"\t\t\tgl_Position = myMVPMatrix * tVertex4;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag5\n"
	"\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tuniform samplerCube myCubeMap;\n"
	"\t\tvarying highp vec3 CubeUVs;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t\tgl_FragColor = textureCube(myCubeMap, CubeUVs);\t\t\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect5\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM myModelView\t\t\tWORLDVIEW\n"
	"\tUNIFORM myViewIT\t\t\tVIEWIT\n"
	"\tUNIFORM\tmyCubeMap\t\t\tTEXTURE0\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\n"
	"\tVERTEXSHADER balloon_vert5\n"
	"\tFRAGMENTSHADER balloon_frag5\n"
	"\tTEXTURE 0 Skybox\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 6 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// Effect 6 is a sort of bouncy cartoon shaded balloon. Once again the vertex \n"
	"// positions are manipulated to make the balloon bounce. The cartoon effect is \n"
	"// done by altering the lighting so it can only have 3 possible values. This \n"
	"// gives it the banded style of shading.\n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert6\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\t\n"
	"\t\tuniform highp mat4 myMVPMatrix;\n"
	"\t\tuniform highp mat3 myModelViewIT;\n"
	"\t\t\n"
	"\t\tuniform mediump vec3\tmyLightDirection;\n"
	"\t\tuniform mediump float fAnim;\n"
	"\t\tuniform mediump float myFrame;\n"
	"\t\t\n"
	"\t\tvarying float\tfDiffuse;\n"
	"\t\tvarying lowp vec2 fTexCoord;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\tmediump float anim2 = sin(3.0*myFrame * radians(360.0/500.0))*0.5 + 0.5;\n"
	"\t\t\tanim2 *= 0.5;\n"
	"\t\t\n"
	"\t\t\tmediump vec3 center = vec3(0.0,30.0,0.0);\n"
	"\t\t\tmediump vec3 tVertex =((30.0*normalize(myVertex-center)*anim2 + myVertex)*(1.0-anim2)) * fAnim ;\n"
	"\t\t\ttVertex\t\t+=\t  30.0*normalize(myVertex) * (1.0-fAnim);\n"
	"\t\t\n"
	"\t\t\tmediump vec3 fTransNormal = normalize( myModelViewIT * myNormal );\n"
	"\t\t\t\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(tVertex,1.0);\n"
	"\t\t\t\n"
	"\t\t\tfDiffuse = dot(fTransNormal, myLightDirection);\n"
	"\t\t\tfTexCoord= myUV;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag6\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp float\tfDiffuse;\n"
	"\t\tvarying lowp vec2\tfTexCoord;\n"
	"\t\t\n"
	"\t\tuniform sampler2D sampler2d;\n"
	"\t\t\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t\tlowp vec4 texColor = texture2D(sampler2d,fTexCoord);\n"
	"\t\t\t\n"
	"\t\t\tmediump float intensity;\n"
	"\t\t\t\n"
	"\t\t\tif(fDiffuse > 0.67)\n"
	"\t\t\t\tintensity = 1.0;\n"
	"\t\t\telse if(fDiffuse > 0.33)\n"
	"\t\t\t\tintensity = 0.67;\n"
	"\t\t\telse\n"
	"\t\t\t\tintensity = 0.33;\n"
	"\t\t\t\t\n"
	"\t\t    gl_FragColor = texColor * intensity;;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect6\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER balloon_vert6\n"
	"\tFRAGMENTSHADER balloon_frag6\n"
	"\tTEXTURE 0 Balloon\n"
	"[/EFFECT]\n"
	"\n"
	"//Effect 7 /////////////////////////////////////////////////////////////////////\n"
	"//\n"
	"// This effect gives impression that the balloon is slightly transparent and \n"
	"// being affected by wind. This is done by using a noise texture to alter the \n"
	"// alpha and texture coordinates in the fragment shader. \n"
	"//\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tballoon_vert7\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex;\n"
	"\t\tattribute mediump vec3\tmyNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\t\n"
	"\t\tuniform highp mat4 myMVPMatrix;\n"
	"\t\tuniform highp mat3 myModelViewIT;\n"
	"\t\t\n"
	"\t\tuniform mediump vec3\tmyLightDirection;\n"
	"\t\tuniform mediump float\tfAnim;\n"
	"\t\tuniform mediump float myFrame;\n"
	"\t\t\n"
	"\t\tvarying float\tfDiffuse;\n"
	"\t\tvarying lowp vec2 fTexCoord;\n"
	"\n"
	"\t\tvarying highp   float fAlpha;\n"
	"\t\tvarying mediump float frame;\n"
	"\t\t\n"
	"\t\tvoid main(void)\n"
	"\t\t{\n"
	"\t\t\n"
	"\t\t\tgl_Position = myMVPMatrix * vec4(myVertex,1);\n"
	"\t\t\tmediump vec3 fTransNormal = myModelViewIT * myNormal;\n"
	"\t\t\t\n"
	"\t\t\tfDiffuse = 0.1 * dot(fTransNormal, myLightDirection) + 0.9;\n"
	"\t\t\tfTexCoord\t= 0.7 * myUV;\n"
	"\t\t\tfAlpha = fAnim * dot(normalize(fTransNormal), vec3(0.0,0.0,0.5)) * 2.0;\n"
	"\t\t\tframe = myFrame * 0.02;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tballoon_frag7\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tvarying highp float\tfDiffuse;\n"
	"\t\tvarying lowp vec2\tfTexCoord;\n"
	"\t\tvarying highp float\tfAlpha;\n"
	"\t\tvarying mediump float frame;\n"
	"\t\t\n"
	"\t\tuniform sampler2D sampler2d;\n"
	"\t\tuniform sampler2D Noise;\n"
	"\t\t\n"
	"\t\tvoid main (void)\n"
	"\t\t{    \n"
	"\t\t    mediump vec2 noisevec = texture2D(Noise,  fTexCoord + frame).xy;\n"
	"\t\t    mediump vec2 coord2D  = fTexCoord + 0.3 * noisevec;\n"
	"\t\t\n"
	"\t\t    gl_FragColor.rgb = texture2D(sampler2d, coord2D).rgb * fDiffuse;\n"
	"\t\t    gl_FragColor.a   = fAlpha * noisevec.x;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tballoon_effect7\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM myModelViewIT \t\tWORLDVIEWIT\n"
	"\tUNIFORM myMVPMatrix \t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\tmyLightDirection\tLIGHTDIREYE\n"
	"\tUNIFORM\tsampler2d\t\t\tTEXTURE0\n"
	"\tUNIFORM\tNoise\t\t\t\tTEXTURE1\n"
	"\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE \tmyVertex\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\tUV\n"
	"\n"
	"\tVERTEXSHADER \tballoon_vert7\n"
	"\tFRAGMENTSHADER \tballoon_frag7\n"
	"\tTEXTURE 0 Balloon_pvr\n"
	"\tTEXTURE 1 Noise\n"
	"[/EFFECT]\n";

// Register effects.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effects_pfx("effects.pfx", _effects_pfx, 16554);

// ******** End: effects.pfx ********

