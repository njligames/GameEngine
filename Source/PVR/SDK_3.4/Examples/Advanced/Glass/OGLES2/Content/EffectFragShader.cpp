// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: EffectFragShader.fsh ********

// File data
static const char _EffectFragShader_fsh[] = 
	"#version 100\n"
	"\n"
	"uniform sampler2D sParaboloids;\n"
	"uniform samplerCube sSkybox;\n"
	"\n"
	"#ifdef REFLECT\n"
	"varying mediump vec3 ReflectDir;\n"
	"#endif\n"
	"\n"
	"#ifdef REFRACT\n"
	"#ifdef CHROMATIC\n"
	"varying mediump vec3 RefractDirRed;\n"
	"varying mediump vec3 RefractDirGreen;\n"
	"varying mediump vec3 RefractDirBlue;\n"
	"#else\n"
	"varying mediump vec3 RefractDir;\n"
	"#endif\n"
	"#endif\n"
	"\n"
	"#if defined(REFLECT) && defined(REFRACT)\n"
	"varying highp float ReflectFactor;\n"
	"#endif\n"
	"\n"
	"void main()\n"
	"{\n"
	"\tmediump vec3 Normalised;\n"
	"\n"
	"#ifdef REFLECT\n"
	"\t// Sample reflection to skybox\n"
	"\tlowp vec4 ReflectSky = textureCube(sSkybox, ReflectDir);\n"
	"\n"
	"\t// Sample reflection to paraboloids\n"
	"\tlowp vec4 Reflection;\n"
	"\n"
	"\tNormalised = normalize(ReflectDir);\n"
	"\tNormalised.xy /= abs(Normalised.z) + 1.0;\n"
	"\tNormalised.xy = Normalised.xy * 0.495 + 0.5;\n"
	"\tNormalised.x *= 0.5;\n"
	"\tNormalised.x += sign(-Normalised.z) * 0.25 + 0.25;\n"
	"\tReflection = texture2D(sParaboloids, Normalised.xy);\n"
	"\n"
	"\t// Combine skybox reflection with paraboloid reflection\n"
	"\tReflection.rgb = mix(ReflectSky.rgb, Reflection.rgb, Reflection.a);\n"
	"#endif\n"
	"\n"
	"#ifdef REFRACT\n"
	"#ifdef CHROMATIC\n"
	"\t// Sample refraction to skybox\n"
	"\tlowp vec4 RefractSky;\n"
	"\tRefractSky.r = textureCube(sSkybox, RefractDirRed).r;\n"
	"\tRefractSky.g = textureCube(sSkybox, RefractDirGreen).g;\n"
	"\tRefractSky.b = textureCube(sSkybox, RefractDirBlue).b;\n"
	"\t\n"
	"\t// Sample refraction to paraboloids\n"
	"\tlowp vec4 Refraction;\n"
	"\n"
	"\t// Red\n"
	"\tNormalised = normalize(RefractDirRed);\n"
	"\tNormalised.xy /= abs(Normalised.z) + 1.0;\n"
	"\tNormalised.xy = Normalised.xy * 0.495 + 0.5;\n"
	"\tNormalised.x *= 0.5;\n"
	"\tNormalised.x += sign(-Normalised.z) * 0.25 + 0.25;\n"
	"\tlowp vec4 RefractRed = texture2D(sParaboloids, Normalised.xy);\n"
	"\n"
	"\tRefraction.r = mix(RefractSky.r, RefractRed.r, RefractRed.a);\n"
	"\n"
	"\t// Green\n"
	"\tNormalised = normalize(RefractDirGreen);\n"
	"\tNormalised.xy /= abs(Normalised.z) + 1.0;\n"
	"\tNormalised.xy = Normalised.xy * 0.495 + 0.5;\n"
	"\tNormalised.x *= 0.5;\n"
	"\tNormalised.x += sign(-Normalised.z) * 0.25 + 0.25;\n"
	"\tlowp vec4 RefractGreen = texture2D(sParaboloids, Normalised.xy);\n"
	"\n"
	"\tRefraction.g = mix(RefractSky.g, RefractGreen.g, RefractGreen.a);\n"
	"\n"
	"\t// Blue\n"
	"\tNormalised = normalize(RefractDirBlue);\n"
	"\tNormalised.xy /= abs(Normalised.z) + 1.0;\n"
	"\tNormalised.xy = Normalised.xy * 0.495 + 0.5;\n"
	"\tNormalised.x *= 0.5;\n"
	"\tNormalised.x += sign(-Normalised.z) * 0.25 + 0.25;\n"
	"\tlowp vec4 RefractBlue = texture2D(sParaboloids, Normalised.xy);\n"
	"\n"
	"\tRefraction.b = mix(RefractSky.b, RefractBlue.b, RefractBlue.a);\n"
	"#else\n"
	"\tlowp vec4 RefractSky = textureCube(sSkybox, RefractDir);\n"
	"\n"
	"\tNormalised = normalize(RefractDir);\n"
	"\tNormalised.xy /= abs(Normalised.z) + 1.0;\n"
	"\tNormalised.xy = Normalised.xy * 0.495 + 0.5;\n"
	"\tNormalised.x *= 0.5;\n"
	"\tNormalised.x += sign(-Normalised.z) * 0.25 + 0.25;\n"
	"\tlowp vec4 Refraction = texture2D(sParaboloids, Normalised.xy);\n"
	"\n"
	"\tRefraction.rgb = mix(RefractSky.rgb, Refraction.rgb, Refraction.a);\n"
	"#endif\n"
	"#endif\n"
	"\n"
	"#if defined(REFLECT) && defined(REFRACT)\n"
	"\t// Combine reflection and refraction for final colour\n"
	"\tgl_FragColor.rgb = mix(Refraction.rgb, Reflection.rgb, ReflectFactor);\n"
	"#elif defined(REFLECT)\n"
	"\tgl_FragColor.rgb = Reflection.rgb;\n"
	"#elif defined(REFRACT)\n"
	"\tgl_FragColor.rgb = Refraction.rgb;\n"
	"#endif\n"
	"}\n";

// Register EffectFragShader.fsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_EffectFragShader_fsh("EffectFragShader.fsh", _EffectFragShader_fsh, 3071);

// ******** End: EffectFragShader.fsh ********

