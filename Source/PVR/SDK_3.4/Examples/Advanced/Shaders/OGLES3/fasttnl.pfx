[HEADER]
	VERSION			00.00.00.00
	DESCRIPTION		Fast Transformation and Lighting Example
	COPYRIGHT		Imagination Technologies Ltd.
[/HEADER]

[TEXTURES]
	FILE base 	base.pvr		LINEAR-LINEAR-LINEAR
[/TEXTURES]

[VERTEXSHADER]
	NAME myVertShader
	[GLSL_CODE]
		#version 300 es

		layout (location = 0) in highp vec3	myVertex;
		layout (location = 1) in mediump vec3 myNormal;
		layout (location = 2) in mediump vec2 myUV;

		uniform mediump mat4	myMVPMatrix;
		uniform mediump mat3	myModelViewIT;
		const mediump vec3		myLightDirection = vec3(0.6,0.6,0.6);
		const mediump vec4		myMaterial = vec4(0.5,0.5,2.5,0.8);
		out lowp float		DiffuseIntensity;
		out lowp float		SpecularIntensity;
		out lowp vec2		texCoordinate;
		void main(void)
		{
			// Transform the position into clipping-space.
			gl_Position = myMVPMatrix * vec4(myVertex,1);							
			mediump vec3 normal = normalize(myModelViewIT * myNormal);
			DiffuseIntensity = dot(normal, myLightDirection); 
			// Substract and multiply DiffuseIntensity by Specular Bias (w) and Scale (z) to have a 'decent' looking specular effect
			// See code below for an explanation of how these parameters are calculated
			SpecularIntensity = max((DiffuseIntensity - myMaterial.w) * myMaterial.z, 0.0); 
			// Pass the UV co-ordinates
			texCoordinate = myUV.st;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME myFragShader
	[GLSL_CODE]
		#version 300 es

		uniform sampler2D sampler2d;

		in lowp float	DiffuseIntensity;
		in lowp float	SpecularIntensity;
		in lowp vec2	texCoordinate;

		layout (location = 0) out lowp vec4 oColour;

		void main (void)
		{
			lowp vec3 texColour  = vec3 (texture(sampler2d, texCoordinate));
			lowp vec3 finalColour = (texColour * DiffuseIntensity) + SpecularIntensity;
			oColour = vec4(finalColour, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[EFFECT]
	NAME myEffect

	ATTRIBUTE	myVertex			POSITION
	ATTRIBUTE	myNormal			NORMAL
	ATTRIBUTE	myUV				UV
	UNIFORM		myMVPMatrix			WORLDVIEWPROJECTION
	UNIFORM		myModelViewIT		WORLDVIEWIT
	UNIFORM		sampler2d			TEXTURE0

	TEXTURE 0 base

	VERTEXSHADER myVertShader
	FRAGMENTSHADER myFragShader
[/EFFECT]
