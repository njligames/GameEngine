// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: point_lighting.pfx ********

// File data
static const char _point_lighting_pfx[] = 
	"[HEADER]\n"
	"\tVERSION\t\t00.00.00.00\n"
	"\tDESCRIPTION Complex Lighting Example\n"
	"\tCOPYRIGHT\tImagination Technologies Ltd.\n"
	"[/HEADER]\n"
	"\n"
	"[TEXTURES]\n"
	"\tFILE base \t\t\tbase.pvr\t\tLINEAR-LINEAR-LINEAR\t\n"
	"[/TEXTURES]\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME myVertShader\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp vec3\tmyVertex, myNormal;\n"
	"\t\tattribute mediump vec2\tmyUV;\n"
	"\t\tuniform mediump mat4\tmyMVPMatrix, myModelView;\n"
	"\t\tuniform mediump mat3\tmyModelViewIT;\n"
	"\t\tvarying mediump vec2\ttexCoord;\n"
	"\t\tvarying mediump vec3\tdiffuse, specular;\n"
	"\t\tconst mediump float\t\tshininess = 16.0;\n"
	"\t\tconst mediump vec3\t\tLightPos = vec3(4.0, 4.0, 4.0);\n"
	"\t\tconst mediump vec3\t\tLightCol = vec3(1.0,1.0,1.0);\n"
	"\t\n"
	"\t//point light function //\n"
	"\t// spFlg\tflag using specular or not.\n"
	"\t// nrml\t\tnrml vector in the eye coordinate.\n"
	"\t// ePos\t\tvertex position in the eye coordinate.\n"
	"\tvoid PointLight(in mediump int spFlg, in mediump vec3 nrml, in mediump vec3 ePos){\n"
	"\t\tmediump float pf;\n"
	"\t\t// calculate the vector from vertex to light.\n"
	"\t\tmediump vec3 VP = normalize(LightPos- ePos);\n"
	"\t\t// calculate the half vector between eye position and light position.\n"
	"\t\tmediump vec3 halfV = normalize(-ePos + LightPos);\n"
	"\t\t// calculate the diffuse light intensity.\n"
	"\t\tmediump float dVP = max(dot(nrml,VP), 0.0);\n"
	"\t\t// calculate approximated specular light base intensity.\n"
	"\t\tmediump float dHV = max(dot(nrml,halfV), 0.0);\n"
	"\t\t// if the diffuse is not zero and spFlg is On,\n"
	"\t\t// calculate specular light intensity with shininess,\n"
	"\t\t// or turn off the specular light.\n"
	"\t\tif(dVP>.0) pf = pow(dHV, shininess);\n"
	"\t\telse       pf = 0.0;\n"
	"\t\tdiffuse += dVP*LightCol;\n"
	"\t\tspecular += pf*LightCol;\n"
	"\t}\n"
	"\n"
	"\t// main function //\n"
	"\tvoid main(void){\n"
	"\t\t// transform the normal vector from the model coordinate to the eye coordinate.\n"
	"\t\tmediump vec3 normal = normalize(myModelViewIT * myNormal);\n"
	"\t\t// calculate the vertex position in the eye coordinate.\n"
	"\t\thighp vec3 ePos = vec3(myModelView * vec4(myVertex,1.0));\n"
	"\t\t// initalize light intensity parameter.\n"
	"\t\tdiffuse = vec3(0.0);\n"
	"\t\tspecular = vec3(0.0);\n"
	"\t\t\n"
	"\t\tPointLight(0, normal, ePos);\n"
	"\n"
	"\t\t// Transform position\n"
	"\t\tgl_Position = myMVPMatrix * vec4(myVertex,1.0);\n"
	"\t\t// Pass UV co-ordinates\n"
	"\t\ttexCoord = myUV.st;\n"
	"\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER]\n"
	"\tNAME myFragShader\n"
	"\t[GLSL_CODE]\n"
	"\t\tuniform sampler2D \t\tsampler2d;\n"
	"\t\tvarying mediump vec2\ttexCoord;\n"
	"\t\tvarying mediump vec3\tdiffuse;\n"
	"\t\tvarying mediump vec3\tspecular;\n"
	"\t\tvoid main (void)\n"
	"\t\t{\n"
	"\t\t\tmediump vec3 texColour  = vec3(texture2D(sampler2d, texCoord));\n"
	"\t\t\tmediump vec3 colour = (texColour * diffuse) + specular;\n"
	"\t\t\tgl_FragColor = vec4(colour, 1.0);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[EFFECT]\n"
	"\tNAME myEffect\n"
	"\n"
	"\tATTRIBUTE\tmyVertex\t\t\tPOSITION\n"
	"\tATTRIBUTE\tmyNormal\t\t\tNORMAL\n"
	"\tATTRIBUTE\tmyUV\t\t\t\tUV\n"
	"\tUNIFORM\t\tmyMVPMatrix\t\t\tWORLDVIEWPROJECTION\n"
	"\tUNIFORM\t\tmyModelView\t\t\tWORLDVIEW\n"
	"\tUNIFORM\t\tmyModelViewIT\t\tWORLDVIEWIT\n"
	"\tUNIFORM\t\tsampler2d\t\t\tTEXTURE0\n"
	"\n"
	"\tTEXTURE 0 base\n"
	"\n"
	"\tVERTEXSHADER myVertShader\n"
	"\tFRAGMENTSHADER myFragShader\n"
	"[/EFFECT]\n";

// Register point_lighting.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_point_lighting_pfx("point_lighting.pfx", _point_lighting_pfx, 2885);

// ******** End: point_lighting.pfx ********

