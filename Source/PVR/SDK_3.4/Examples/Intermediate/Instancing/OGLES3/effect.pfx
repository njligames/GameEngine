[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES3CubeShadowMapping
	COPYRIGHT	Imagination Technologies
[/HEADER]

//
// Effect to render the scene using a cube shadow map
//

[EFFECT] 
	NAME 	RenderSceneInstanced
			
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uWorldITMatrix				WORLDIT
	UNIFORM uLightDirection			LIGHTDIRWORLD
	UNIFORM uModelColours				MATERIALCOLORDIFFUSE
	
	// CUSTOM SEMANTICS
	UNIFORM uInstancesPerRow			CUSTOMSEMANTIC_INSTANCESPERROW
	
	// ATTRIBUTES
	ATTRIBUTE	inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	
	// SHADERS
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER FragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		VertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY  0
		#define NORMAL_ARRAY  1

		layout (location = VERTEX_ARRAY) in highp vec3 inVertex;
		layout (location = NORMAL_ARRAY) in highp vec3 inNormal;

		uniform highp mat4  uWorldViewProjMatrix;
		uniform highp mat3  uWorldITMatrix;
		uniform highp vec3  uLightDirection;
		uniform highp float uInstancesPerRow;
		uniform lowp  vec3  uModelColours[6];

		out lowp vec3 vDiffuseColour;

		void main()
		{
			highp float fInstanceID = float(gl_InstanceID);
			highp float row = floor(fInstanceID / uInstancesPerRow);
			highp float column = fInstanceID - row * uInstancesPerRow;
			highp vec3 offset = vec3(column, 0.0, row) * 40.0;
	
			// Transform position
			gl_Position = uWorldViewProjMatrix * vec4(inVertex + offset, 1.0);	

			// Simple diffuse lighting in model space
			highp vec3 normal = uWorldITMatrix * inNormal;
			highp float LightIntensity = dot(normal, uLightDirection);	
			lowp int colourindex = int(mod(fInstanceID, 6.0));
			vDiffuseColour = uModelColours[colourindex] * LightIntensity;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		FragmentShader 

	[GLSL_CODE]
		#version 300 es
		
		in lowp vec3 vDiffuseColour;
		
		layout(location = 0) out lowp vec4 oColour;

		void main()
		{
			oColour = vec4(vDiffuseColour, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
