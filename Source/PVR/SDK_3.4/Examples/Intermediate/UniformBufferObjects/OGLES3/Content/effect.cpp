// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effect.pfx ********

// File data
static const char _effect_pfx[] = 
	"[HEADER]\r\n"
	"\tVERSION\t\t01.00.00.00\r\n"
	"\tDESCRIPTION OGLES3UniformBufferObjects\r\n"
	"\tCOPYRIGHT\tImagination Technologies\r\n"
	"[/HEADER]\r\n"
	"\r\n"
	"[TEXTURE]\r\n"
	"\tNAME\t\t\tcorrodedmetal\r\n"
	"\tPATH\t\t\tcorrodedmetal.pvr\r\n"
	"\tMINIFICATION\t\tLINEAR\r\n"
	"\tMAGNIFICATION\tLINEAR\r\n"
	"\tMIPMAP\t\t\t\tNEAREST\r\n"
	"\tWRAP_S\t\t\t\tREPEAT\r\n"
	"\tWRAP_T\t\t\t\tREPEAT\r\n"
	"[/TEXTURE]\r\n"
	"[TEXTURE]\r\n"
	"\tNAME\t\t\tmarble\r\n"
	"\tPATH\t\t\tmarble.pvr\r\n"
	"\tMINIFICATION\t\tLINEAR\r\n"
	"\tMAGNIFICATION\tLINEAR\r\n"
	"\tMIPMAP\t\t\t\tNEAREST\r\n"
	"\tWRAP_S\t\t\t\tREPEAT\r\n"
	"\tWRAP_T\t\t\t\tREPEAT\r\n"
	"[/TEXTURE]\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render per vertex lighting\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderPerVertexLighting\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\t\t\r\n"
	"\tUNIFORM uWorldMatrix\t\tWORLD\r\n"
	"\tUNIFORM uWorldITMatrix\t\tWORLDIT\r\n"
	"\t\r\n"
	"\tUNIFORM sTextureMap\t\t\t\t\tTEXTURE0\r\n"
	"\t\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\tATTRIBUTE\tinNormal\t\tNORMAL\r\n"
	"\tATTRIBUTE\tinTexCoord\tUV\t\t\r\n"
	"\t\t\r\n"
	"\t// SHADERS\r\n"
	"\tVERTEXSHADER   PerVertexVertexShader\r\n"
	"\tFRAGMENTSHADER PerVertexFragmentShader\r\n"
	"\t\r\n"
	"\tTEXTURE 0 corrodedmetal\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tPerVertexVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\r\n"
	"\t\tlayout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;\r\n"
	"\t\tlayout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;\r\n"
	"\t\tlayout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;\r\n"
	"\r\n"
	"\t\t/*\r\n"
	"\t\t *  This is the uniform block that groups several uniforms into a single block that can be referenced by the API via a single index. \r\n"
	"\t\t *  A uniform buffer that contains the values for each individual uniform inside this block can be bound and shared across several shaders.\r\n"
	"\t\t *  The layout() qualifier denotes the physical layout, please see the specification for more information.\r\n"
	"\t\t */\r\n"
	"\t\tlayout(std140) uniform transforms\r\n"
	"\t\t{\r\n"
	"\t\t\thighp mat4 ViewProjectionMatrix;\r\n"
	"\t\t\thighp vec3 Light0PosWorld;\r\n"
	"\t\t\thighp vec3 Light0Colour;\r\n"
	"\t\t\thighp vec3 Light1PosWorld;\r\n"
	"\t\t\thighp vec3 Light1Colour;\t\t\t\r\n"
	"\t\t};\t\t\r\n"
	"\t\t\t\t\r\n"
	"\t\tuniform highp mat4 uWorldMatrix;\r\n"
	"\t\tuniform highp mat3 uWorldITMatrix;\r\n"
	"\t\t\r\n"
	"\t\tout mediump vec2  vTexCoord;\r\n"
	"\t\tout highp   float vLight0Intensity;\r\n"
	"\t\tout highp   float vLight1Intensity;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\t// Transform position\r\n"
	"\t\t\tgl_Position = ViewProjectionMatrix * uWorldMatrix * vec4(inVertex, 1.0);\t\r\n"
	"\r\n"
	"\t\t\t// Simple diffuse lighting in view space\r\n"
	"\t\t\thighp vec3 normalWorld = normalize(uWorldITMatrix * inNormal);\r\n"
	"\t\t\thighp vec3 posWorld = (uWorldMatrix * vec4(inVertex, 1.0)).xyz;\r\n"
	"\t\t\t\r\n"
	"\t\t\thighp vec3 lightDirWorld = normalize(posWorld - Light0PosWorld);\r\n"
	"\t\t\tvLight0Intensity = max(dot(normalWorld, lightDirWorld), 0.0);\r\n"
	"\t\t\t\r\n"
	"\t\t\tlightDirWorld = normalize(posWorld - Light1PosWorld);\r\n"
	"\t\t\tvLight1Intensity = max(dot(normalWorld, lightDirWorld), 0.0);\r\n"
	"\r\n"
	"\t\t\t// Pass texture coordinates\r\n"
	"\t\t\tvTexCoord = inTexCoord;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tPerVertexFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t  #version 300 es\r\n"
	"\t  \r\n"
	"\t  layout(std140) uniform transforms\r\n"
	"\t\t{\r\n"
	"\t\t\thighp mat4 ViewProjectionMatrix;\r\n"
	"\t\t\thighp vec3 Light0PosWorld;\r\n"
	"\t\t\thighp vec3 Light0Colour;\r\n"
	"\t\t\thighp vec3 Light1PosWorld;\r\n"
	"\t\t\thighp vec3 Light1Colour;\t\t\t\r\n"
	"\t\t};\t\r\n"
	"\r\n"
	"\t  uniform sampler2D sTexture;\r\n"
	"\r\n"
	"\t  in mediump vec2  vTexCoord;\r\n"
	"\t  in highp   float vLight0Intensity;\r\n"
	"\t  in highp   float vLight1Intensity;\r\n"
	"\r\n"
	"\t  layout(location = 0) out lowp vec4 oColour;\r\n"
	"\r\n"
	"\t  void main()\r\n"
	"\t  {\r\n"
	"\t  \t\tlowp vec3 texcolour = texture(sTexture, vTexCoord).rgb;\r\n"
	"\t  \t\toColour = vec4(texcolour * vLight0Intensity * Light0Colour + texcolour * vLight1Intensity * Light1Colour, 1.0);\t\r\n"
	"\t  }\t\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render per vertex lighting\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderPerPixelLighting\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\t\t\r\n"
	"\tUNIFORM uWorldMatrix\t\tWORLD\r\n"
	"\tUNIFORM uWorldITMatrix\t\tWORLDIT\r\n"
	"\t\r\n"
	"\tUNIFORM sTextureMap\t\t\t\t\tTEXTURE0\r\n"
	"\t\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\tATTRIBUTE\tinNormal\t\tNORMAL\r\n"
	"\tATTRIBUTE\tinTexCoord\tUV\t\t\r\n"
	"\t\t\r\n"
	"\t// SHADERS\r\n"
	"\tVERTEXSHADER   PerPixelVertexShader\r\n"
	"\tFRAGMENTSHADER PerPixelFragmentShader\r\n"
	"\t\r\n"
	"\tTEXTURE 0 marble\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tPerPixelVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\r\n"
	"\t\tlayout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;\r\n"
	"\t\tlayout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;\r\n"
	"\t\tlayout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;\r\n"
	"\r\n"
	"\t\tlayout(std140) uniform transforms\r\n"
	"\t\t{\r\n"
	"\t\t\thighp mat4 ViewProjectionMatrix;\r\n"
	"\t\t\thighp vec3 Light0PosWorld;\r\n"
	"\t\t\thighp vec3 Light0Colour;\r\n"
	"\t\t\thighp vec3 Light1PosWorld;\r\n"
	"\t\t\thighp vec3 Light1Colour;\t\t\t\r\n"
	"\t\t};\t\t\t\t\r\n"
	"\t\t\r\n"
	"\t\tuniform highp mat4 uWorldMatrix;\r\n"
	"\t\tuniform highp mat3 uWorldITMatrix;\r\n"
	"\t\t\t\t\r\n"
	"\t\tout mediump vec2  vTexCoord;\r\n"
	"\t\tout highp   vec3  vNormalWorld;\r\n"
	"\t\tout highp   vec3  vLight0DirWorld;\r\n"
	"\t\tout highp   vec3  vLight1DirWorld;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\t// Transform position\r\n"
	"\t\t\tgl_Position = ViewProjectionMatrix * uWorldMatrix * vec4(inVertex, 1.0);\t\r\n"
	"\r\n"
	"\t\t\t// Simple diffuse lighting in view space\r\n"
	"\t\t\tvNormalWorld = uWorldITMatrix * inNormal;\r\n"
	"\t\t\thighp vec3 posWorld = (uWorldMatrix * vec4(inVertex, 1.0)).xyz;\r\n"
	"\t\t\tvLight0DirWorld = posWorld - Light0PosWorld;\r\n"
	"\t\t\tvLight1DirWorld = posWorld - Light1PosWorld;\r\n"
	"\r\n"
	"\t\t\t// Pass texture coordinates\r\n"
	"\t\t\tvTexCoord = inTexCoord;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tPerPixelFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t  #version 300 es\r\n"
	"\t  \r\n"
	"\t  layout(std140) uniform transforms\r\n"
	"\t\t{\r\n"
	"\t\t\thighp mat4 ViewProjectionMatrix;\r\n"
	"\t\t\thighp vec3 Light0PosWorld;\r\n"
	"\t\t\thighp vec3 Light0Colour;\r\n"
	"\t\t\thighp vec3 Light1PosWorld;\r\n"
	"\t\t\thighp vec3 Light1Colour;\t\t\t\r\n"
	"\t\t};\t\r\n"
	"\r\n"
	"\t  uniform sampler2D sTexture;\r\n"
	"\r\n"
	"\t  in mediump vec2  vTexCoord;\r\n"
	"\t  in highp   vec3  vNormalWorld;\r\n"
	"\t  in highp   vec3  vLight0DirWorld;\r\n"
	"\t  in highp   vec3  vLight1DirWorld;\r\n"
	"\r\n"
	"\t  layout(location = 0) out lowp vec4 oColour;\r\n"
	"\r\n"
	"\t  void main()\r\n"
	"\t  {\r\n"
	"\t  \t\thighp vec3 normalWorld = normalize(vNormalWorld);\r\n"
	"\t  \t\thighp float light0Intensity = max(dot(normalWorld, normalize(vLight0DirWorld)), 0.0);\r\n"
	"\t  \t\thighp float light1Intensity = max(dot(normalWorld, normalize(vLight1DirWorld)), 0.0);\r\n"
	"\t  \t\t\r\n"
	"\t  \t\tlowp vec3 texcolour = texture(sTexture, vTexCoord).rgb;\r\n"
	"\t  \t\toColour = vec4(texcolour * light0Intensity * Light0Colour + texcolour * light1Intensity * Light1Colour, 1.0);\t\r\n"
	"\t  }\t\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n";

// Register effect.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effect_pfx("effect.pfx", _effect_pfx, 6322);

// ******** End: effect.pfx ********

