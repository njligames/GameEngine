[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES3UniformBufferObjects
	COPYRIGHT	Imagination Technologies
[/HEADER]

[TEXTURE]
	NAME			corrodedmetal
	PATH			corrodedmetal.pvr
	MINIFICATION		LINEAR
	MAGNIFICATION	LINEAR
	MIPMAP				NEAREST
	WRAP_S				REPEAT
	WRAP_T				REPEAT
[/TEXTURE]
[TEXTURE]
	NAME			marble
	PATH			marble.pvr
	MINIFICATION		LINEAR
	MAGNIFICATION	LINEAR
	MIPMAP				NEAREST
	WRAP_S				REPEAT
	WRAP_T				REPEAT
[/TEXTURE]

//
// Effect to render per vertex lighting
//

[EFFECT] 
	NAME 	RenderPerVertexLighting
		
	// GLOBALS UNIFORMS		
	UNIFORM uWorldMatrix		WORLD
	UNIFORM uWorldITMatrix		WORLDIT
	
	UNIFORM sTextureMap					TEXTURE0
	
	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	ATTRIBUTE	inTexCoord	UV		
		
	// SHADERS
	VERTEXSHADER   PerVertexVertexShader
	FRAGMENTSHADER PerVertexFragmentShader
	
	TEXTURE 0 corrodedmetal
[/EFFECT]

[VERTEXSHADER]
	NAME 		PerVertexVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2

		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		/*
		 *  This is the uniform block that groups several uniforms into a single block that can be referenced by the API via a single index. 
		 *  A uniform buffer that contains the values for each individual uniform inside this block can be bound and shared across several shaders.
		 *  The layout() qualifier denotes the physical layout, please see the specification for more information.
		 */
		layout(std140) uniform transforms
		{
			highp mat4 ViewProjectionMatrix;
			highp vec3 Light0PosWorld;
			highp vec3 Light0Colour;
			highp vec3 Light1PosWorld;
			highp vec3 Light1Colour;			
		};		
				
		uniform highp mat4 uWorldMatrix;
		uniform highp mat3 uWorldITMatrix;
		
		out mediump vec2  vTexCoord;
		out highp   float vLight0Intensity;
		out highp   float vLight1Intensity;

		void main()
		{
			// Transform position
			gl_Position = ViewProjectionMatrix * uWorldMatrix * vec4(inVertex, 1.0);	

			// Simple diffuse lighting in view space
			highp vec3 normalWorld = normalize(uWorldITMatrix * inNormal);
			highp vec3 posWorld = (uWorldMatrix * vec4(inVertex, 1.0)).xyz;
			
			highp vec3 lightDirWorld = normalize(posWorld - Light0PosWorld);
			vLight0Intensity = max(dot(normalWorld, lightDirWorld), 0.0);
			
			lightDirWorld = normalize(posWorld - Light1PosWorld);
			vLight1Intensity = max(dot(normalWorld, lightDirWorld), 0.0);

			// Pass texture coordinates
			vTexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		PerVertexFragmentShader 

	[GLSL_CODE]
	  #version 300 es
	  
	  layout(std140) uniform transforms
		{
			highp mat4 ViewProjectionMatrix;
			highp vec3 Light0PosWorld;
			highp vec3 Light0Colour;
			highp vec3 Light1PosWorld;
			highp vec3 Light1Colour;			
		};	

	  uniform sampler2D sTexture;

	  in mediump vec2  vTexCoord;
	  in highp   float vLight0Intensity;
	  in highp   float vLight1Intensity;

	  layout(location = 0) out lowp vec4 oColour;

	  void main()
	  {
	  		lowp vec3 texcolour = texture(sTexture, vTexCoord).rgb;
	  		oColour = vec4(texcolour * vLight0Intensity * Light0Colour + texcolour * vLight1Intensity * Light1Colour, 1.0);	
	  }	
	[/GLSL_CODE]
[/FRAGMENTSHADER]


//
// Effect to render per vertex lighting
//

[EFFECT] 
	NAME 	RenderPerPixelLighting
		
	// GLOBALS UNIFORMS		
	UNIFORM uWorldMatrix		WORLD
	UNIFORM uWorldITMatrix		WORLDIT
	
	UNIFORM sTextureMap					TEXTURE0
	
	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	ATTRIBUTE	inTexCoord	UV		
		
	// SHADERS
	VERTEXSHADER   PerPixelVertexShader
	FRAGMENTSHADER PerPixelFragmentShader
	
	TEXTURE 0 marble
[/EFFECT]

[VERTEXSHADER]
	NAME 		PerPixelVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2

		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex;
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		layout(std140) uniform transforms
		{
			highp mat4 ViewProjectionMatrix;
			highp vec3 Light0PosWorld;
			highp vec3 Light0Colour;
			highp vec3 Light1PosWorld;
			highp vec3 Light1Colour;			
		};				
		
		uniform highp mat4 uWorldMatrix;
		uniform highp mat3 uWorldITMatrix;
				
		out mediump vec2  vTexCoord;
		out highp   vec3  vNormalWorld;
		out highp   vec3  vLight0DirWorld;
		out highp   vec3  vLight1DirWorld;

		void main()
		{
			// Transform position
			gl_Position = ViewProjectionMatrix * uWorldMatrix * vec4(inVertex, 1.0);	

			// Simple diffuse lighting in view space
			vNormalWorld = uWorldITMatrix * inNormal;
			highp vec3 posWorld = (uWorldMatrix * vec4(inVertex, 1.0)).xyz;
			vLight0DirWorld = posWorld - Light0PosWorld;
			vLight1DirWorld = posWorld - Light1PosWorld;

			// Pass texture coordinates
			vTexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		PerPixelFragmentShader 

	[GLSL_CODE]
	  #version 300 es
	  
	  layout(std140) uniform transforms
		{
			highp mat4 ViewProjectionMatrix;
			highp vec3 Light0PosWorld;
			highp vec3 Light0Colour;
			highp vec3 Light1PosWorld;
			highp vec3 Light1Colour;			
		};	

	  uniform sampler2D sTexture;

	  in mediump vec2  vTexCoord;
	  in highp   vec3  vNormalWorld;
	  in highp   vec3  vLight0DirWorld;
	  in highp   vec3  vLight1DirWorld;

	  layout(location = 0) out lowp vec4 oColour;

	  void main()
	  {
	  		highp vec3 normalWorld = normalize(vNormalWorld);
	  		highp float light0Intensity = max(dot(normalWorld, normalize(vLight0DirWorld)), 0.0);
	  		highp float light1Intensity = max(dot(normalWorld, normalize(vLight1DirWorld)), 0.0);
	  		
	  		lowp vec3 texcolour = texture(sTexture, vTexCoord).rgb;
	  		oColour = vec4(texcolour * light0Intensity * Light0Colour + texcolour * light1Intensity * Light1Colour, 1.0);	
	  }	
	[/GLSL_CODE]
[/FRAGMENTSHADER]
