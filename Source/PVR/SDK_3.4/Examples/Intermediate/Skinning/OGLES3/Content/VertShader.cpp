// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: VertShader.vsh ********

// File data
static const char _VertShader_vsh[] = 
	"#version 300 es\r\n"
	"\r\n"
	"/*\r\n"
	"\tIf the current vertex is affected by bones then the vertex position and\r\n"
	"\tnormal will be transformed by the bone matrices. Each vertex wil have up \r\n"
	"\tto 4 bone indices (inBoneIndex) and bone weights (inBoneWeights).\r\n"
	"\t\r\n"
	"\tThe indices are used to index into the array of bone matrices \r\n"
	"\t(BoneMatrixArray) to get the required bone matrix for transformation. The \r\n"
	"\tamount of influence a particular bone has on a vertex is determined by the\r\n"
	"\tweights which should always total 1. So if a vertex is affected by 2 bones \r\n"
	"\tthe vertex position in world space is given by the following equation:\r\n"
	"\r\n"
	"\tposition = (BoneMatrixArray[Index0] * inVertex) * Weight0 + \r\n"
	"\t           (BoneMatrixArray[Index1] * inVertex) * Weight1\r\n"
	"\r\n"
	"\tThe same proceedure is applied to the normals but the translation part of \r\n"
	"\tthe transformation is ignored.\r\n"
	"\r\n"
	"\tAfter this the position is multiplied by the view and projection matrices \r\n"
	"\tonly as the bone matrices already contain the model transform for this \r\n"
	"\tparticular mesh. The two-step transformation is required because lighting \r\n"
	"\twill not work properly in clip space.\r\n"
	"*/\r\n"
	"\r\n"
	"#define VERTEX_ARRAY\t0\r\n"
	"#define NORMAL_ARRAY\t1\r\n"
	"#define TEXCOORD_ARRAY\t2\r\n"
	"#define BONEWEIGHT_ARRAY 3\r\n"
	"#define BONEINDEX_ARRAY\t4\r\n"
	"\r\n"
	"layout (location = VERTEX_ARRAY) in highp vec3\tinVertex;\r\n"
	"layout (location = NORMAL_ARRAY) in mediump vec3\tinNormal;\r\n"
	"layout (location = TEXCOORD_ARRAY) in mediump vec2\tinTexCoord;\r\n"
	"layout (location = BONEWEIGHT_ARRAY) in mediump vec4 inBoneWeights;\r\n"
	"layout (location = BONEINDEX_ARRAY) in mediump vec4\tinBoneIndex;\r\n"
	"\r\n"
	"uniform highp   mat4 MVPMatrix;\r\n"
	"uniform highp   mat4 ViewProjMatrix;\r\n"
	"uniform mediump vec3 LightDirModel;\r\n"
	"uniform mediump vec3 LightDirWorld;\r\n"
	"uniform mediump\tint\t BoneCount;\r\n"
	"uniform highp   mat4 BoneMatrixArray[8];\r\n"
	"uniform highp   mat3 BoneMatrixArrayIT[8];\r\n"
	"\r\n"
	"out lowp    float LightIntensity;\r\n"
	"out mediump vec2  TexCoord;\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\t\r\n"
	"\t// On PowerVR SGX it is possible to index the components of a vector\r\n"
	"\t// with the [] operator. However this can cause trouble with PC\r\n"
	"\t// emulation on some hardware so we \"rotate\" the vectors instead.\r\n"
	"\tmediump ivec4 boneIndex = ivec4(inBoneIndex);\r\n"
	"\tmediump vec4 boneWeights = inBoneWeights;\r\n"
	"\t\r\n"
	"\tif (BoneCount > 0)\r\n"
	"\t{\r\n"
	"\t\thighp mat4 boneMatrix = BoneMatrixArray[boneIndex.x];\r\n"
	"\t\tmediump mat3 normalMatrix = BoneMatrixArrayIT[boneIndex.x];\r\n"
	"\t\r\n"
	"\t\thighp vec4 position = boneMatrix * vec4(inVertex, 1.0) * boneWeights.x;\r\n"
	"\t\tmediump vec3 worldNormal = normalMatrix * inNormal * boneWeights.x;\r\n"
	"\t\t\r\n"
	"\t\t// PowerVR SGX supports uniforms in the for loop and nested conditionals.\r\n"
	"\t\t// For performance reasons, the code below should be like this:\r\n"
	"\t\t//\tfor (lowp int i = 1; i < BoneCount; ++i)\r\n"
	"\t\t//\t{\r\n"
	"\t\t//\t\tboneIndex = boneIndex.yzwx;\r\n"
	"\t\t//\t\tboneWeights = boneWeights.yzwx;\r\n"
	"\t\t//\t\r\n"
	"\t\t//\t\tboneMatrix = BoneMatrixArray[boneIndex.x];\r\n"
	"\t\t//\t\tnormalMatrix = BoneMatrixArrayIT[boneIndex.x];\r\n"
	"\t\t//\t\r\n"
	"\t\t//\t\tif (boneWeights.x > 0.0)\r\n"
	"\t\t//\t\t{\r\n"
	"\t\t//\t\t\tposition += boneMatrix * vec4(inVertex, 1.0) * boneWeights.x;\r\n"
	"\t\t//\t\t\tworldNormal += normalMatrix * inNormal * boneWeights.x;\r\n"
	"\t\t//\t\t}\r\n"
	"\t\t//\t}\r\n"
	"\t\t// However this code causes a severe crash on PCEmulation\r\n"
	"\t\t// in some ATI hardware due to a very limited loop support.\r\n"
	"\t\t// If you are targeting SGX, please, modify the code below.\r\n"
	"\t\tfor (lowp int i = 1; i < 3; ++i)\r\n"
	"\t\t{\r\n"
	"\t\t\tif(i<BoneCount)\r\n"
	"\t\t\t{\r\n"
	"\t\t\t\t// \"rotate\" the vector components\r\n"
	"\t\t\t\tboneIndex = boneIndex.yzwx;\r\n"
	"\t\t\t\tboneWeights = boneWeights.yzwx;\r\n"
	"\t\t\t\r\n"
	"\t\t\t\tboneMatrix = BoneMatrixArray[boneIndex.x];\r\n"
	"\t\t\t\tnormalMatrix = BoneMatrixArrayIT[boneIndex.x];\r\n"
	"\r\n"
	"\t\t\t\tposition += boneMatrix * vec4(inVertex, 1.0) * boneWeights.x;\r\n"
	"\t\t\t\tworldNormal += normalMatrix * inNormal * boneWeights.x;\r\n"
	"\t\t\t}\r\n"
	"\t\t}\t\t\r\n"
	"\t\tgl_Position = ViewProjMatrix * position;\r\n"
	"\t\t// Simple diffuse lighting\r\n"
	"\t\tLightIntensity = max(0.0, dot(normalize(worldNormal), -LightDirWorld));\r\n"
	"\t}\r\n"
	"\telse\r\n"
	"\t{\r\n"
	"\t\tgl_Position = MVPMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\tLightIntensity = max(0.0, dot(inNormal, -LightDirModel));\r\n"
	"\t}\r\n"
	"\t\r\n"
	"\t// Pass through texcoords\r\n"
	"\tTexCoord = inTexCoord;\r\n"
	"}\r\n"
	" ";

// Register VertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_VertShader_vsh("VertShader.vsh", _VertShader_vsh, 4059);

// ******** End: VertShader.vsh ********

