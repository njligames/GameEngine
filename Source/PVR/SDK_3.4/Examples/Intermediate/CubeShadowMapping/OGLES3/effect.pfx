[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES3CubeShadowMapping
	COPYRIGHT	Imagination Technologies
[/HEADER]

//
// Effect to render the scene using a cube shadow map
//

[EFFECT] 
	NAME 	RenderSceneWithShadows
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldMatrix	 			WORLD
	UNIFORM uWorldITMatrix		 		WORLDIT
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uLightPosition				LIGHTPOSWORLD
	UNIFORM sTextureMap					TEXTURE0
	UNIFORM sShadowMap					TEXTURE1
	
	// CUSTOM SEMANTICS
	UNIFORM uInverseFarPlane			CUSTOMSEMANTIC_INVFARPLANEDIST

	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	ATTRIBUTE	inTexCoords	UV		
	
	// SHADERS
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER FragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		VertexShader

	[GLSL_CODE]
		#version 300 es
		
		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2
		
		layout (location = VERTEX_ARRAY)   in vec4  inVertex;
		layout (location = NORMAL_ARRAY)   in vec3  inNormal;
		layout (location = TEXCOORD_ARRAY) in vec2  inTexCoords;
		
		uniform highp mat4  uWorldMatrix;
		uniform highp mat4  uWorldViewProjMatrix;
		uniform highp mat3  uWorldITMatrix;	
		uniform highp vec3  uLightPosition;

		out highp   vec3   vShadowCoord;
		out highp   vec3   vLightDirection;
		out highp   vec3   vNormal;
		out mediump vec2   vTexCoords;
		
		void main()
		{
			gl_Position = uWorldViewProjMatrix * inVertex;
			highp vec3 worldPos = 	(uWorldMatrix * inVertex).xyz;
			highp vec3 transNormal = normalize(uWorldITMatrix * inNormal);
						
			vLightDirection = uLightPosition - worldPos;
			vNormal = transNormal;
											
			vShadowCoord = worldPos - uLightPosition;					
			vTexCoords = inTexCoords;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		FragmentShader 

	[GLSL_CODE]
	  #version 300 es
	  
	  uniform lowp  sampler2D    sTextureMap;
	  uniform highp samplerCube  sShadowMap;	  
	  	  
	  uniform highp float uInverseFarPlane;

	  in highp   vec3  vLightDirection;	
	  in highp   vec3  vNormal;  
	  in highp   vec3  vShadowCoord;
	  in mediump vec2  vTexCoords;
	  
	  layout(location = 0) out lowp vec4 oColour;
	  
	  void main()
	  {
	  		highp float invLightDist = 1.0 / length(vLightDirection);
	  		highp vec3 normalizedLightDir = vLightDirection * invLightDist;
	  		highp vec3 normalizedNormal = normalize(vNormal);
	  		
	  		lowp  vec4 diffuse = texture(sTextureMap, vTexCoords);
	  		
	  		highp float depth = texture(sShadowMap, vShadowCoord.xyz).x;	  		
	  		highp float refdepth = length(vShadowCoord) * uInverseFarPlane;	  		
	  		highp float shadow = 1.0;
	  		if (depth < refdepth)
  				shadow = 0.4;
  				
			highp float lightIntensity = dot(normalizedNormal, normalizedLightDir) * (invLightDist * 16.0);
  				  				
			oColour.rgb = lightIntensity * diffuse.rgb * shadow;
			oColour.a = diffuse.a;
		}		
	[/GLSL_CODE]
[/FRAGMENTSHADER]


//
// Effect to render the shadow map
//

[EFFECT] 
	NAME 	RenderShadowMap
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldMatrix	 				WORLD
	UNIFORM uWorldViewProjMatrix		WORLDVIEWPROJECTION
	UNIFORM uLightPosition					LIGHTPOSWORLD
	
	// CUSTOM SEMANTICS
	UNIFORM uInverseFarPlane				CUSTOMSEMANTIC_INVFARPLANEDIST
		
	// ATTRIBUTES
	ATTRIBUTE 	inVertex	POSITION

	// SHADERS	
	VERTEXSHADER   ShadowVertexShader
	FRAGMENTSHADER ShadowFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		ShadowVertexShader

	[GLSL_CODE]
		#version 300 es
		
		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2
		
		layout (location = VERTEX_ARRAY)   in vec4  inVertex;
		
		uniform mat4  uWorldMatrix;
		uniform mat4  uWorldViewProjMatrix;
		uniform vec3  uLightPosition;
		
		out highp vec3  vWorldPos;

		void main()
		{
			gl_Position = uWorldViewProjMatrix * inVertex;
			vWorldPos = (uWorldMatrix * inVertex).xyz - uLightPosition;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]


[FRAGMENTSHADER] 
	NAME 		ShadowFragmentShader 

	[GLSL_CODE]
		#version 300 es				

		uniform highp float uInverseFarPlane;		
		
		in highp vec3 vWorldPos;		
		
		layout(location = 0) out highp float oColour;
		
		void main()
		{
			oColour = length(vWorldPos) * uInverseFarPlane;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
//
// Effect to render a scene with diffuse lighting only
//

[EFFECT] 
	NAME 	RenderSceneMaterialColour
		
	// GLOBALS UNIFORMS
	UNIFORM WorldViewIT 		WORLDVIEWIT
	UNIFORM WVPMatrix 			WORLDVIEWPROJECTION
	UNIFORM LightDirection		LIGHTDIREYE
	UNIFORM uColour				MATERIALCOLORDIFFUSE

	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	
	VERTEXSHADER   MaterialColourVertexShader
	FRAGMENTSHADER MaterialColourFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		MaterialColourVertexShader

	[GLSL_CODE]
		#version 300 es
	  
		#define VERTEX_ARRAY    0
		
		layout (location = VERTEX_ARRAY)   in vec4  inVertex;
		
		uniform mat4  WVPMatrix;
		
		void main()
		{
			gl_Position = WVPMatrix * inVertex;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		MaterialColourFragmentShader 

	[GLSL_CODE]
	  #version 300 es
	  
	  uniform lowp vec4 uColour;
	  
	  layout(location = 0) out lowp vec4 oColour;
	  
	  void main()
	  {
			oColour = uColour;
		}		
	[/GLSL_CODE]
[/FRAGMENTSHADER]
