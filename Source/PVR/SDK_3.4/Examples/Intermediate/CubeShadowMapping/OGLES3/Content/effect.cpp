// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effect.pfx ********

// File data
static const char _effect_pfx[] = 
	"[HEADER]\r\n"
	"\tVERSION\t\t01.00.00.00\r\n"
	"\tDESCRIPTION OGLES3CubeShadowMapping\r\n"
	"\tCOPYRIGHT\tImagination Technologies\r\n"
	"[/HEADER]\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render the scene using a cube shadow map\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderSceneWithShadows\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM uWorldMatrix\t \t\t\tWORLD\r\n"
	"\tUNIFORM uWorldITMatrix\t\t \t\tWORLDIT\r\n"
	"\tUNIFORM uWorldViewProjMatrix\tWORLDVIEWPROJECTION\r\n"
	"\tUNIFORM uLightPosition\t\t\t\tLIGHTPOSWORLD\r\n"
	"\tUNIFORM sTextureMap\t\t\t\t\tTEXTURE0\r\n"
	"\tUNIFORM sShadowMap\t\t\t\t\tTEXTURE1\r\n"
	"\t\r\n"
	"\t// CUSTOM SEMANTICS\r\n"
	"\tUNIFORM uInverseFarPlane\t\t\tCUSTOMSEMANTIC_INVFARPLANEDIST\r\n"
	"\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\tATTRIBUTE\tinNormal\t\tNORMAL\r\n"
	"\tATTRIBUTE\tinTexCoords\tUV\t\t\r\n"
	"\t\r\n"
	"\t// SHADERS\r\n"
	"\tVERTEXSHADER   VertexShader\r\n"
	"\tFRAGMENTSHADER FragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t\t\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\t\t\r\n"
	"\t\tlayout (location = VERTEX_ARRAY)   in vec4  inVertex;\r\n"
	"\t\tlayout (location = NORMAL_ARRAY)   in vec3  inNormal;\r\n"
	"\t\tlayout (location = TEXCOORD_ARRAY) in vec2  inTexCoords;\r\n"
	"\t\t\r\n"
	"\t\tuniform highp mat4  uWorldMatrix;\r\n"
	"\t\tuniform highp mat4  uWorldViewProjMatrix;\r\n"
	"\t\tuniform highp mat3  uWorldITMatrix;\t\r\n"
	"\t\tuniform highp vec3  uLightPosition;\r\n"
	"\r\n"
	"\t\tout highp   vec3   vShadowCoord;\r\n"
	"\t\tout highp   vec3   vLightDirection;\r\n"
	"\t\tout highp   vec3   vNormal;\r\n"
	"\t\tout mediump vec2   vTexCoords;\r\n"
	"\t\t\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * inVertex;\r\n"
	"\t\t\thighp vec3 worldPos = \t(uWorldMatrix * inVertex).xyz;\r\n"
	"\t\t\thighp vec3 transNormal = normalize(uWorldITMatrix * inNormal);\r\n"
	"\t\t\t\t\t\t\r\n"
	"\t\t\tvLightDirection = uLightPosition - worldPos;\r\n"
	"\t\t\tvNormal = transNormal;\r\n"
	"\t\t\t\t\t\t\t\t\t\t\t\r\n"
	"\t\t\tvShadowCoord = worldPos - uLightPosition;\t\t\t\t\t\r\n"
	"\t\t\tvTexCoords = inTexCoords;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t  #version 300 es\r\n"
	"\t  \r\n"
	"\t  uniform lowp  sampler2D    sTextureMap;\r\n"
	"\t  uniform highp samplerCube  sShadowMap;\t  \r\n"
	"\t  \t  \r\n"
	"\t  uniform highp float uInverseFarPlane;\r\n"
	"\r\n"
	"\t  in highp   vec3  vLightDirection;\t\r\n"
	"\t  in highp   vec3  vNormal;  \r\n"
	"\t  in highp   vec3  vShadowCoord;\r\n"
	"\t  in mediump vec2  vTexCoords;\r\n"
	"\t  \r\n"
	"\t  layout(location = 0) out lowp vec4 oColour;\r\n"
	"\t  \r\n"
	"\t  void main()\r\n"
	"\t  {\r\n"
	"\t  \t\thighp float invLightDist = 1.0 / length(vLightDirection);\r\n"
	"\t  \t\thighp vec3 normalizedLightDir = vLightDirection * invLightDist;\r\n"
	"\t  \t\thighp vec3 normalizedNormal = normalize(vNormal);\r\n"
	"\t  \t\t\r\n"
	"\t  \t\tlowp  vec4 diffuse = texture(sTextureMap, vTexCoords);\r\n"
	"\t  \t\t\r\n"
	"\t  \t\thighp float depth = texture(sShadowMap, vShadowCoord.xyz).x;\t  \t\t\r\n"
	"\t  \t\thighp float refdepth = length(vShadowCoord) * uInverseFarPlane;\t  \t\t\r\n"
	"\t  \t\thighp float shadow = 1.0;\r\n"
	"\t  \t\tif (depth < refdepth)\r\n"
	"  \t\t\t\tshadow = 0.4;\r\n"
	"  \t\t\t\t\r\n"
	"\t\t\thighp float lightIntensity = dot(normalizedNormal, normalizedLightDir) * (invLightDist * 16.0);\r\n"
	"  \t\t\t\t  \t\t\t\t\r\n"
	"\t\t\toColour.rgb = lightIntensity * diffuse.rgb * shadow;\r\n"
	"\t\t\toColour.a = diffuse.a;\r\n"
	"\t\t}\t\t\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render the shadow map\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderShadowMap\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM uWorldMatrix\t \t\t\t\tWORLD\r\n"
	"\tUNIFORM uWorldViewProjMatrix\t\tWORLDVIEWPROJECTION\r\n"
	"\tUNIFORM uLightPosition\t\t\t\t\tLIGHTPOSWORLD\r\n"
	"\t\r\n"
	"\t// CUSTOM SEMANTICS\r\n"
	"\tUNIFORM uInverseFarPlane\t\t\t\tCUSTOMSEMANTIC_INVFARPLANEDIST\r\n"
	"\t\t\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE \tinVertex\tPOSITION\r\n"
	"\r\n"
	"\t// SHADERS\t\r\n"
	"\tVERTEXSHADER   ShadowVertexShader\r\n"
	"\tFRAGMENTSHADER ShadowFragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tShadowVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t\t\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\t\t\r\n"
	"\t\tlayout (location = VERTEX_ARRAY)   in vec4  inVertex;\r\n"
	"\t\t\r\n"
	"\t\tuniform mat4  uWorldMatrix;\r\n"
	"\t\tuniform mat4  uWorldViewProjMatrix;\r\n"
	"\t\tuniform vec3  uLightPosition;\r\n"
	"\t\t\r\n"
	"\t\tout highp vec3  vWorldPos;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * inVertex;\r\n"
	"\t\t\tvWorldPos = (uWorldMatrix * inVertex).xyz - uLightPosition;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"\r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tShadowFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\t\t\t\t\r\n"
	"\r\n"
	"\t\tuniform highp float uInverseFarPlane;\t\t\r\n"
	"\t\t\r\n"
	"\t\tin highp vec3 vWorldPos;\t\t\r\n"
	"\t\t\r\n"
	"\t\tlayout(location = 0) out highp float oColour;\r\n"
	"\t\t\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\toColour = length(vWorldPos) * uInverseFarPlane;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	" \r\n"
	"//\r\n"
	"// Effect to render a scene with diffuse lighting only\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderSceneMaterialColour\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM WorldViewIT \t\tWORLDVIEWIT\r\n"
	"\tUNIFORM WVPMatrix \t\t\tWORLDVIEWPROJECTION\r\n"
	"\tUNIFORM LightDirection\t\tLIGHTDIREYE\r\n"
	"\tUNIFORM uColour\t\t\t\tMATERIALCOLORDIFFUSE\r\n"
	"\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\tATTRIBUTE\tinNormal\t\tNORMAL\r\n"
	"\t\r\n"
	"\tVERTEXSHADER   MaterialColourVertexShader\r\n"
	"\tFRAGMENTSHADER MaterialColourFragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tMaterialColourVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t  \r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t\r\n"
	"\t\tlayout (location = VERTEX_ARRAY)   in vec4  inVertex;\r\n"
	"\t\t\r\n"
	"\t\tuniform mat4  WVPMatrix;\r\n"
	"\t\t\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = WVPMatrix * inVertex;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tMaterialColourFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t  #version 300 es\r\n"
	"\t  \r\n"
	"\t  uniform lowp vec4 uColour;\r\n"
	"\t  \r\n"
	"\t  layout(location = 0) out lowp vec4 oColour;\r\n"
	"\t  \r\n"
	"\t  void main()\r\n"
	"\t  {\r\n"
	"\t\t\toColour = uColour;\r\n"
	"\t\t}\t\t\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n";

// Register effect.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effect_pfx("effect.pfx", _effect_pfx, 5473);

// ******** End: effect.pfx ********

