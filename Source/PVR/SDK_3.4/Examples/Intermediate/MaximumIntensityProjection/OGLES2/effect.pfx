[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES2MaximumIntensityBlend
	COPYRIGHT	Imagination Technologies
[/HEADER]

[TEXTURE]
    NAME          skinTex
    PATH          skinTex.pvr
[/TEXTURE]

[EFFECT]
	NAME 	Effect
		
	// GLOBALS UNIFORMS
	UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
	UNIFORM     uWorldViewIT           WORLDVIEWIT
	UNIFORM     uLightDir				LIGHTDIREYE	
	UNIFORM		fIntensity             INTENSITY
			
	// ATTRIBUTES
	ATTRIBUTE   inVertex               POSITION
	ATTRIBUTE   inNormal				NORMAL
	
	// SHADERS
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER FragmentShader
[/EFFECT]

[EFFECT]
	NAME 	TexturedEffect
		
	// GLOBALS UNIFORMS
	UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
	UNIFORM		fIntensity             INTENSITY
	UNIFORM		sTexture				TEXTURE0
			
	// ATTRIBUTES
	ATTRIBUTE   inVertex		        POSITION
	ATTRIBUTE   inUV                   UV
	
	TEXTURE		0 						skinTex
	
	// SHADERS
	VERTEXSHADER   TexturedVertexShader
	FRAGMENTSHADER TexturedFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		   VertexShader

	[GLSL_CODE]
		attribute highp   vec3 inVertex;
		attribute mediump vec3 inNormal;

       	uniform highp vec3 uLightDir;
		uniform highp mat4 uWorldViewProjMatrix;
		uniform highp mat3 uWorldViewIT;
		
		varying lowp float fFalloff;
		
		void main() 
		{ 
		    mediump vec3 normal = normalize(uWorldViewIT * inNormal);
			lowp float NdotL    = max(dot(normal, uLightDir), 0.0);
			
			fFalloff = 1.0 - NdotL;
			
			gl_Position  = uWorldViewProjMatrix * vec4(inVertex, 1.0);
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		FragmentShader 

	[GLSL_CODE]
	  uniform  lowp float  fIntensity;
	  varying  lowp float  fFalloff;

	  void main()
	  {
	  		lowp float fCol = fIntensity + fFalloff;
			gl_FragColor    = vec4(fCol,fCol,fCol,1.0);
	  }
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[VERTEXSHADER]
	NAME 		   TexturedVertexShader

	[GLSL_CODE]
		attribute highp   vec3 inVertex;
		attribute lowp vec2 inUV;
		varying   lowp vec2 texCoords;

		uniform highp mat4 uWorldViewProjMatrix;
		
		void main() 
		{ 
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
			texCoords   = inUV;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		   TexturedFragmentShader 

	[GLSL_CODE]
	  uniform   lowp    float  fIntensity;
	  uniform   sampler2D      sTexture;
	  
	  varying   lowp vec2   texCoords;

	  void main()
	  {
			gl_FragColor = texture2D(sTexture, texCoords) * fIntensity;
	  }
	[/GLSL_CODE]
[/FRAGMENTSHADER]
