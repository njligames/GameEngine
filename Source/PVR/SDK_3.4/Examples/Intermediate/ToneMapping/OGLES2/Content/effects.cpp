// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effects.pfx ********

// File data
static const char _effects_pfx[] = 
	"[HEADER]\n"
	"    VERSION     01.00.00.00\n"
	"    DESCRIPTION OGLES2ToneMapping\n"
	"    COPYRIGHT   Imagination Technologies\n"
	"[/HEADER]\n"
	"\n"
	"[TEXTURE]\n"
	"    NAME          hdrscene\n"
	"    PATH          hdrscene.pvr\n"
	"    MINIFICATION\tNEAREST\n"
	"    MAGNIFICATION\tNEAREST\n"
	"    WRAP_S\t\tCLAMP\n"
	"    WRAP_T\t\tCLAMP\n"
	"[/TEXTURE]\n"
	"\n"
	"// **********************************************************\n"
	"// @Function       Linear\n"
	"// @Description    A simple linear operator with gamma\n"
	"//                 correction.\n"
	"// **********************************************************\n"
	"[EFFECT]\n"
	"    NAME \t    Linear\n"
	"\t\t\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\n"
	"    UNIFORM     texture                TEXTURE0\n"
	"    UNIFORM     exposure               EXPOSURE\n"
	"    ATTRIBUTE   inVertex               POSITION\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\n"
	"\t\n"
	"    TEXTURE     0                      hdrscene\n"
	"\t\n"
	"    // SHADERS\n"
	"    VERTEXSHADER   VertexShader\n"
	"    FRAGMENTSHADER LinearShader\n"
	"[/EFFECT]\n"
	"[FRAGMENTSHADER] \n"
	"    NAME \t\tLinearShader \n"
	"\n"
	"    [GLSL_CODE]\n"
	"        uniform  sampler2D      texture;\n"
	"        uniform  mediump float  exposure;\n"
	"        varying  lowp    vec2   texCoords;\n"
	"\n"
	"        const mediump float c_fPow = 1.0/2.2;\n"
	"        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);\n"
	"        void main()\n"
	"        {\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\n"
	"            vCol             *= exposure;\n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\n"
	"        }\n"
	"    [/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"// **********************************************************\n"
	"// @Function       Reinhard\n"
	"// @Description    Reinhard operator\n"
	"// **********************************************************\n"
	"[EFFECT]\n"
	"    NAME \t    Reinhard\n"
	"\t\t\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\n"
	"    UNIFORM     texture                TEXTURE0\n"
	"    UNIFORM     exposure               EXPOSURE\n"
	"    ATTRIBUTE   inVertex               POSITION\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\n"
	"\t\n"
	"    TEXTURE     0                      hdrscene\n"
	"\t\n"
	"    // SHADERS\n"
	"    VERTEXSHADER   VertexShader\n"
	"    FRAGMENTSHADER ReinhardShader\n"
	"[/EFFECT]\n"
	"[FRAGMENTSHADER] \n"
	"    NAME \t\tReinhardShader \n"
	"\n"
	"    [GLSL_CODE]\n"
	"        uniform  sampler2D      texture;\n"
	"        uniform  mediump float  exposure;\n"
	"        varying  lowp    vec2   texCoords;\n"
	"\n"
	"        const mediump float c_fPow = 1.0/2.2;\n"
	"        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);\n"
	"        void main()\n"
	"        {\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\n"
	"            vCol             *= exposure;\n"
	"            vCol              = vCol / (1.0 + vCol);\n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\n"
	"        }\n"
	"    [/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"// **********************************************************\n"
	"// @Function       Hejl & Burgess-Dawson\n"
	"// @Description    An optimized formula by Jim Hejl and\n"
	"//                 Richard Burgess-Dawson.\n"
	"// **********************************************************\n"
	"[EFFECT]\n"
	"    NAME \t    HejlBurgessDawson\n"
	"\t\t\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\n"
	"    UNIFORM     texture                TEXTURE0\n"
	"    UNIFORM     exposure               EXPOSURE\n"
	"    ATTRIBUTE   inVertex               POSITION\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\n"
	"\t\n"
	"    TEXTURE     0                      hdrscene\n"
	"\t\n"
	"    // SHADERS\n"
	"    VERTEXSHADER   VertexShader\n"
	"    FRAGMENTSHADER HejlBurgessDawsonShader\n"
	"[/EFFECT]\n"
	"[FRAGMENTSHADER] \n"
	"    NAME \t\tHejlBurgessDawsonShader \n"
	"\n"
	"    [GLSL_CODE]\n"
	"        uniform  sampler2D      texture;\n"
	"        uniform  mediump float  exposure;\n"
	"        varying  lowp    vec2   texCoords;\n"
	"        \n"
	"        mediump vec3 Op(mediump vec3 x)\n"
	"        {\n"
	"            return (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);\n"
	"        }\n"
	"        \n"
	"        void main()\n"
	"        {\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\n"
	"            vCol             *= exposure;\n"
	"            vCol              = max(vCol-0.004, 0.0);\n"
	"            gl_FragColor      = vec4(Op(vCol), 1.0);\n"
	"        }\n"
	"    [/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"// **********************************************************\n"
	"// @Function       Uncharted2\n"
	"// @Description    An operator created by John Hable of\n"
	"//                 www.filmicgames.com\n"
	"// **********************************************************\n"
	"[EFFECT]\n"
	"    NAME \t    Uncharted2\n"
	"\t\t\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\n"
	"    UNIFORM     texture                TEXTURE0\n"
	"    UNIFORM     exposure               EXPOSURE\n"
	"    ATTRIBUTE   inVertex               POSITION\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\n"
	"\t\n"
	"    TEXTURE     0                      hdrscene\n"
	"\t\n"
	"    // SHADERS\n"
	"    VERTEXSHADER   VertexShader\n"
	"    FRAGMENTSHADER Uncharted2Shader\n"
	"[/EFFECT]\n"
	"[FRAGMENTSHADER] \n"
	"    NAME \t\tUncharted2Shader\n"
	"\n"
	"    [GLSL_CODE]\n"
	"        uniform  sampler2D      texture;\n"
	"        uniform  mediump float  exposure;\n"
	"        varying  lowp    vec2   texCoords;\n"
	"\n"
	"        const mediump float c_fPow  = 1.0/2.2;\n"
	"        const mediump vec3  c_vPow  = vec3(c_fPow,c_fPow,c_fPow);\n"
	"        const mediump float c_fBias = 2.0;\n"
	"        const mediump float A = 0.15;\n"
	"        const mediump float B = 0.50;\n"
	"        const mediump float C = 0.10;\n"
	"        const mediump float D = 0.20;\n"
	"        const mediump float E = 0.02;\n"
	"        const mediump float F = 0.30;\n"
	"        const mediump vec3 whiteScale = vec3(1.37906, 1.37906, 1.37906);        // Pre-calculated white scale\n"
	"        \n"
	"        mediump vec3 Uncharted2Tonemap(mediump vec3 x)\n"
	"        {\n"
	"            return ((x*(A*x + C*B) + D*E) / (x*(A*x + B)+D*F)) - E/F;\n"
	"        }\n"
	"        \n"
	"        void main()\n"
	"        {\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\n"
	"            mediump vec3 x    = (c_fBias * (vCol * exposure));            \n"
	"            mediump vec3 R    = Uncharted2Tonemap(x);\n"
	"            vCol              = R * whiteScale;\n"
	"            \n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\n"
	"        }\n"
	"    [/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"// **********************************************************\n"
	"// Shared vertex shader\n"
	"// **********************************************************\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\t   VertexShader\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp   vec4  inVertex;\n"
	"\t\tattribute mediump vec2  inUV;\n"
	"\t\tuniform   highp   mat4  uWorldViewProjMatrix;\n"
	"\t\tvarying   lowp    vec2  texCoords;\n"
	"\t\t\n"
	"\t\tvoid main() \n"
	"\t\t{ \n"
	"\t\t\tgl_Position  = uWorldViewProjMatrix * inVertex;\n"
	"\t\t\ttexCoords    = inUV;\n"
	"\t\t} \n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n";

// Register effects.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effects_pfx("effects.pfx", _effects_pfx, 6408);

// ******** End: effects.pfx ********

