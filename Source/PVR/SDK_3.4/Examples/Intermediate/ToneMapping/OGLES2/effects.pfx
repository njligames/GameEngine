[HEADER]
    VERSION     01.00.00.00
    DESCRIPTION OGLES2ToneMapping
    COPYRIGHT   Imagination Technologies
[/HEADER]

[TEXTURE]
    NAME          hdrscene
    PATH          hdrscene.pvr
    MINIFICATION	NEAREST
    MAGNIFICATION	NEAREST
    WRAP_S		CLAMP
    WRAP_T		CLAMP
[/TEXTURE]

// **********************************************************
// @Function       Linear
// @Description    A simple linear operator with gamma
//                 correction.
// **********************************************************
[EFFECT]
    NAME 	    Linear
		
    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
    UNIFORM     texture                TEXTURE0
    UNIFORM     exposure               EXPOSURE
    ATTRIBUTE   inVertex               POSITION
    ATTRIBUTE   inUV				    UV
	
    TEXTURE     0                      hdrscene
	
    // SHADERS
    VERTEXSHADER   VertexShader
    FRAGMENTSHADER LinearShader
[/EFFECT]
[FRAGMENTSHADER] 
    NAME 		LinearShader 

    [GLSL_CODE]
        uniform  sampler2D      texture;
        uniform  mediump float  exposure;
        varying  lowp    vec2   texCoords;

        const mediump float c_fPow = 1.0/2.2;
        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);
        void main()
        {
            mediump vec3 vCol = texture2D(texture, texCoords).rgb;
            vCol             *= exposure;
            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);
        }
    [/GLSL_CODE]
[/FRAGMENTSHADER]

// **********************************************************
// @Function       Reinhard
// @Description    Reinhard operator
// **********************************************************
[EFFECT]
    NAME 	    Reinhard
		
    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
    UNIFORM     texture                TEXTURE0
    UNIFORM     exposure               EXPOSURE
    ATTRIBUTE   inVertex               POSITION
    ATTRIBUTE   inUV				    UV
	
    TEXTURE     0                      hdrscene
	
    // SHADERS
    VERTEXSHADER   VertexShader
    FRAGMENTSHADER ReinhardShader
[/EFFECT]
[FRAGMENTSHADER] 
    NAME 		ReinhardShader 

    [GLSL_CODE]
        uniform  sampler2D      texture;
        uniform  mediump float  exposure;
        varying  lowp    vec2   texCoords;

        const mediump float c_fPow = 1.0/2.2;
        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);
        void main()
        {
            mediump vec3 vCol = texture2D(texture, texCoords).rgb;
            vCol             *= exposure;
            vCol              = vCol / (1.0 + vCol);
            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);
        }
    [/GLSL_CODE]
[/FRAGMENTSHADER]

// **********************************************************
// @Function       Hejl & Burgess-Dawson
// @Description    An optimized formula by Jim Hejl and
//                 Richard Burgess-Dawson.
// **********************************************************
[EFFECT]
    NAME 	    HejlBurgessDawson
		
    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
    UNIFORM     texture                TEXTURE0
    UNIFORM     exposure               EXPOSURE
    ATTRIBUTE   inVertex               POSITION
    ATTRIBUTE   inUV				    UV
	
    TEXTURE     0                      hdrscene
	
    // SHADERS
    VERTEXSHADER   VertexShader
    FRAGMENTSHADER HejlBurgessDawsonShader
[/EFFECT]
[FRAGMENTSHADER] 
    NAME 		HejlBurgessDawsonShader 

    [GLSL_CODE]
        uniform  sampler2D      texture;
        uniform  mediump float  exposure;
        varying  lowp    vec2   texCoords;
        
        mediump vec3 Op(mediump vec3 x)
        {
            return (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);
        }
        
        void main()
        {
            mediump vec3 vCol = texture2D(texture, texCoords).rgb;
            vCol             *= exposure;
            vCol              = max(vCol-0.004, 0.0);
            gl_FragColor      = vec4(Op(vCol), 1.0);
        }
    [/GLSL_CODE]
[/FRAGMENTSHADER]

// **********************************************************
// @Function       Uncharted2
// @Description    An operator created by John Hable of
//                 www.filmicgames.com
// **********************************************************
[EFFECT]
    NAME 	    Uncharted2
		
    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION
    UNIFORM     texture                TEXTURE0
    UNIFORM     exposure               EXPOSURE
    ATTRIBUTE   inVertex               POSITION
    ATTRIBUTE   inUV				    UV
	
    TEXTURE     0                      hdrscene
	
    // SHADERS
    VERTEXSHADER   VertexShader
    FRAGMENTSHADER Uncharted2Shader
[/EFFECT]
[FRAGMENTSHADER] 
    NAME 		Uncharted2Shader

    [GLSL_CODE]
        uniform  sampler2D      texture;
        uniform  mediump float  exposure;
        varying  lowp    vec2   texCoords;

        const mediump float c_fPow  = 1.0/2.2;
        const mediump vec3  c_vPow  = vec3(c_fPow,c_fPow,c_fPow);
        const mediump float c_fBias = 2.0;
        const mediump float A = 0.15;
        const mediump float B = 0.50;
        const mediump float C = 0.10;
        const mediump float D = 0.20;
        const mediump float E = 0.02;
        const mediump float F = 0.30;
        const mediump vec3 whiteScale = vec3(1.37906, 1.37906, 1.37906);        // Pre-calculated white scale
        
        mediump vec3 Uncharted2Tonemap(mediump vec3 x)
        {
            return ((x*(A*x + C*B) + D*E) / (x*(A*x + B)+D*F)) - E/F;
        }
        
        void main()
        {
            mediump vec3 vCol = texture2D(texture, texCoords).rgb;
            mediump vec3 x    = (c_fBias * (vCol * exposure));            
            mediump vec3 R    = Uncharted2Tonemap(x);
            vCol              = R * whiteScale;
            
            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);
        }
    [/GLSL_CODE]
[/FRAGMENTSHADER]

// **********************************************************
// Shared vertex shader
// **********************************************************
[VERTEXSHADER]
	NAME 		   VertexShader

	[GLSL_CODE]
		attribute highp   vec4  inVertex;
		attribute mediump vec2  inUV;
		uniform   highp   mat4  uWorldViewProjMatrix;
		varying   lowp    vec2  texCoords;
		
		void main() 
		{ 
			gl_Position  = uWorldViewProjMatrix * inVertex;
			texCoords    = inUV;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]
