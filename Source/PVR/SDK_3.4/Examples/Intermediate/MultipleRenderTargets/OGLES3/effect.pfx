[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES3CubeShadowMapping
	COPYRIGHT	Imagination Technologies
[/HEADER]

[TEXTURES] 
	FILE texture 	texture.pvr		LINEAR-LINEAR-LINEAR REPEAT-REPEAT
[/TEXTURES]

//
// Effect to render the scene using a cube shadow map
//

[EFFECT] 
	NAME 	RenderMRTs
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION
	UNIFORM uModelMatrix				WORLD
	UNIFORM uViewMatrix					VIEW
	UNIFORM uModelViewIT		 		WORLDVIEWIT	
	UNIFORM uLightDirView				LIGHTDIREYE
		
	UNIFORM sTextureMap					TEXTURE0
	
	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inNormal		NORMAL
	ATTRIBUTE	inTexCoord	UV		
	
	// SHADERS
	VERTEXSHADER   MRTVertexShader
	FRAGMENTSHADER MRTFragmentShader
	
	TEXTURE 0 texture
[/EFFECT]

[VERTEXSHADER]
	NAME 		MRTVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2

		layout(location = VERTEX_ARRAY)   in highp   vec3 inVertex; 
		layout(location = NORMAL_ARRAY)   in highp   vec3 inNormal;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat4  uModelMatrix; 
		uniform  mat4  uViewMatrix; 
		uniform  mat3  uModelViewIT; 
		uniform  vec3  uLightDirView; 

		out highp   vec2  vDiffuseSpecular; 
		out mediump vec2  vTexCoord;

		void main() 
		{
			// Transform position
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
				
			// Transform normal from model space to eye space
			highp vec3 normalView = normalize(uModelViewIT * inNormal);

			// Calculate the specular component
			highp vec3 posView = (uViewMatrix * vec4(inVertex, 1.0)).xyz;
			highp vec3 reflLight = reflect(uLightDirView, normalView);
			highp vec3 viewDir = normalize(posView);
			vDiffuseSpecular.y = pow(max(dot(reflLight, viewDir), 0.0), 16.0);
			
			// Calculate the diffuse intensity, applying scale and bias.
			vDiffuseSpecular.x = max(dot(normalView, uLightDirView), 0.0);
			
			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		MRTFragmentShader 

	[GLSL_CODE]
	  #version 300 es

		uniform sampler2D  sTexture;

		in highp   vec2  vDiffuseSpecular; 
		in mediump vec2  vTexCoord;

		layout(location = 0) out lowp vec3  oAlbedo; 
		layout(location = 1) out lowp float oDiffuse; 
		layout(location = 2) out lowp float oSpecular; 
		layout(location = 3) out lowp vec3  oColour; 
 
		void main() 
		{ 
			lowp vec3 texcolor = texture(sTexture, vTexCoord).rgb;	
			oColour = (texcolor * vDiffuseSpecular.x) + vDiffuseSpecular.y; 
			oAlbedo = texcolor; 
			oDiffuse = vDiffuseSpecular.x; 
			oSpecular = vDiffuseSpecular.y; 
		}	
	[/GLSL_CODE]
[/FRAGMENTSHADER]


//
// Effect to blit a 3-channel texture
//

[EFFECT] 
	NAME 	BlitTexture
		
	// GLOBALS UNIFORMS
	UNIFORM sTexture			TEXTURE0
		
	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inTexCoord	UV		

	// SHADERS	
	VERTEXSHADER   BlitVertexShader
	FRAGMENTSHADER RGBBlitFragmentShader
[/EFFECT]

[EFFECT] 
	NAME 	BlitSingleChannelTexture
		
	// GLOBALS UNIFORMS
	UNIFORM sTexture			TEXTURE0
		
	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	ATTRIBUTE	inTexCoord	UV		

	// SHADERS	
	VERTEXSHADER   BlitVertexShader
	FRAGMENTSHADER SingleChannelBlitFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		BlitVertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2

		layout(location = VERTEX_ARRAY)   in highp   vec2 inVertex;
		layout(location = TEXCOORD_ARRAY) in mediump vec2 inTexCoord;

		out mediump vec2  vTexCoord;

		void main() 
		{ 
			// pass-through position and texture coordinates
			gl_Position = vec4(inVertex, 0.0, 1.0);
			vTexCoord = inTexCoord;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		RGBBlitFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform sampler2D sTexture;

		in mediump vec2 vTexCoord;

		layout(location = 0) out lowp vec4  oColour; 

		void main()
		{
			oColour = texture(sTexture, vTexCoord);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[FRAGMENTSHADER] 
	NAME 		SingleChannelBlitFragmentShader 

	[GLSL_CODE]
		#version 300 es

		uniform sampler2D sTexture;

		in mediump vec2 vTexCoord;

		layout(location = 0) out lowp vec4  oColour; 

		void main()
		{
			oColour.rgb = texture(sTexture, vTexCoord).rrr;
			oColour.a = 1.0;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
