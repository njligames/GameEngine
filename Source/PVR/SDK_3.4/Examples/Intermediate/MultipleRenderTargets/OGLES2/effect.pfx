[HEADER]
	VERSION     01.00.00.00
	DESCRIPTION OGLES2MultipleRenderTargets
	COPYRIGHT   Imagination Technologies
[/HEADER]

[TEXTURE] 
	NAME          texture 	
	PATH          texture.pvr		
	MINIFICATION  LINEAR
	MAGNIFICATION LINEAR
	MIPMAP        LINEAR 
	WRAP_T        REPEAT
	WRAP_S        REPEAT
[/TEXTURE]

//
// Effect to render the scene using a cube shadow map
//

[EFFECT] 
	NAME 	RenderMRTs
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix    WORLDVIEWPROJECTION
	UNIFORM uModelMatrix            WORLD
	UNIFORM uViewMatrix             VIEW
	UNIFORM uModelViewIT            WORLDVIEWIT	
	UNIFORM uLightDirView           LIGHTDIREYE
		
	UNIFORM sTextureMap             TEXTURE0
	
	// ATTRIBUTES
	ATTRIBUTE inVertex              POSITION
	ATTRIBUTE inNormal              NORMAL
	ATTRIBUTE inTexCoord            UV		
	
	// SHADERS
	VERTEXSHADER   MRTVertexShader
	FRAGMENTSHADER MRTFragmentShader
	
	TEXTURE 0 texture
[/EFFECT]

[VERTEXSHADER]
	NAME 		MRTVertexShader

	[GLSL_CODE]
		attribute highp   vec3 inVertex; 
		attribute highp   vec3 inNormal;
		attribute mediump vec2 inTexCoord;

		uniform  mat4  uWorldViewProjMatrix; 
		uniform  mat4  uModelMatrix; 
		uniform  mat4  uViewMatrix; 
		uniform  mat3  uModelViewIT; 
		uniform  vec3  uLightDirView; 

		varying highp   vec2  vDiffuseSpecular; 
		varying mediump vec2  vTexCoord;

		void main() 
		{
			// Transform position
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
				
			// Transform normal from model space to eye space
			highp vec3 normalView = normalize(uModelViewIT * inNormal);

			// Calculate the specular component
			highp vec3 posView = (uViewMatrix * vec4(inVertex, 1.0)).xyz;
			highp vec3 reflLight = reflect(uLightDirView, normalView);
			highp vec3 viewDir = normalize(posView);
			vDiffuseSpecular.y = pow(max(dot(reflLight, viewDir), 0.0), 16.0);
			
			// Calculate the diffuse intensity, applying scale and bias.
			vDiffuseSpecular.x = max(dot(normalView, uLightDirView), 0.0);
			
			// Pass the texture coordinates to the fragment shader
			vTexCoord = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		MRTFragmentShader 

	[GLSL_CODE]
		#extension GL_EXT_draw_buffers : enable

		uniform sampler2D     sTexture;

		varying highp   vec2  vDiffuseSpecular; 
		varying mediump vec2  vTexCoord;
 
		void main() 
		{ 
			lowp vec3 texcolor = texture2D(sTexture, vTexCoord).rgb;	
			gl_FragData[0] = vec4(texcolor, 1.0);                                               // Albedo
			gl_FragData[1] = vec4(vDiffuseSpecular.xxx, 1.0);                                   // Diffuse
			gl_FragData[2] = vec4(vDiffuseSpecular.yyy, 1.0);                                   // Specular
			gl_FragData[3] = vec4((texcolor * vDiffuseSpecular.x) + vDiffuseSpecular.y, 1.0);   // Lit
		}	
	[/GLSL_CODE]
[/FRAGMENTSHADER]


//
// Effect to blit a 3-channel texture
//

[EFFECT] 
	NAME 	BlitTexture
		
	// GLOBALS UNIFORMS
	UNIFORM sTexture           TEXTURE0
		
	// ATTRIBUTES
	ATTRIBUTE    inVertex      POSITION
	ATTRIBUTE    inTexCoord    UV		

	// SHADERS	
	VERTEXSHADER   BlitVertexShader
	FRAGMENTSHADER RGBBlitFragmentShader
[/EFFECT]

[EFFECT] 
	NAME 	BlitSingleChannelTexture
		
	// GLOBALS UNIFORMS
	UNIFORM      sTexture      TEXTURE0
		
	// ATTRIBUTES
	ATTRIBUTE    inVertex      POSITION
	ATTRIBUTE    inTexCoord    UV		

	// SHADERS	
	VERTEXSHADER   BlitVertexShader
	FRAGMENTSHADER SingleChannelBlitFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		BlitVertexShader

	[GLSL_CODE]
		attribute highp   vec2 inVertex;
		attribute mediump vec2 inTexCoord;

		varying mediump   vec2  vTexCoord;

		void main() 
		{ 
			// pass-through position and texture coordinates
			gl_Position = vec4(inVertex, 0.0, 1.0);
			vTexCoord = inTexCoord;
		} 
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER] 
	NAME 		RGBBlitFragmentShader 

	[GLSL_CODE]
		uniform sampler2D    sTexture;
		varying mediump vec2 vTexCoord;

		void main()
		{
			gl_FragColor = texture2D(sTexture, vTexCoord);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]

[FRAGMENTSHADER] 
	NAME 		SingleChannelBlitFragmentShader 

	[GLSL_CODE]
		uniform sampler2D    sTexture;
		varying mediump vec2 vTexCoord;

		void main()
		{
			gl_FragColor = vec4(texture2D(sTexture, vTexCoord).rrr, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
