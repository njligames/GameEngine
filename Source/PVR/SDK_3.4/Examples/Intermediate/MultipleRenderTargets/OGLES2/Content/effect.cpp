// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effect.pfx ********

// File data
static const char _effect_pfx[] = 
	"[HEADER]\n"
	"\tVERSION     01.00.00.00\n"
	"\tDESCRIPTION OGLES2MultipleRenderTargets\n"
	"\tCOPYRIGHT   Imagination Technologies\n"
	"[/HEADER]\n"
	"\n"
	"[TEXTURE] \n"
	"\tNAME          texture \t\n"
	"\tPATH          texture.pvr\t\t\n"
	"\tMINIFICATION  LINEAR\n"
	"\tMAGNIFICATION LINEAR\n"
	"\tMIPMAP        LINEAR \n"
	"\tWRAP_T        REPEAT\n"
	"\tWRAP_S        REPEAT\n"
	"[/TEXTURE]\n"
	"\n"
	"//\n"
	"// Effect to render the scene using a cube shadow map\n"
	"//\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tRenderMRTs\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM uWorldViewProjMatrix    WORLDVIEWPROJECTION\n"
	"\tUNIFORM uModelMatrix            WORLD\n"
	"\tUNIFORM uViewMatrix             VIEW\n"
	"\tUNIFORM uModelViewIT            WORLDVIEWIT\t\n"
	"\tUNIFORM uLightDirView           LIGHTDIREYE\n"
	"\t\t\n"
	"\tUNIFORM sTextureMap             TEXTURE0\n"
	"\t\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE inVertex              POSITION\n"
	"\tATTRIBUTE inNormal              NORMAL\n"
	"\tATTRIBUTE inTexCoord            UV\t\t\n"
	"\t\n"
	"\t// SHADERS\n"
	"\tVERTEXSHADER   MRTVertexShader\n"
	"\tFRAGMENTSHADER MRTFragmentShader\n"
	"\t\n"
	"\tTEXTURE 0 texture\n"
	"[/EFFECT]\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tMRTVertexShader\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp   vec3 inVertex; \n"
	"\t\tattribute highp   vec3 inNormal;\n"
	"\t\tattribute mediump vec2 inTexCoord;\n"
	"\n"
	"\t\tuniform  mat4  uWorldViewProjMatrix; \n"
	"\t\tuniform  mat4  uModelMatrix; \n"
	"\t\tuniform  mat4  uViewMatrix; \n"
	"\t\tuniform  mat3  uModelViewIT; \n"
	"\t\tuniform  vec3  uLightDirView; \n"
	"\n"
	"\t\tvarying highp   vec2  vDiffuseSpecular; \n"
	"\t\tvarying mediump vec2  vTexCoord;\n"
	"\n"
	"\t\tvoid main() \n"
	"\t\t{\n"
	"\t\t\t// Transform position\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);\n"
	"\t\t\t\t\n"
	"\t\t\t// Transform normal from model space to eye space\n"
	"\t\t\thighp vec3 normalView = normalize(uModelViewIT * inNormal);\n"
	"\n"
	"\t\t\t// Calculate the specular component\n"
	"\t\t\thighp vec3 posView = (uViewMatrix * vec4(inVertex, 1.0)).xyz;\n"
	"\t\t\thighp vec3 reflLight = reflect(uLightDirView, normalView);\n"
	"\t\t\thighp vec3 viewDir = normalize(posView);\n"
	"\t\t\tvDiffuseSpecular.y = pow(max(dot(reflLight, viewDir), 0.0), 16.0);\n"
	"\t\t\t\n"
	"\t\t\t// Calculate the diffuse intensity, applying scale and bias.\n"
	"\t\t\tvDiffuseSpecular.x = max(dot(normalView, uLightDirView), 0.0);\n"
	"\t\t\t\n"
	"\t\t\t// Pass the texture coordinates to the fragment shader\n"
	"\t\t\tvTexCoord = inTexCoord;\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"    \n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tMRTFragmentShader \n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\t#extension GL_EXT_draw_buffers : enable\n"
	"\n"
	"\t\tuniform sampler2D     sTexture;\n"
	"\n"
	"\t\tvarying highp   vec2  vDiffuseSpecular; \n"
	"\t\tvarying mediump vec2  vTexCoord;\n"
	" \n"
	"\t\tvoid main() \n"
	"\t\t{ \n"
	"\t\t\tlowp vec3 texcolor = texture2D(sTexture, vTexCoord).rgb;\t\n"
	"\t\t\tgl_FragData[0] = vec4(texcolor, 1.0);                                               // Albedo\n"
	"\t\t\tgl_FragData[1] = vec4(vDiffuseSpecular.xxx, 1.0);                                   // Diffuse\n"
	"\t\t\tgl_FragData[2] = vec4(vDiffuseSpecular.yyy, 1.0);                                   // Specular\n"
	"\t\t\tgl_FragData[3] = vec4((texcolor * vDiffuseSpecular.x) + vDiffuseSpecular.y, 1.0);   // Lit\n"
	"\t\t}\t\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"\n"
	"//\n"
	"// Effect to blit a 3-channel texture\n"
	"//\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tBlitTexture\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM sTexture           TEXTURE0\n"
	"\t\t\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE    inVertex      POSITION\n"
	"\tATTRIBUTE    inTexCoord    UV\t\t\n"
	"\n"
	"\t// SHADERS\t\n"
	"\tVERTEXSHADER   BlitVertexShader\n"
	"\tFRAGMENTSHADER RGBBlitFragmentShader\n"
	"[/EFFECT]\n"
	"\n"
	"[EFFECT] \n"
	"\tNAME \tBlitSingleChannelTexture\n"
	"\t\t\n"
	"\t// GLOBALS UNIFORMS\n"
	"\tUNIFORM      sTexture      TEXTURE0\n"
	"\t\t\n"
	"\t// ATTRIBUTES\n"
	"\tATTRIBUTE    inVertex      POSITION\n"
	"\tATTRIBUTE    inTexCoord    UV\t\t\n"
	"\n"
	"\t// SHADERS\t\n"
	"\tVERTEXSHADER   BlitVertexShader\n"
	"\tFRAGMENTSHADER SingleChannelBlitFragmentShader\n"
	"[/EFFECT]\n"
	"\n"
	"[VERTEXSHADER]\n"
	"\tNAME \t\tBlitVertexShader\n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tattribute highp   vec2 inVertex;\n"
	"\t\tattribute mediump vec2 inTexCoord;\n"
	"\n"
	"\t\tvarying mediump   vec2  vTexCoord;\n"
	"\n"
	"\t\tvoid main() \n"
	"\t\t{ \n"
	"\t\t\t// pass-through position and texture coordinates\n"
	"\t\t\tgl_Position = vec4(inVertex, 0.0, 1.0);\n"
	"\t\t\tvTexCoord = inTexCoord;\n"
	"\t\t} \n"
	"\t[/GLSL_CODE]\n"
	"[/VERTEXSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tRGBBlitFragmentShader \n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tuniform sampler2D    sTexture;\n"
	"\t\tvarying mediump vec2 vTexCoord;\n"
	"\n"
	"\t\tvoid main()\n"
	"\t\t{\n"
	"\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n"
	"\n"
	"[FRAGMENTSHADER] \n"
	"\tNAME \t\tSingleChannelBlitFragmentShader \n"
	"\n"
	"\t[GLSL_CODE]\n"
	"\t\tuniform sampler2D    sTexture;\n"
	"\t\tvarying mediump vec2 vTexCoord;\n"
	"\n"
	"\t\tvoid main()\n"
	"\t\t{\n"
	"\t\t\tgl_FragColor = vec4(texture2D(sTexture, vTexCoord).rrr, 1.0);\n"
	"\t\t}\n"
	"\t[/GLSL_CODE]\n"
	"[/FRAGMENTSHADER]\n";

// Register effect.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effect_pfx("effect.pfx", _effect_pfx, 4300);

// ******** End: effect.pfx ********

