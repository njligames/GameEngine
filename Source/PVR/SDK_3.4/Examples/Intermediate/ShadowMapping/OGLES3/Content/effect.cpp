// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effect.pfx ********

// File data
static const char _effect_pfx[] = 
	"[HEADER]\r\n"
	"\tVERSION\t\t01.00.00.00\r\n"
	"\tDESCRIPTION OGLES3CubeShadowMapping\r\n"
	"\tCOPYRIGHT\tImagination Technologies\r\n"
	"[/HEADER]\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render the scene using a cube shadow map\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderShadowMap\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM uWorldViewProjMatrix\tWORLDVIEWPROJECTION\r\n"
	"\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\t\r\n"
	"\t// SHADERS\r\n"
	"\tVERTEXSHADER   ShadowVertexShader\r\n"
	"\tFRAGMENTSHADER ShadowFragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tShadowVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t\t\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\t\t\r\n"
	"\t\tlayout (location = VERTEX_ARRAY) in highp vec3 inVertex;\r\n"
	"\r\n"
	"\t\tuniform highp mat4  uWorldViewProjMatrix;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tShadowFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\t\r\n"
	"\t  #version 300 es\r\n"
	"\r\n"
	"\t\tlayout(location = 0) out lowp vec4 oColour;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\toColour = vec4(1.0);\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"\r\n"
	"//\r\n"
	"// Effect to render the shadow map\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderSceneUsingShadowMap\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM uWorldViewProjMatrix\t\tWORLDVIEWPROJECTION\r\n"
	"\tUNIFORM uWorldInvMatrix\t\t\t\tWORLDI\r\n"
	"\tUNIFORM uLightPosition\t\t\t\t\tLIGHTPOSWORLD\r\n"
	"\tUNIFORM sTexture\t\t\t\t\t\t\tTEXTURE0\r\n"
	"\tUNIFORM sShadow\t\t\t\t\t\t\tTEXTURE1\r\n"
	"\t\r\n"
	"\t// CUSTOM SEMANTICS\r\n"
	"\tUNIFORM uShadowTransMatrix\t\t\tCUSTOMSEMANTIC_SHADOWTRANSMATRIX\r\n"
	"\t\t\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE \tinVertex\t\tPOSITION\r\n"
	"\tATTRIBUTE\t\tinNormal\t\tNORMAL\r\n"
	"\tATTRIBUTE\t\tinTexCoord\tUV\t\t\r\n"
	"\r\n"
	"\t// SHADERS\t\r\n"
	"\tVERTEXSHADER   VertexShader\r\n"
	"\tFRAGMENTSHADER FragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t#define NORMAL_ARRAY    1\r\n"
	"\t\t#define TEXCOORD_ARRAY  2\r\n"
	"\r\n"
	"\t\tlayout (location = VERTEX_ARRAY)   in highp   vec3  inVertex;\r\n"
	"\t\tlayout (location = NORMAL_ARRAY)   in highp   vec3  inNormal;\r\n"
	"\t\tlayout (location = TEXCOORD_ARRAY) in mediump vec2  inTexCoord;\r\n"
	"\t\t\r\n"
	"\t\tuniform highp mat4 uWorldViewProjMatrix;\r\n"
	"\t\tuniform highp mat3 uWorldInvMatrix;\r\n"
	"\t\tuniform highp mat4 uShadowTransMatrix;\r\n"
	"\t\tuniform highp vec3 uLightPosition;\r\n"
	"\r\n"
	"\t\tout highp   vec4 vProjCoord;\r\n"
	"\t\tout highp   vec3 vNormal;\r\n"
	"\t\tout highp   vec3 vLightDirection;\r\n"
	"\t\tout mediump vec2 vTexCoord;\r\n"
	"\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\t\tvProjCoord = uShadowTransMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\t\t\r\n"
	"\t\t\tvTexCoord = inTexCoord;\r\n"
	"\t\r\n"
	"\t\t\t// Simple diffuse lighting in model space\r\n"
	"\t\t\tvNormal = inNormal;\t\r\n"
	"\t\t\tvLightDirection = uWorldInvMatrix * uLightPosition - inVertex;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"\r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t\t\r\n"
	"\t\tuniform lowp  sampler2D        sTexture;\r\n"
	"\t\tuniform highp sampler2DShadow  sShadow;\r\n"
	"\r\n"
	"\t\tin highp   vec4 vProjCoord;\r\n"
	"\t\tin highp   vec3 vNormal;\t\t\r\n"
	"\t\tin highp   vec3 vLightDirection;\r\n"
	"\t\tin mediump vec2 vTexCoord;\r\n"
	"\r\n"
	"\t\tlayout(location = 0) out lowp vec4 oColour;\r\n"
	"\r\n"
	"\t\tvoid main ()\r\n"
	"\t\t{\t\r\n"
	"\t\t\t// Don't completely darken the shadowed areas, assume some ambient light\t\t\t\t\t\t\t  \t\t  \r\n"
	"\t\t\thighp float shadowVal = textureProj(sShadow, vProjCoord) * 0.6 + 0.4;\r\n"
	"\t\t\t\r\n"
	"\t\t\thighp float lightIntensity = max(dot(normalize(vNormal), normalize(vLightDirection)), 0.0) * shadowVal;\r\n"
	"\r\n"
	"\t\t\t// Sample the diffuse texture and multiply with shadow factor\r\n"
	"\t\t\toColour.rgb = texture(sTexture, vTexCoord).rgb * lightIntensity;\r\n"
	"\t\r\n"
	"\t\t\toColour.a = 1.0;\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	" \r\n"
	"//\r\n"
	"// Effect to render a scene with diffuse lighting only\r\n"
	"//\r\n"
	"\r\n"
	"[EFFECT] \r\n"
	"\tNAME \tRenderShadowMap\r\n"
	"\t\t\r\n"
	"\t// GLOBALS UNIFORMS\r\n"
	"\tUNIFORM uWorldViewProjMatrix\t\tWORLDVIEWPROJECTION\r\n"
	"\tUNIFORM uColour\t\t\t\t\t\t\tMATERIALCOLORDIFFUSE\r\n"
	"\r\n"
	"\t// ATTRIBUTES\r\n"
	"\tATTRIBUTE inVertex\t\tPOSITION\r\n"
	"\t\r\n"
	"\tVERTEXSHADER   ShadowMapVertexShader\r\n"
	"\tFRAGMENTSHADER ShadowMapFragmentShader\r\n"
	"[/EFFECT]\r\n"
	"\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\tShadowMapVertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\t#version 300 es\r\n"
	"\t  \r\n"
	"\t\t#define VERTEX_ARRAY    0\r\n"
	"\t\t\r\n"
	"\t\tlayout (location = VERTEX_ARRAY) in vec3 inVertex;\r\n"
	"\t\t\r\n"
	"\t\tuniform mat4 uWorldViewProjMatrix;\r\n"
	"\t\t\r\n"
	"\t\tvoid main()\r\n"
	"\t\t{\r\n"
	"\t\t\tgl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\t}\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n"
	"\r\n"
	"    \r\n"
	"[FRAGMENTSHADER] \r\n"
	"\tNAME \t\tShadowMapFragmentShader \r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t  #version 300 es\r\n"
	"\t  \r\n"
	"\t  uniform lowp vec4 uColour;\r\n"
	"\t  \r\n"
	"\t  layout(location = 0) out lowp vec4 oColour;\r\n"
	"\t  \r\n"
	"\t  void main()\r\n"
	"\t  {\r\n"
	"\t\t\toColour = uColour;\r\n"
	"\t\t}\t\t\r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n";

// Register effect.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effect_pfx("effect.pfx", _effect_pfx, 4546);

// ******** End: effect.pfx ********

