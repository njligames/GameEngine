[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION OGLES3CubeShadowMapping
	COPYRIGHT	Imagination Technologies
[/HEADER]

//
// Effect to render the scene using a cube shadow map
//

[EFFECT] 
	NAME 	RenderShadowMap
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix	WORLDVIEWPROJECTION

	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	
	// SHADERS
	VERTEXSHADER   ShadowVertexShader
	FRAGMENTSHADER ShadowFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		ShadowVertexShader

	[GLSL_CODE]
		#version 300 es
		
		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2
		
		layout (location = VERTEX_ARRAY) in highp vec3 inVertex;

		uniform highp mat4  uWorldViewProjMatrix;

		void main()
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		ShadowFragmentShader 

	[GLSL_CODE]	
	  #version 300 es

		layout(location = 0) out lowp vec4 oColour;

		void main()
		{
			oColour = vec4(1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]


//
// Effect to render the shadow map
//

[EFFECT] 
	NAME 	RenderSceneUsingShadowMap
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix		WORLDVIEWPROJECTION
	UNIFORM uWorldInvMatrix				WORLDI
	UNIFORM uLightPosition					LIGHTPOSWORLD
	UNIFORM sTexture							TEXTURE0
	UNIFORM sShadow							TEXTURE1
	
	// CUSTOM SEMANTICS
	UNIFORM uShadowTransMatrix			CUSTOMSEMANTIC_SHADOWTRANSMATRIX
		
	// ATTRIBUTES
	ATTRIBUTE 	inVertex		POSITION
	ATTRIBUTE		inNormal		NORMAL
	ATTRIBUTE		inTexCoord	UV		

	// SHADERS	
	VERTEXSHADER   VertexShader
	FRAGMENTSHADER FragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		VertexShader

	[GLSL_CODE]
		#version 300 es

		#define VERTEX_ARRAY    0
		#define NORMAL_ARRAY    1
		#define TEXCOORD_ARRAY  2

		layout (location = VERTEX_ARRAY)   in highp   vec3  inVertex;
		layout (location = NORMAL_ARRAY)   in highp   vec3  inNormal;
		layout (location = TEXCOORD_ARRAY) in mediump vec2  inTexCoord;
		
		uniform highp mat4 uWorldViewProjMatrix;
		uniform highp mat3 uWorldInvMatrix;
		uniform highp mat4 uShadowTransMatrix;
		uniform highp vec3 uLightPosition;

		out highp   vec4 vProjCoord;
		out highp   vec3 vNormal;
		out highp   vec3 vLightDirection;
		out mediump vec2 vTexCoord;

		void main()
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
			vProjCoord = uShadowTransMatrix * vec4(inVertex, 1.0);
			
			vTexCoord = inTexCoord;
	
			// Simple diffuse lighting in model space
			vNormal = inNormal;	
			vLightDirection = uWorldInvMatrix * uLightPosition - inVertex;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]


[FRAGMENTSHADER] 
	NAME 		FragmentShader 

	[GLSL_CODE]
		#version 300 es
		
		uniform lowp  sampler2D        sTexture;
		uniform highp sampler2DShadow  sShadow;

		in highp   vec4 vProjCoord;
		in highp   vec3 vNormal;		
		in highp   vec3 vLightDirection;
		in mediump vec2 vTexCoord;

		layout(location = 0) out lowp vec4 oColour;

		void main ()
		{	
			// Don't completely darken the shadowed areas, assume some ambient light							  		  
			highp float shadowVal = textureProj(sShadow, vProjCoord) * 0.6 + 0.4;
			
			highp float lightIntensity = max(dot(normalize(vNormal), normalize(vLightDirection)), 0.0) * shadowVal;

			// Sample the diffuse texture and multiply with shadow factor
			oColour.rgb = texture(sTexture, vTexCoord).rgb * lightIntensity;
	
			oColour.a = 1.0;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
//
// Effect to render a scene with diffuse lighting only
//

[EFFECT] 
	NAME 	RenderShadowMap
		
	// GLOBALS UNIFORMS
	UNIFORM uWorldViewProjMatrix		WORLDVIEWPROJECTION
	UNIFORM uColour							MATERIALCOLORDIFFUSE

	// ATTRIBUTES
	ATTRIBUTE inVertex		POSITION
	
	VERTEXSHADER   ShadowMapVertexShader
	FRAGMENTSHADER ShadowMapFragmentShader
[/EFFECT]

[VERTEXSHADER]
	NAME 		ShadowMapVertexShader

	[GLSL_CODE]
		#version 300 es
	  
		#define VERTEX_ARRAY    0
		
		layout (location = VERTEX_ARRAY) in vec3 inVertex;
		
		uniform mat4 uWorldViewProjMatrix;
		
		void main()
		{
			gl_Position = uWorldViewProjMatrix * vec4(inVertex, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

    
[FRAGMENTSHADER] 
	NAME 		ShadowMapFragmentShader 

	[GLSL_CODE]
	  #version 300 es
	  
	  uniform lowp vec4 uColour;
	  
	  layout(location = 0) out lowp vec4 oColour;
	  
	  void main()
	  {
			oColour = uColour;
		}		
	[/GLSL_CODE]
[/FRAGMENTSHADER]
