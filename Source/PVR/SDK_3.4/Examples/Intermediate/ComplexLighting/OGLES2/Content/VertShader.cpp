// This file was created by Filewrap 1.2
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: VertShader.vsh ********

// File data
static const char _VertShader_vsh[] = 
	"/****************************************************************************\n"
	"* Vertex Shader\n"
	"* This code is for educational purposes, not optimized for performance.\n"
	"* For best performance, use different shaders for different light setups \n"
	"* and calculate lighting in model space.\n"
	"*\n"
	"* The use of several complex lights might significantly affect performance \n"
	"* on some mobile platforms.\n"
	"*\n"
	"* For fast transformation and lighting code, please see FastTnL example.\n"
	"*****************************************************************************/\n"
	"\n"
	"attribute highp vec3  inVertex; \n"
	"attribute highp vec3  inNormal;\n"
	"attribute highp vec2  inTexCoord;\n"
	"\n"
	"uniform highp mat4  MVPMatrix;\n"
	"uniform highp mat4  ModelView;\n"
	"uniform highp mat3  ModelViewIT;\n"
	"uniform lowp  int   iLightSel;\n"
	"uniform highp vec3  LightPosition;\n"
	"uniform highp vec3  LightDirection;\n"
	"uniform lowp  vec3  LightColor;\n"
	"\n"
	"varying mediump vec2  TexCoord;\n"
	"varying lowp    vec3  DiffuseLight;\n"
	"varying lowp    vec3  SpecularLight;\n"
	"\n"
	"const highp float  cShininess = 16.0;\n"
	"const highp float  cSpotCutoff = 0.9; \n"
	"const highp float  cSpotExp = 40.0;\n"
	"\n"
	"// General Blinn-Phong lighting function\n"
	"//\n"
	"// Calculated light is added to the varyings DiffuseLight and SpecularLight\n"
	"//\n"
	"void Lighting(bool bSpecular, highp vec3 normal, highp vec3 eyeDir, highp vec3 lightDir, lowp vec3 lightColor)\n"
	"{\n"
	"\tlowp float NdotL = max(dot(normal, lightDir), 0.0);\n"
	"\tDiffuseLight += NdotL * lightColor;\n"
	"\t\n"
	"\tif (bSpecular && NdotL > 0.0)\n"
	"\t{\n"
	"\t\thighp vec3 halfVector = normalize(lightDir + eyeDir);\n"
	"\t\thighp float NdotH = max(dot(normal, halfVector), 0.0);\t\t\n"
	"\t\thighp float specular = pow(NdotH, cShininess);\n"
	"\t\tSpecularLight += specular * lightColor;\n"
	"\t}\t\n"
	"}\n"
	"\n"
	"void DirectionalLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\n"
	"{\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\n"
	"\t\n"
	"\tLighting(bSpecular, normal, eyeDir, LightDirection, LightColor);\n"
	"}\n"
	"\n"
	"void PointLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\n"
	"{\n"
	"\t// calculate normalized light direction\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\n"
	"\t\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\n"
	"\t\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, LightColor);\n"
	"}\n"
	"\n"
	"void SpotLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\n"
	"{\n"
	"\t// calculate normalized light direction\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\n"
	"\t\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\n"
	"\t\n"
	"\t// LightDirection is spot direction here\n"
	"\thighp float spotDot = dot(lightDir, LightDirection);\n"
	"\thighp float attenuation = 0.0;\n"
	"\tif (spotDot > cSpotCutoff)\n"
	"\t{\n"
	"\t\tattenuation = pow(spotDot, cSpotExp);\n"
	"\t}\n"
	"\t\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, attenuation * LightColor);\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"\t// transform normal to eye space\n"
	"\thighp vec3 normal = normalize(ModelViewIT * inNormal);\n"
	"\t\n"
	"\t// transform vertex position to eye space\n"
	"\thighp vec3 ecPosition = vec3(ModelView * vec4(inVertex, 1.0));\n"
	"\t\n"
	"\t// initalize light intensity varyings\n"
	"\tDiffuseLight = vec3(0.0);\n"
	"\tSpecularLight = vec3(0.0);\n"
	"\t\n"
	"\t// select the light function\n"
	"\tif (iLightSel == 0)\t\t\tDirectionalLight(false, normal, ecPosition);\n"
	"\telse if (iLightSel == 1)\tDirectionalLight(true, normal, ecPosition);\n"
	"\telse if (iLightSel == 2)\tPointLight(false, normal, ecPosition);\n"
	"\telse if (iLightSel == 3)\tPointLight(true, normal, ecPosition);\n"
	"\telse if (iLightSel == 4)\tSpotLight(false, normal, ecPosition);\n"
	"\telse \t\t\t\t\t\tSpotLight(true, normal, ecPosition);\n"
	"\t\n"
	"\t// Transform position\n"
	"\tgl_Position = MVPMatrix * vec4(inVertex, 1.0);\n"
	"\t\n"
	"\t// Pass through texcoords\n"
	"\tTexCoord = inTexCoord;\n"
	"}";

// Register VertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_VertShader_vsh("VertShader.vsh", _VertShader_vsh, 3746);

// ******** End: VertShader.vsh ********

