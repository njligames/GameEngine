<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AbstractActionable.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_actionable_8cpp</filename>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_abstract_actionable_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_abstract_actionable_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractActionable.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_actionable_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractActionable</class>
    <class kind="struct">njli::AbstractActionable::ActionableAction</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_builder_8cpp</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_builder_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractClock.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_clock_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractDecorator.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_decorator_8cpp</filename>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractDecorator.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_decorator_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractDecorator</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractFactoryObject.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_factory_object_8cpp</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractFactoryObject.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_factory_object_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractFactoryObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractFrameBufferObject.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_frame_buffer_object_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractFrameBufferObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractObject.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_object_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <class kind="class">njli::AbstractObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractRender.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_render_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>initGL</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a12791d9e49a2fd3306290a226864aba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderGL</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a0e7927d50044aa5a11db1bbc76848ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGLInfo</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a4661b118e43dbc7591bf560466979886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLBackgroundColor</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>ad2baa397c2c8e6ac43f648b961b4a4ac</anchor>
      <arglist>(float red, float green, float blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLViewSize</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a00ae278b2285b2394deb312d4d2d215d</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractState.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractState</class>
    <class kind="class">njli::Telegram</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>_abstract_state_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractStateMachine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_state_machine_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <class kind="class">njli::AbstractStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractTransform.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_transform_8cpp</filename>
    <includes id="_abstract_transform_8h" name="AbstractTransform.h" local="yes" imported="no">AbstractTransform.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractTransform.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_abstract_transform_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractTransform</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Action.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_action_8cpp</filename>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_action_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_action_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Action.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_action_8h</filename>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Action</class>
    <class kind="struct">njli::Action::Sequence</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ActionBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_action_builder_8cpp</filename>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_action_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ActionBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_action_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ActionBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ButtonHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_button_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::ButtonHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ButtonHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_button_h_u_d_builder_8cpp</filename>
    <includes id="_button_h_u_d_builder_8h" name="ButtonHUDBuilder.h" local="yes" imported="no">ButtonHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_button_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_button_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ButtonHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_button_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ButtonHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_camera_8cpp</filename>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <class kind="struct">njli::OcclusionBuffer</class>
    <class kind="struct">njli::OcclusionBuffer::WriteOCL</class>
    <class kind="struct">njli::OcclusionBuffer::QueryOCL</class>
    <class kind="class">njli::SceneRenderer</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWAP_ROWS_DOUBLE</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a01c1a3f2db63c63fb38336ab8a7d4a78</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWAP_ROWS_FLOAT</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>ac2b28cc58df83b61fc60374226f06f0f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAT</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a04fad4ee8b40909b70143ff909580d07</anchor>
      <arglist>(m, r, c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btTransform</type>
      <name>setFrom4x4Matrix</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a6a389881f872bccd08f851023dd8aba5</anchor>
      <arglist>(const btScalar *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getFrom4x4Matrix</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a109e3883d0e72cd3b63696eb2d6e3449</anchor>
      <arglist>(const btTransform &amp;t, btScalar *m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btTransform</type>
      <name>makeLookAt</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a4b26d234a78b05b38449b3c170eb639e</anchor>
      <arglist>(btScalar eyeX, btScalar eyeY, btScalar eyeZ, btScalar centerX, btScalar centerY, btScalar centerZ, btScalar upX, btScalar upY, btScalar upZ)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btTransform</type>
      <name>makeFrustum</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a00be233d3ffed74178d3b5c45007e585</anchor>
      <arglist>(f32 *matrixBuffer, float fov, float aspect, float nearDist, float farDist, bool leftHanded=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btTransform</type>
      <name>makeFrustum</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>af6b26df293a31018f64c6cf479681637</anchor>
      <arglist>(btScalar left, btScalar right, btScalar bottom, btScalar top, btScalar nearZ, btScalar farZ)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btTransform</type>
      <name>makeOrtho</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a91d49e91b68187264ab0d03adc6221c0</anchor>
      <arglist>(btScalar left, btScalar right, btScalar bottom, btScalar top, btScalar nearZ, btScalar farZ)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>__gluMultMatrixVecd</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>aca5c124a669a03ea46c9605c8606eb50</anchor>
      <arglist>(const f32 matrix[16], const f32 in[4], f32 out[4])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>__gluInvertMatrixd</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a7cc308eba6b1f87f9cf9d43b9e53b05d</anchor>
      <arglist>(const f32 m[16], f32 invOut[16])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>__gluMultMatricesd</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a2fb459d86a2ea99196deb67a0fbce320</anchor>
      <arglist>(const f32 a[16], const f32 b[16], f32 r[16])</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>gluProject</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>ad003e94f77c076f601f2ca73698d4f24</anchor>
      <arglist>(f32 objx, f32 objy, f32 objz, const f32 modelMatrix[16], const f32 projMatrix[16], const s32 viewport[4], f32 *winx, f32 *winy, f32 *winz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>gluUnProject</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a42d55f229625a8a8c83f902d6329b9ff</anchor>
      <arglist>(f32 winx, f32 winy, f32 winz, const f32 modelMatrix[16], const f32 projMatrix[16], const s32 viewport[4], f32 *objx, f32 *objy, f32 *objz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultiplyMatrices4by4OpenGL_FLOAT</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a7780c6ce57275b4a99a4ca62eb156b55</anchor>
      <arglist>(float *result, float *matrix1, float *matrix2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultiplyMatrixByVector4by4OpenGL_FLOAT</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>aff6d5872358af906ea9d02f7267cd370</anchor>
      <arglist>(float *resultvector, const float *matrix, const float *pvector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>glhInvertMatrixf2</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a79008b29fcf95a21a7126798bd12b7e7</anchor>
      <arglist>(float *m, float *out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>glhUnProjectf</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>ac2ed3bb39ff4af4420f9c8293a5e2c98</anchor>
      <arglist>(float winx, float winy, float winz, float *modelview, float *projection, int *viewport, float *objectCoordinate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>glhProjectf</name>
      <anchorfile>_camera_8cpp.html</anchorfile>
      <anchor>a95571d89bcab6d8ee7c8d14d994cc531</anchor>
      <arglist>(float objx, float objy, float objz, float *modelview, float *projection, int *viewport, float *windowCoordinate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Camera.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_camera_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Camera</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CameraBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_camera_builder_8cpp</filename>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_camera_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CameraBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_camera_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::CameraBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CheckboxHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_checkbox_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::CheckboxHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CheckboxHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_checkbox_h_u_d_builder_8cpp</filename>
    <includes id="_checkbox_h_u_d_builder_8h" name="CheckboxHUDBuilder.h" local="yes" imported="no">CheckboxHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_checkbox_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_checkbox_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CheckboxHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_checkbox_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::CheckboxHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_clock_8cpp</filename>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_clock_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_clock_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Clock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ClockBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_clock_builder_8cpp</filename>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_clock_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClockBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_clock_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ClockBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionResponse.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_collision_response_8cpp</filename>
    <includes id="_collision_response_8h" name="CollisionResponse.h" local="yes" imported="no">CollisionResponse.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_collision_response_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionResponse.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_collision_response_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::CollisionResponse</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionResponseBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_collision_response_builder_8cpp</filename>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_collision_response_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionResponseBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_collision_response_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::CollisionResponseBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Cube.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_cube_8h</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::Cube</class>
    <class kind="struct">njli::Cube::CubeVerts</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CubeBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_cube_builder_8cpp</filename>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_cube_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CubeBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_cube_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::CubeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DropdownHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_dropdown_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::DropdownHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DropdownHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_dropdown_h_u_d_builder_8cpp</filename>
    <includes id="_dropdown_h_u_d_builder_8h" name="DropdownHUDBuilder.h" local="yes" imported="no">DropdownHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_dropdown_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_dropdown_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropdownHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_dropdown_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::DropdownHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Font.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_font_8cpp</filename>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_font_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Font.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_font_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Font</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>FontBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_font_builder_8cpp</filename>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_font_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FontBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_font_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::FontBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>GameClock.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_game_clock_8cpp</filename>
    <includes id="_game_clock_8h" name="GameClock.h" local="yes" imported="no">GameClock.h</includes>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>GameClock.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_game_clock_8h</filename>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <class kind="class">njli::GameClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_geometry_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Geometry</class>
    <class kind="struct">njli::Geometry::TexturedColoredVertex</class>
    <class kind="struct">njli::Geometry::TexturedNormaledColoredVertex</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NUMBER_OF_MESHES</name>
      <anchorfile>_geometry_8h.html</anchorfile>
      <anchor>a32926a2aa4b4f89492e39e960367a9af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Image.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_image_8cpp</filename>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_image_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_image_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>isPowerOfTwo</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad830ed1e932d7b3943468a3371f4acd6</anchor>
      <arglist>(s32 v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>fixPowerOfTwo</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8319acb11732308c934ec1af950a959d</anchor>
      <arglist>(s32 v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Image.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_image_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Image</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ImageBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_image_builder_8cpp</filename>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_image_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_image_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ImageBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JLIEngine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_j_l_i_engine_8h</filename>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_s_q_lite_8h" name="WorldSQLite.h" local="yes" imported="no">WorldSQLite.h</includes>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_button_h_u_d_8h" name="ButtonHUD.h" local="yes" imported="no">ButtonHUD.h</includes>
    <includes id="_button_h_u_d_builder_8h" name="ButtonHUDBuilder.h" local="yes" imported="no">ButtonHUDBuilder.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_checkbox_h_u_d_8h" name="CheckboxHUD.h" local="yes" imported="no">CheckboxHUD.h</includes>
    <includes id="_checkbox_h_u_d_builder_8h" name="CheckboxHUDBuilder.h" local="yes" imported="no">CheckboxHUDBuilder.h</includes>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <includes id="_collision_response_8h" name="CollisionResponse.h" local="yes" imported="no">CollisionResponse.h</includes>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <includes id="_cube_8h" name="Cube.h" local="yes" imported="no">Cube.h</includes>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_dropdown_h_u_d_8h" name="DropdownHUD.h" local="yes" imported="no">DropdownHUD.h</includes>
    <includes id="_dropdown_h_u_d_builder_8h" name="DropdownHUDBuilder.h" local="yes" imported="no">DropdownHUDBuilder.h</includes>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <includes id="_label_h_u_d_8h" name="LabelHUD.h" local="yes" imported="no">LabelHUD.h</includes>
    <includes id="_label_h_u_d_builder_8h" name="LabelHUDBuilder.h" local="yes" imported="no">LabelHUDBuilder.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_node_state_8h" name="NodeState.h" local="yes" imported="no">NodeState.h</includes>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_physics_body_ghost_8h" name="PhysicsBodyGhost.h" local="yes" imported="no">PhysicsBodyGhost.h</includes>
    <includes id="_physics_body_ghost_builder_8h" name="PhysicsBodyGhostBuilder.h" local="yes" imported="no">PhysicsBodyGhostBuilder.h</includes>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_physics_body_soft_8h" name="PhysicsBodySoft.h" local="yes" imported="no">PhysicsBodySoft.h</includes>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_physics_close_contact_8h" name="PhysicsCloseContact.h" local="yes" imported="no">PhysicsCloseContact.h</includes>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_physics_constraint_hinge_8h" name="PhysicsConstraintHinge.h" local="yes" imported="no">PhysicsConstraintHinge.h</includes>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_physics_constraint_point_to_point_8h" name="PhysicsConstraintPointToPoint.h" local="yes" imported="no">PhysicsConstraintPointToPoint.h</includes>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_physics_constraint_slider_8h" name="PhysicsConstraintSlider.h" local="yes" imported="no">PhysicsConstraintSlider.h</includes>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_physics_constraint_cone_twist_8h" name="PhysicsConstraintConeTwist.h" local="yes" imported="no">PhysicsConstraintConeTwist.h</includes>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_physics_constraint_fixed_8h" name="PhysicsConstraintFixed.h" local="yes" imported="no">PhysicsConstraintFixed.h</includes>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_8h" name="PhysicsConstraintGeneric6DofSpring.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpring.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_physics_contact_8h" name="PhysicsContact.h" local="yes" imported="no">PhysicsContact.h</includes>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_physics_shape_sphere_8h" name="PhysicsShapeSphere.h" local="yes" imported="no">PhysicsShapeSphere.h</includes>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <includes id="_physics_shape_cylinder_8h" name="PhysicsShapeCylinder.h" local="yes" imported="no">PhysicsShapeCylinder.h</includes>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <includes id="_physics_shape_capsule_8h" name="PhysicsShapeCapsule.h" local="yes" imported="no">PhysicsShapeCapsule.h</includes>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <includes id="_physics_shape_cone_8h" name="PhysicsShapeCone.h" local="yes" imported="no">PhysicsShapeCone.h</includes>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <includes id="_physics_shape_multi_sphere_8h" name="PhysicsShapeMultiSphere.h" local="yes" imported="no">PhysicsShapeMultiSphere.h</includes>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <includes id="_physics_shape_convex_hull_8h" name="PhysicsShapeConvexHull.h" local="yes" imported="no">PhysicsShapeConvexHull.h</includes>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_8h" name="PhysicsShapeConvexTriangleMesh.h" local="yes" imported="no">PhysicsShapeConvexTriangleMesh.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_8h" name="PhysicsShapeBvhTriangleMesh.h" local="yes" imported="no">PhysicsShapeBvhTriangleMesh.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_heightfield_terrain_8h" name="PhysicsShapeHeightfieldTerrain.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrain.h</includes>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <includes id="_physics_shape_static_plane_8h" name="PhysicsShapeStaticPlane.h" local="yes" imported="no">PhysicsShapeStaticPlane.h</includes>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_plane_8h" name="Plane.h" local="yes" imported="no">Plane.h</includes>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <includes id="_slider_h_u_d_8h" name="SliderHUD.h" local="yes" imported="no">SliderHUD.h</includes>
    <includes id="_slider_h_u_d_builder_8h" name="SliderHUDBuilder.h" local="yes" imported="no">SliderHUDBuilder.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_sound_builder_8h" name="SoundBuilder.h" local="yes" imported="no">SoundBuilder.h</includes>
    <includes id="_sprite2_d_8h" name="Sprite2D.h" local="yes" imported="no">Sprite2D.h</includes>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_stop_watch_8h" name="StopWatch.h" local="yes" imported="no">StopWatch.h</includes>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <includes id="_textbox_h_u_d_8h" name="TextboxHUD.h" local="yes" imported="no">TextboxHUD.h</includes>
    <includes id="_textbox_h_u_d_builder_8h" name="TextboxHUDBuilder.h" local="yes" imported="no">TextboxHUDBuilder.h</includes>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>JLIFactoryTypes.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_j_l_i_factory_types_8cpp</filename>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <namespace>njli</namespace>
    <member kind="variable">
      <type>const u32</type>
      <name>njliRenderCategoryValues</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad2ab6dbf5b09eba518fd9d26d6f65c90</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JLIFactoryTypes.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_j_l_i_factory_types_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <namespace>njli</namespace>
    <member kind="enumeration">
      <type></type>
      <name>njliActionTimingMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDSolidity</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDAlign</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDWinding</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDImageFlags</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDLineCap</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureCubeSides</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMinificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMagnificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureWrapType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliShaderType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliFileType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliPhysicsType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTransparencyMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliCullMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliBitCategories</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliObjectEnumType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JsonJLI.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_json_j_l_i_8cpp</filename>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_json_j_l_i_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JsonJLI.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_json_j_l_i_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::JsonJLI</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JsonJLIBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_json_j_l_i_builder_8cpp</filename>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_json_j_l_i_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JsonJLIBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_json_j_l_i_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::JsonJLIBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LabelHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_label_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::LabelHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LabelHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_label_h_u_d_builder_8cpp</filename>
    <includes id="_label_h_u_d_builder_8h" name="LabelHUDBuilder.h" local="yes" imported="no">LabelHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_label_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_label_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabelHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_label_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::LabelHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LevelOfDetail.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_level_of_detail_8cpp</filename>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_level_of_detail_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LevelOfDetail.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_level_of_detail_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::LevelOfDetail</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LevelOfDetailBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_level_of_detail_builder_8cpp</filename>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_level_of_detail_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LevelOfDetailBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_level_of_detail_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::LevelOfDetailBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Light.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_light_8cpp</filename>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_light_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Light.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_light_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Light</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LightBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_light_builder_8cpp</filename>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_light_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LightBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_light_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::LightBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Material.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_8cpp</filename>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_material_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Material.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Material</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_builder_8cpp</filename>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_material_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MaterialBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::MaterialBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialProperty.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_property_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::MaterialProperty</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialPropertyBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_property_builder_8cpp</filename>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_material_property_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MaterialPropertyBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_material_property_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::MaterialPropertyBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Node.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_8cpp</filename>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_node_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Node.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Node</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_builder_8cpp</filename>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::NodeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeState.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_8cpp</filename>
    <includes id="_node_state_8h" name="NodeState.h" local="yes" imported="no">NodeState.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_state_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeState.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <class kind="class">njli::NodeState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_builder_8cpp</filename>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_state_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeStateBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::NodeStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateMachine.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_machine_8cpp</filename>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_state_machine_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeStateMachine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_machine_8h</filename>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <class kind="class">njli::NodeStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateMachineBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_machine_builder_8cpp</filename>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_node_state_machine_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_node_state_machine_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::NodeStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleEmitter.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_particle_emitter_8cpp</filename>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RANDOM_MINUS_1_TO_1</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>a7fef035fbd7408e54ff4994e65e75088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RANDOM_0_TO_1</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>a018259c80ef44a2fc8ab1b2adfe969e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEGREES_TO_RADIANS</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>a82fbc4a6a060a43e0ca026b5bde6ddcf</anchor>
      <arglist>(__ANGLE__)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLAMP</name>
      <anchorfile>_particle_emitter_8cpp.html</anchorfile>
      <anchor>ac4bc35793917e49b2571449e9f4ff058</anchor>
      <arglist>(X, A, B)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleEmitter.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_particle_emitter_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::ParticleEmitter</class>
    <class kind="struct">njli::ParticleEmitter::Particle</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleEmitterBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_particle_emitter_builder_8cpp</filename>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_particle_emitter_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleEmitterBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_particle_emitter_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ParticleEmitterBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBody.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_8cpp</filename>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBody.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::PhysicsBody</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhost.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_ghost_8cpp</filename>
    <includes id="_physics_body_ghost_8h" name="PhysicsBodyGhost.h" local="yes" imported="no">PhysicsBodyGhost.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_ghost_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhost.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_ghost_8h</filename>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodyGhost</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhostBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_ghost_builder_8cpp</filename>
    <includes id="_physics_body_ghost_builder_8h" name="PhysicsBodyGhostBuilder.h" local="yes" imported="no">PhysicsBodyGhostBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_ghost_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhostBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_ghost_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodyGhostBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigid.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_rigid_8cpp</filename>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_body_rigid_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_rigid_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigid.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_rigid_8h</filename>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodyRigid</class>
    <class kind="class">njli::PhysicsBodyRigid::ForceAndPosition</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigidBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_rigid_builder_8cpp</filename>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_rigid_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigidBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_rigid_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodyRigidBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoft.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_soft_8cpp</filename>
    <includes id="_physics_body_soft_8h" name="PhysicsBodySoft.h" local="yes" imported="no">PhysicsBodySoft.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_soft_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoft.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_soft_8h</filename>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodySoft</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoftBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_soft_builder_8cpp</filename>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_body_soft_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoftBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_body_soft_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsBodySoftBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContact.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_close_contact_8cpp</filename>
    <includes id="_physics_close_contact_8h" name="PhysicsCloseContact.h" local="yes" imported="no">PhysicsCloseContact.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_close_contact_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContact.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_close_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsCloseContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContactBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_close_contact_builder_8cpp</filename>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_close_contact_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContactBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_close_contact_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsCloseContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraint.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_8cpp</filename>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraint.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraint</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_builder_8cpp</filename>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwist.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_cone_twist_8cpp</filename>
    <includes id="_physics_constraint_cone_twist_8h" name="PhysicsConstraintConeTwist.h" local="yes" imported="no">PhysicsConstraintConeTwist.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_cone_twist_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_cone_twist_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwist.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_cone_twist_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintConeTwist</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwistBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_cone_twist_builder_8cpp</filename>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_cone_twist_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_cone_twist_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwistBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_cone_twist_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintConeTwistBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixed.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_fixed_8cpp</filename>
    <includes id="_physics_constraint_fixed_8h" name="PhysicsConstraintFixed.h" local="yes" imported="no">PhysicsConstraintFixed.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_fixed_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_fixed_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixed.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_fixed_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintFixed</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixedBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_fixed_builder_8cpp</filename>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_fixed_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_fixed_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixedBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_fixed_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintFixedBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6Dof.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_8cpp</filename>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_generic6_dof_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_generic6_dof_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6Dof.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6Dof</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_builder_8cpp</filename>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_generic6_dof_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_generic6_dof_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpring.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_spring_8cpp</filename>
    <includes id="_physics_constraint_generic6_dof_spring_8h" name="PhysicsConstraintGeneric6DofSpring.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpring.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_generic6_dof_spring_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_generic6_dof_spring_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpring.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_spring_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpring</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpringBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_spring_builder_8cpp</filename>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_generic6_dof_spring_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_generic6_dof_spring_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpringBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_generic6_dof_spring_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpringBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHinge.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_hinge_8cpp</filename>
    <includes id="_physics_constraint_hinge_8h" name="PhysicsConstraintHinge.h" local="yes" imported="no">PhysicsConstraintHinge.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_hinge_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_hinge_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHinge.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_hinge_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintHinge</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHingeBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_hinge_builder_8cpp</filename>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_hinge_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_hinge_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHingeBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_hinge_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintHingeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPoint.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_point_to_point_8cpp</filename>
    <includes id="_physics_constraint_point_to_point_8h" name="PhysicsConstraintPointToPoint.h" local="yes" imported="no">PhysicsConstraintPointToPoint.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_point_to_point_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_point_to_point_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPoint.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_point_to_point_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintPointToPoint</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPointBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_point_to_point_builder_8cpp</filename>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_point_to_point_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_point_to_point_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPointBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_point_to_point_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintPointToPointBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSlider.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_slider_8cpp</filename>
    <includes id="_physics_constraint_slider_8h" name="PhysicsConstraintSlider.h" local="yes" imported="no">PhysicsConstraintSlider.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_slider_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_slider_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSlider.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_slider_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintSlider</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSliderBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_slider_builder_8cpp</filename>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_constraint_slider_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_constraint_slider_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSliderBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_constraint_slider_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintSliderBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsContact.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_contact_8cpp</filename>
    <includes id="_physics_contact_8h" name="PhysicsContact.h" local="yes" imported="no">PhysicsContact.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_contact_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsContact.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsContactBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_contact_builder_8cpp</filename>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_contact_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsContactBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_contact_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsField.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_field_8cpp</filename>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_field_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsField.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_field_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsField</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsFieldBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_field_builder_8cpp</filename>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_field_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsFieldBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_field_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsFieldBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContact.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_ray_contact_8cpp</filename>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_ray_contact_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContact.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_ray_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsRayContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContactBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_ray_contact_builder_8cpp</filename>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_ray_contact_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContactBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_ray_contact_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsRayContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShape.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_8cpp</filename>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShape.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsShape</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box_8cpp</filename>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_box_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box_8h</filename>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsShapeBox</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2D.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box2_d_8cpp</filename>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_box2_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_box2_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2D.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box2_d_8h</filename>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsShapeBox2D</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2DBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box2_d_builder_8cpp</filename>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_box2_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_box2_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2DBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box2_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsShapeBox2DBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBoxBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box_builder_8cpp</filename>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_box_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBoxBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_box_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsShapeBoxBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMesh.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_bvh_triangle_mesh_8cpp</filename>
    <includes id="_physics_shape_bvh_triangle_mesh_8h" name="PhysicsShapeBvhTriangleMesh.h" local="yes" imported="no">PhysicsShapeBvhTriangleMesh.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_bvh_triangle_mesh_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_bvh_triangle_mesh_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMesh.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_bvh_triangle_mesh_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeBvhTriangleMesh</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMeshBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_bvh_triangle_mesh_builder_8cpp</filename>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_bvh_triangle_mesh_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_bvh_triangle_mesh_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMeshBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_bvh_triangle_mesh_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeBvhTriangleMeshBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsule.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_capsule_8cpp</filename>
    <includes id="_physics_shape_capsule_8h" name="PhysicsShapeCapsule.h" local="yes" imported="no">PhysicsShapeCapsule.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_capsule_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_capsule_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsule.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_capsule_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCapsule</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsuleBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_capsule_builder_8cpp</filename>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_capsule_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_capsule_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsuleBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_capsule_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeCapsuleBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCone.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cone_8cpp</filename>
    <includes id="_physics_shape_cone_8h" name="PhysicsShapeCone.h" local="yes" imported="no">PhysicsShapeCone.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_cone_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_cone_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCone.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cone_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCone</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConeBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cone_builder_8cpp</filename>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_cone_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_cone_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConeBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cone_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHull.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_hull_8cpp</filename>
    <includes id="_physics_shape_convex_hull_8h" name="PhysicsShapeConvexHull.h" local="yes" imported="no">PhysicsShapeConvexHull.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_convex_hull_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_convex_hull_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHull.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_hull_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeConvexHull</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHullBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_hull_builder_8cpp</filename>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_convex_hull_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_convex_hull_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHullBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_hull_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConvexHullBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMesh.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_triangle_mesh_8cpp</filename>
    <includes id="_physics_shape_convex_triangle_mesh_8h" name="PhysicsShapeConvexTriangleMesh.h" local="yes" imported="no">PhysicsShapeConvexTriangleMesh.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_convex_triangle_mesh_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_convex_triangle_mesh_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMesh.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_triangle_mesh_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeConvexTriangleMesh</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMeshBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_triangle_mesh_builder_8cpp</filename>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_convex_triangle_mesh_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_convex_triangle_mesh_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMeshBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_convex_triangle_mesh_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConvexTriangleMeshBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cylinder_8cpp</filename>
    <includes id="_physics_shape_cylinder_8h" name="PhysicsShapeCylinder.h" local="yes" imported="no">PhysicsShapeCylinder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_cylinder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_cylinder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cylinder_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCylinder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinderBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cylinder_builder_8cpp</filename>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_cylinder_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_cylinder_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinderBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_cylinder_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeCylinderBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrain.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_heightfield_terrain_8cpp</filename>
    <includes id="_physics_shape_heightfield_terrain_8h" name="PhysicsShapeHeightfieldTerrain.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrain.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_heightfield_terrain_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_heightfield_terrain_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrain.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_heightfield_terrain_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrain</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrainBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_heightfield_terrain_builder_8cpp</filename>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_heightfield_terrain_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_heightfield_terrain_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrainBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_heightfield_terrain_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrainBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphere.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_multi_sphere_8cpp</filename>
    <includes id="_physics_shape_multi_sphere_8h" name="PhysicsShapeMultiSphere.h" local="yes" imported="no">PhysicsShapeMultiSphere.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_multi_sphere_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_multi_sphere_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphere.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_multi_sphere_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeMultiSphere</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphereBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_multi_sphere_builder_8cpp</filename>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_multi_sphere_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_multi_sphere_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphereBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_multi_sphere_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeMultiSphereBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphere.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_sphere_8cpp</filename>
    <includes id="_physics_shape_sphere_8h" name="PhysicsShapeSphere.h" local="yes" imported="no">PhysicsShapeSphere.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_sphere_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_sphere_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphere.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_sphere_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeSphere</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphereBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_sphere_builder_8cpp</filename>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_sphere_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_sphere_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphereBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_sphere_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeSphereBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlane.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_static_plane_8cpp</filename>
    <includes id="_physics_shape_static_plane_8h" name="PhysicsShapeStaticPlane.h" local="yes" imported="no">PhysicsShapeStaticPlane.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_static_plane_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_static_plane_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlane.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_static_plane_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeStaticPlane</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlaneBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_static_plane_builder_8cpp</filename>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_shape_static_plane_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_shape_static_plane_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlaneBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_shape_static_plane_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeStaticPlaneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsWorld.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_world_8cpp</filename>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_physics_world_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_world_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPreTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a198074fecee1ecd3469a9eb42d3b1672</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPostTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a805528e68206342abc780b53e418030d</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CustomNearCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a402c299bd8ac856eb95211ce9a9ff561</anchor>
      <arglist>(btBroadphasePair &amp;collisionPair, btCollisionDispatcher &amp;dispatcher, const btDispatcherInfo &amp;dispatchInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btScalar</type>
      <name>CustomCalculateCombinedFriction</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5a1d0391db0ec9962dafeb111b04ffd7</anchor>
      <arglist>(float friction0, float friction1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btScalar</type>
      <name>CustomCalculateCombinedRestitution</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a964de90b3d32f6780da381270d0928bf</anchor>
      <arglist>(float restitution0, float restitution1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactAddedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3906a027082baad67e169df7b3765907</anchor>
      <arglist>(btManifoldPoint &amp;cp, const btCollisionObjectWrapper *colObj0Wrap, int partId0, int index0, const btCollisionObjectWrapper *colObj1Wrap, int partId1, int index1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactProcessedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>acd7e5a77476fef5406733dbcfbb9d864</anchor>
      <arglist>(btManifoldPoint &amp;cp, void *body0, void *body1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactDestroyedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a255c1939055a2c771dddaa2f05f9b7c2</anchor>
      <arglist>(void *userPersistentData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsWorld.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_world_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::PhysicsWorld</class>
    <class kind="class">njli::PhysicsWorld::CustomFilterCallback</class>
    <namespace>njli</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>ghostCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a1fa129854a8e7752403465871495fc68</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPreTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a198074fecee1ecd3469a9eb42d3b1672</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPostTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a805528e68206342abc780b53e418030d</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsWorldBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_world_builder_8cpp</filename>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_physics_world_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsWorldBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_physics_world_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PhysicsWorldBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Plane.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_plane_8cpp</filename>
    <includes id="_plane_8h" name="Plane.h" local="yes" imported="no">Plane.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_plane_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Plane.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_plane_8h</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <class kind="class">njli::Plane</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PlaneBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_plane_builder_8cpp</filename>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_plane_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PlaneBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_plane_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::PlaneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractFrameBufferObject.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_abstract_frame_buffer_object_8cpp</filename>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <namespace>njli</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createFBO</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a250589dfb52cb55a0cea374beb111622</anchor>
      <arglist>(GLuint &amp;frameBuffer, GLuint &amp;texColorBuffer, GLuint &amp;rboDepthStencil, GLsizei width, GLsizei height)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractRender.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_abstract_render_8cpp</filename>
    <includes id="_abstract_render_8h" name="AbstractRender.h" local="yes" imported="no">AbstractRender.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>JLIGameEngineTest_AbstractRender_h</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a0364aea0517343cf98d3b93db1218c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGL</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a12791d9e49a2fd3306290a226864aba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderGL</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a0e7927d50044aa5a11db1bbc76848ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGLInfo</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a4661b118e43dbc7591bf560466979886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLBackgroundColor</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>ad2baa397c2c8e6ac43f648b961b4a4ac</anchor>
      <arglist>(float red, float green, float blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLViewSize</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a00ae278b2285b2394deb312d4d2d215d</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static f32</type>
      <name>bgRed</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a4b9c08bd0c7b356004b0cccc05da01cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static f32</type>
      <name>bgGreen</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>ae73dddf8d67b90d8806429358389814a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static f32</type>
      <name>bgBlue</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>acffc44901d002095312c393713c6d260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static f32</type>
      <name>bgAlpha</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>ad26c6d6de14dc0a3309ecdcdbb31c1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>viewX</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>afdbbcd23804eddcb38ff4e7e657e121d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>viewY</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>ac734d4cf17d96275a66845549e863cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>viewWidth</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>a4557638536f96e0a599d359ccb36c30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>viewHeight</name>
      <anchorfile>_abstract_render_8cpp.html</anchorfile>
      <anchor>aa1df638c424f3846a61b41792d978802</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ButtonHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_button_h_u_d_8cpp</filename>
    <includes id="_button_h_u_d_8h" name="ButtonHUD.h" local="yes" imported="no">ButtonHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_button_h_u_d_builder_8h" name="ButtonHUDBuilder.h" local="yes" imported="no">ButtonHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_button_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_button_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CheckboxHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_checkbox_h_u_d_8cpp</filename>
    <includes id="_checkbox_h_u_d_8h" name="CheckboxHUD.h" local="yes" imported="no">CheckboxHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_checkbox_h_u_d_builder_8h" name="CheckboxHUDBuilder.h" local="yes" imported="no">CheckboxHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_checkbox_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICON_CHECK</name>
      <anchorfile>_checkbox_h_u_d_8cpp.html</anchorfile>
      <anchor>ad3fefbb27b357bae466abf4506c95387</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALE</name>
      <anchorfile>_checkbox_h_u_d_8cpp.html</anchorfile>
      <anchor>a0cbea62f1ce2043dd08108e65ed8de1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_checkbox_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cube.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_cube_8cpp</filename>
    <includes id="_cube_8h" name="Cube.h" local="yes" imported="no">Cube.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_cube_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_cube_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>DEFAULTCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6a44dbb9165c43c497c0c9f5d2e6e37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>REDCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a4c075939a4846b2084e1c92e0d690544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>GREENCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a211a57822620ac58634a963fa38ce4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>BLUECOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5039b2e053a3827786be49ea3f891736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Geometry::TexturedColoredVertex</type>
      <name>CubeVertices</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6bbe5d8def41a353834dac740208f67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const GLubyte</type>
      <name>Indices</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a7306037e378d1b12ebc05d41a161ae71</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DropdownHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_dropdown_h_u_d_8cpp</filename>
    <includes id="_dropdown_h_u_d_8h" name="DropdownHUD.h" local="yes" imported="no">DropdownHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_dropdown_h_u_d_builder_8h" name="DropdownHUDBuilder.h" local="yes" imported="no">DropdownHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_dropdown_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_dropdown_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Geometry.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_geometry_8cpp</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_geometry_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_geometry_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const u32</type>
      <name>MAX_SPRITES</name>
      <anchorfile>_geometry_8cpp.html</anchorfile>
      <anchor>a90b288dca2ecdb2babc065a62271931c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const GLfloat</type>
      <name>IDENTITYMATRIX</name>
      <anchorfile>_geometry_8cpp.html</anchorfile>
      <anchor>ac93fd666e69fc8570662eec1bca711ee</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabelHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_label_h_u_d_8cpp</filename>
    <includes id="_label_h_u_d_8h" name="LabelHUD.h" local="yes" imported="no">LabelHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_label_h_u_d_builder_8h" name="LabelHUDBuilder.h" local="yes" imported="no">LabelHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_label_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_label_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MaterialProperty.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_material_property_8cpp</filename>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_material_property_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUMBER_OF_IMAGES</name>
      <anchorfile>_material_property_8cpp.html</anchorfile>
      <anchor>ad8c73a02e60e87c3a074333058727fc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShaderProgram.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_shader_program_8cpp</filename>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliGLSLVarType</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>acf66b2f00a2695b3b6f2d4c50d3bac76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getGLSLVarTypeName</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>afe41407ce6ca87daf89bd5007f1b0442</anchor>
      <arglist>(njliGLSLVarType var)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log_v_fixed_length</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>a752654a5895844009d0a525c34e74c73</anchor>
      <arglist>(const GLchar *source, const GLint length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log_shader_info_log</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>a681b4173cee74384997d20f7e7d87e6d</anchor>
      <arglist>(GLuint shader_object_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>log_program_info_log</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>ae37ec69774df9a3c473958d41245c27f</anchor>
      <arglist>(GLuint program_object_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLuint</type>
      <name>compile_shader</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>ab964c8489d10fec2dc891d572453646f</anchor>
      <arglist>(const GLenum type, const GLchar *source, const GLint length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLuint</type>
      <name>link_program</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>a3b36ffaf5ba3726d1940e5a9836ffe0d</anchor>
      <arglist>(const GLuint vertex_shader, const GLuint fragment_shader)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLint</type>
      <name>validate_program</name>
      <anchorfile>_shader_program_8cpp.html</anchorfile>
      <anchor>a23619ee67b28c07e375171adc8bba267</anchor>
      <arglist>(const GLuint program)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SliderHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_slider_h_u_d_8cpp</filename>
    <includes id="_slider_h_u_d_8h" name="SliderHUD.h" local="yes" imported="no">SliderHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_slider_h_u_d_builder_8h" name="SliderHUDBuilder.h" local="yes" imported="no">SliderHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_slider_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_slider_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sprite2D.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_sprite2_d_8cpp</filename>
    <includes id="_sprite2_d_8h" name="Sprite2D.h" local="yes" imported="no">Sprite2D.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector3</type>
      <name>BL_VERTEX</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a9559648e603398e3279d97dd6df8802d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector3</type>
      <name>BR_VERTEX</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a619e49f98bf6f9144517c43b9485fed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector3</type>
      <name>TL_VERTEX</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a43d7c697dfd8270632259dc924540898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector3</type>
      <name>TR_VERTEX</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a307a27d1f8c173921a3b25f5400d89ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector2</type>
      <name>BL_TEXTURECOORD</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a0fa8342614425955182568a563389500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector2</type>
      <name>BR_TEXTURECOORD</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a76f37e436f4f7b45803a262d3e7ec09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector2</type>
      <name>TL_TEXTURECOORD</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>aed0227a2dc2bd3bc169c42221cd684e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector2</type>
      <name>TR_TEXTURECOORD</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a97c77937b702f6298988fc9516850fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>DEFAULTCOLOR</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>a8e3275dee49ff498d474dc4fa3b0d403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector2</type>
      <name>DEFAULTPIVOT</name>
      <anchorfile>_sprite2_d_8cpp.html</anchorfile>
      <anchor>ad096e533133a0b5e5f56acd5bc5aa1bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TextboxHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_textbox_h_u_d_8cpp</filename>
    <includes id="_textbox_h_u_d_8h" name="TextboxHUD.h" local="yes" imported="no">TextboxHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_textbox_h_u_d_builder_8h" name="TextboxHUDBuilder.h" local="yes" imported="no">TextboxHUDBuilder.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_textbox_h_u_d_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_textbox_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldDebugDrawer.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_world_debug_drawer_8cpp</filename>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_debug_drawer_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_debug_drawer_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldHUD.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/render/OpenGLES20/</path>
    <filename>_world_h_u_d_8cpp</filename>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NANOVG_GLES2_IMPLEMENTATION</name>
      <anchorfile>_world_h_u_d_8cpp.html</anchorfile>
      <anchor>a2abe99f80e5d2620d94bfa2361288796</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_h_u_d_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Scene.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_8cpp</filename>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Scene.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Scene</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_builder_8cpp</filename>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SceneBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SceneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneState.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_8cpp</filename>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_state_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SceneState.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <class kind="class">njli::SceneState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_builder_8cpp</filename>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_state_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SceneStateBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SceneStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateMachine.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_machine_8cpp</filename>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_state_machine_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SceneStateMachine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_machine_8h</filename>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <class kind="class">njli::SceneStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateMachineBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_machine_builder_8cpp</filename>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_scene_state_machine_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SceneStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_scene_state_machine_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SceneStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ShaderProgram.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_shader_program_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::ShaderProgram</class>
    <namespace>njli</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>GLInfoFunction</name>
      <anchorfile>_shader_program_8h.html</anchorfile>
      <anchor>a50070b167d585b9e4ba6faa4e3063cc7</anchor>
      <arglist>)(u32 program, s32 pname, s32 *params)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>GLLogFunction</name>
      <anchorfile>_shader_program_8h.html</anchorfile>
      <anchor>a946b6792efe50de240df436a3d028764</anchor>
      <arglist>)(u32 program, s32 bufsize, s32 *length, s8 *infolog)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShaderProgramBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_shader_program_builder_8cpp</filename>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_shader_program_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShaderProgramBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_shader_program_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::ShaderProgramBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Skinner.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_skinner_8cpp</filename>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_skinner_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Skinner.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_skinner_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Skinner</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SkinnerBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_skinner_builder_8cpp</filename>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_skinner_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SkinnerBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_skinner_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SkinnerBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SliderHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_slider_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::SliderHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SliderHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_slider_h_u_d_builder_8cpp</filename>
    <includes id="_slider_h_u_d_builder_8h" name="SliderHUDBuilder.h" local="yes" imported="no">SliderHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_slider_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_slider_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SliderHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_slider_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SliderHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SoundBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sound_builder_8cpp</filename>
    <includes id="_sound_builder_8h" name="SoundBuilder.h" local="yes" imported="no">SoundBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_sound_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoundBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sound_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SoundBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Sprite2D.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite2_d_8h</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <class kind="class">njli::Sprite2D</class>
    <class kind="class">njli::Sprite2D::SpriteQuad</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Sprite2DBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite2_d_builder_8cpp</filename>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_sprite2_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sprite2DBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite2_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::Sprite2DBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlas.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite_frame_atlas_8cpp</filename>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_sprite_frame_atlas_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_sprite_frame_atlas_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RECT_FORMATSTRING</name>
      <anchorfile>_sprite_frame_atlas_8cpp.html</anchorfile>
      <anchor>aba9866007466a8e334c8135d4f580acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASDF</name>
      <anchorfile>_sprite_frame_atlas_8cpp.html</anchorfile>
      <anchor>ae7a55cc81bddf380b123d2b35f9d6e06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlas.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite_frame_atlas_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Rect</class>
    <class kind="class">njli::SpriteFrameAtlas</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlasBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite_frame_atlas_builder_8cpp</filename>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_sprite_frame_atlas_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlasBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_sprite_frame_atlas_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::SpriteFrameAtlasBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>StopWatch.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_stop_watch_8cpp</filename>
    <includes id="_stop_watch_8h" name="StopWatch.h" local="yes" imported="no">StopWatch.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_stop_watch_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StopWatch.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_stop_watch_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::StopWatch</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>StopWatchBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_stop_watch_builder_8cpp</filename>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_stop_watch_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StopWatchBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_stop_watch_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::StopWatchBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TextboxHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_textbox_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::TextboxHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TextboxHUDBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_textbox_h_u_d_builder_8cpp</filename>
    <includes id="_textbox_h_u_d_builder_8h" name="TextboxHUDBuilder.h" local="yes" imported="no">TextboxHUDBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_textbox_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_textbox_h_u_d_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TextboxHUDBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_textbox_h_u_d_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::TextboxHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Thread.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_thread_8cpp</filename>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_thread_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_thread_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>call_func</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a132a484910213b3e28681c51fe0b69bb</anchor>
      <arglist>(void *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_thread_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::Thread</class>
    <class kind="struct">njli::wrap</class>
    <namespace>njli</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_THREAD_PRIORITY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_STATE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>void</name>
      <anchorfile>_thread_8h.html</anchorfile>
      <anchor>af1e856da2e658414cb2456cb6f7ebc66</anchor>
      <arglist>(JLIthreadcallback(void *))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_thread_builder_8cpp</filename>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_thread_builder_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_thread_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_thread_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::ThreadBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_timer_8cpp</filename>
    <includes id="_timer_8h" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_timer_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_timer_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Timer</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TimerBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_timer_builder_8cpp</filename>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_timer_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimerBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_timer_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::TimerBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>World.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_8cpp</filename>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_abstract_render_8h" name="AbstractRender.h" local="yes" imported="no">AbstractRender.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_world_s_q_lite_8h" name="WorldSQLite.h" local="yes" imported="no">WorldSQLite.h</includes>
    <includes id="_world_sound_8h" name="WorldSound.h" local="yes" imported="no">WorldSound.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_world_input_8h" name="WorldInput.h" local="yes" imported="no">WorldInput.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <class kind="class">njli::World</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldClock.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_clock_8cpp</filename>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_clock_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldClock.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_clock_8h</filename>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <class kind="class">njli::WorldClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldDebugDrawer.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_debug_drawer_8h</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <class kind="class">njli::WorldDebugDrawer</class>
    <class kind="struct">njli::WorldDebugDrawer::Line</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldFactory.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_factory_8cpp</filename>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_button_h_u_d_8h" name="ButtonHUD.h" local="yes" imported="no">ButtonHUD.h</includes>
    <includes id="_button_h_u_d_builder_8h" name="ButtonHUDBuilder.h" local="yes" imported="no">ButtonHUDBuilder.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_checkbox_h_u_d_8h" name="CheckboxHUD.h" local="yes" imported="no">CheckboxHUD.h</includes>
    <includes id="_checkbox_h_u_d_builder_8h" name="CheckboxHUDBuilder.h" local="yes" imported="no">CheckboxHUDBuilder.h</includes>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <includes id="_collision_response_8h" name="CollisionResponse.h" local="yes" imported="no">CollisionResponse.h</includes>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <includes id="_cube_8h" name="Cube.h" local="yes" imported="no">Cube.h</includes>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_dropdown_h_u_d_8h" name="DropdownHUD.h" local="yes" imported="no">DropdownHUD.h</includes>
    <includes id="_dropdown_h_u_d_builder_8h" name="DropdownHUDBuilder.h" local="yes" imported="no">DropdownHUDBuilder.h</includes>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <includes id="_label_h_u_d_8h" name="LabelHUD.h" local="yes" imported="no">LabelHUD.h</includes>
    <includes id="_label_h_u_d_builder_8h" name="LabelHUDBuilder.h" local="yes" imported="no">LabelHUDBuilder.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_node_state_8h" name="NodeState.h" local="yes" imported="no">NodeState.h</includes>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_physics_body_ghost_8h" name="PhysicsBodyGhost.h" local="yes" imported="no">PhysicsBodyGhost.h</includes>
    <includes id="_physics_body_ghost_builder_8h" name="PhysicsBodyGhostBuilder.h" local="yes" imported="no">PhysicsBodyGhostBuilder.h</includes>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_physics_body_soft_8h" name="PhysicsBodySoft.h" local="yes" imported="no">PhysicsBodySoft.h</includes>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_physics_close_contact_8h" name="PhysicsCloseContact.h" local="yes" imported="no">PhysicsCloseContact.h</includes>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_physics_constraint_hinge_8h" name="PhysicsConstraintHinge.h" local="yes" imported="no">PhysicsConstraintHinge.h</includes>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_physics_constraint_point_to_point_8h" name="PhysicsConstraintPointToPoint.h" local="yes" imported="no">PhysicsConstraintPointToPoint.h</includes>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_physics_constraint_slider_8h" name="PhysicsConstraintSlider.h" local="yes" imported="no">PhysicsConstraintSlider.h</includes>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_physics_constraint_cone_twist_8h" name="PhysicsConstraintConeTwist.h" local="yes" imported="no">PhysicsConstraintConeTwist.h</includes>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_physics_constraint_fixed_8h" name="PhysicsConstraintFixed.h" local="yes" imported="no">PhysicsConstraintFixed.h</includes>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_8h" name="PhysicsConstraintGeneric6DofSpring.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpring.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_physics_contact_8h" name="PhysicsContact.h" local="yes" imported="no">PhysicsContact.h</includes>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_physics_shape_sphere_8h" name="PhysicsShapeSphere.h" local="yes" imported="no">PhysicsShapeSphere.h</includes>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <includes id="_physics_shape_cylinder_8h" name="PhysicsShapeCylinder.h" local="yes" imported="no">PhysicsShapeCylinder.h</includes>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <includes id="_physics_shape_capsule_8h" name="PhysicsShapeCapsule.h" local="yes" imported="no">PhysicsShapeCapsule.h</includes>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <includes id="_physics_shape_cone_8h" name="PhysicsShapeCone.h" local="yes" imported="no">PhysicsShapeCone.h</includes>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <includes id="_physics_shape_multi_sphere_8h" name="PhysicsShapeMultiSphere.h" local="yes" imported="no">PhysicsShapeMultiSphere.h</includes>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <includes id="_physics_shape_convex_hull_8h" name="PhysicsShapeConvexHull.h" local="yes" imported="no">PhysicsShapeConvexHull.h</includes>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_8h" name="PhysicsShapeConvexTriangleMesh.h" local="yes" imported="no">PhysicsShapeConvexTriangleMesh.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_8h" name="PhysicsShapeBvhTriangleMesh.h" local="yes" imported="no">PhysicsShapeBvhTriangleMesh.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_heightfield_terrain_8h" name="PhysicsShapeHeightfieldTerrain.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrain.h</includes>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <includes id="_physics_shape_static_plane_8h" name="PhysicsShapeStaticPlane.h" local="yes" imported="no">PhysicsShapeStaticPlane.h</includes>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_plane_8h" name="Plane.h" local="yes" imported="no">Plane.h</includes>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <includes id="_slider_h_u_d_8h" name="SliderHUD.h" local="yes" imported="no">SliderHUD.h</includes>
    <includes id="_slider_h_u_d_builder_8h" name="SliderHUDBuilder.h" local="yes" imported="no">SliderHUDBuilder.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_sound_builder_8h" name="SoundBuilder.h" local="yes" imported="no">SoundBuilder.h</includes>
    <includes id="_sprite2_d_8h" name="Sprite2D.h" local="yes" imported="no">Sprite2D.h</includes>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_stop_watch_8h" name="StopWatch.h" local="yes" imported="no">StopWatch.h</includes>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <includes id="_textbox_h_u_d_8h" name="TextboxHUD.h" local="yes" imported="no">TextboxHUD.h</includes>
    <includes id="_textbox_h_u_d_builder_8h" name="TextboxHUDBuilder.h" local="yes" imported="no">TextboxHUDBuilder.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_factory_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_factory_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldFactory.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_factory_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::WorldFactory</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldHUD.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_h_u_d_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="struct">njli::JLIPaint</class>
    <class kind="struct">njli::JLIGlyphPosition</class>
    <class kind="struct">njli::JLITextRow</class>
    <class kind="class">njli::WorldHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldLuaVirtualMachine.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_lua_virtual_machine_8cpp</filename>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_abstract_render_8h" name="AbstractRender.h" local="yes" imported="no">AbstractRender.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <includes id="_abstract_transform_8h" name="AbstractTransform.h" local="yes" imported="no">AbstractTransform.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_button_h_u_d_8h" name="ButtonHUD.h" local="yes" imported="no">ButtonHUD.h</includes>
    <includes id="_button_h_u_d_builder_8h" name="ButtonHUDBuilder.h" local="yes" imported="no">ButtonHUDBuilder.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_checkbox_h_u_d_8h" name="CheckboxHUD.h" local="yes" imported="no">CheckboxHUD.h</includes>
    <includes id="_checkbox_h_u_d_builder_8h" name="CheckboxHUDBuilder.h" local="yes" imported="no">CheckboxHUDBuilder.h</includes>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <includes id="_collision_response_8h" name="CollisionResponse.h" local="yes" imported="no">CollisionResponse.h</includes>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <includes id="_cube_8h" name="Cube.h" local="yes" imported="no">Cube.h</includes>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_dropdown_h_u_d_8h" name="DropdownHUD.h" local="yes" imported="no">DropdownHUD.h</includes>
    <includes id="_dropdown_h_u_d_builder_8h" name="DropdownHUDBuilder.h" local="yes" imported="no">DropdownHUDBuilder.h</includes>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <includes id="_game_clock_8h" name="GameClock.h" local="yes" imported="no">GameClock.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <includes id="_label_h_u_d_8h" name="LabelHUD.h" local="yes" imported="no">LabelHUD.h</includes>
    <includes id="_label_h_u_d_builder_8h" name="LabelHUDBuilder.h" local="yes" imported="no">LabelHUDBuilder.h</includes>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_node_state_8h" name="NodeState.h" local="yes" imported="no">NodeState.h</includes>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_physics_body_ghost_8h" name="PhysicsBodyGhost.h" local="yes" imported="no">PhysicsBodyGhost.h</includes>
    <includes id="_physics_body_ghost_builder_8h" name="PhysicsBodyGhostBuilder.h" local="yes" imported="no">PhysicsBodyGhostBuilder.h</includes>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_physics_body_soft_8h" name="PhysicsBodySoft.h" local="yes" imported="no">PhysicsBodySoft.h</includes>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_physics_close_contact_8h" name="PhysicsCloseContact.h" local="yes" imported="no">PhysicsCloseContact.h</includes>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_physics_constraint_cone_twist_8h" name="PhysicsConstraintConeTwist.h" local="yes" imported="no">PhysicsConstraintConeTwist.h</includes>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_physics_constraint_fixed_8h" name="PhysicsConstraintFixed.h" local="yes" imported="no">PhysicsConstraintFixed.h</includes>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_8h" name="PhysicsConstraintGeneric6DofSpring.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpring.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_physics_constraint_hinge_8h" name="PhysicsConstraintHinge.h" local="yes" imported="no">PhysicsConstraintHinge.h</includes>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_physics_constraint_point_to_point_8h" name="PhysicsConstraintPointToPoint.h" local="yes" imported="no">PhysicsConstraintPointToPoint.h</includes>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_physics_constraint_slider_8h" name="PhysicsConstraintSlider.h" local="yes" imported="no">PhysicsConstraintSlider.h</includes>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_physics_contact_8h" name="PhysicsContact.h" local="yes" imported="no">PhysicsContact.h</includes>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_8h" name="PhysicsShapeBvhTriangleMesh.h" local="yes" imported="no">PhysicsShapeBvhTriangleMesh.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_capsule_8h" name="PhysicsShapeCapsule.h" local="yes" imported="no">PhysicsShapeCapsule.h</includes>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <includes id="_physics_shape_cone_8h" name="PhysicsShapeCone.h" local="yes" imported="no">PhysicsShapeCone.h</includes>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <includes id="_physics_shape_convex_hull_8h" name="PhysicsShapeConvexHull.h" local="yes" imported="no">PhysicsShapeConvexHull.h</includes>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_8h" name="PhysicsShapeConvexTriangleMesh.h" local="yes" imported="no">PhysicsShapeConvexTriangleMesh.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_cylinder_8h" name="PhysicsShapeCylinder.h" local="yes" imported="no">PhysicsShapeCylinder.h</includes>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <includes id="_physics_shape_heightfield_terrain_8h" name="PhysicsShapeHeightfieldTerrain.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrain.h</includes>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <includes id="_physics_shape_multi_sphere_8h" name="PhysicsShapeMultiSphere.h" local="yes" imported="no">PhysicsShapeMultiSphere.h</includes>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <includes id="_physics_shape_sphere_8h" name="PhysicsShapeSphere.h" local="yes" imported="no">PhysicsShapeSphere.h</includes>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <includes id="_physics_shape_static_plane_8h" name="PhysicsShapeStaticPlane.h" local="yes" imported="no">PhysicsShapeStaticPlane.h</includes>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_plane_8h" name="Plane.h" local="yes" imported="no">Plane.h</includes>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <includes id="_slider_h_u_d_8h" name="SliderHUD.h" local="yes" imported="no">SliderHUD.h</includes>
    <includes id="_slider_h_u_d_builder_8h" name="SliderHUDBuilder.h" local="yes" imported="no">SliderHUDBuilder.h</includes>
    <includes id="_sound_builder_8h" name="SoundBuilder.h" local="yes" imported="no">SoundBuilder.h</includes>
    <includes id="_sprite2_d_8h" name="Sprite2D.h" local="yes" imported="no">Sprite2D.h</includes>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_stop_watch_8h" name="StopWatch.h" local="yes" imported="no">StopWatch.h</includes>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <includes id="_textbox_h_u_d_8h" name="TextboxHUD.h" local="yes" imported="no">TextboxHUD.h</includes>
    <includes id="_textbox_h_u_d_builder_8h" name="TextboxHUDBuilder.h" local="yes" imported="no">TextboxHUDBuilder.h</includes>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_h_u_d_8h" name="WorldHUD.h" local="yes" imported="no">WorldHUD.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_world_s_q_lite_8h" name="WorldSQLite.h" local="yes" imported="no">WorldSQLite.h</includes>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
    <includes id="_device_input_time_8h" name="DeviceInputTime.h" local="yes" imported="no">DeviceInputTime.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <includes id="_localization_8h" name="Localization.h" local="yes" imported="no">Localization.h</includes>
    <includes id="_macros_8h" name="Macros.h" local="yes" imported="no">Macros.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_world_input_8h" name="WorldInput.h" local="yes" imported="no">WorldInput.h</includes>
    <includes id="_world_sound_8h" name="WorldSound.h" local="yes" imported="no">WorldSound.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_PROMPT</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>aa23cea14795d309b45458e284c03feb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_PROMPT2</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ac2d8f72be488d4fcc8483eda1f19e10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_PROGNAME</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>af34f43dfd47b8179ae1eb1a03e4abc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MAXINPUT</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a05ae1f2d6224a7ed765d937f3e29b273</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INIT_VAR</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>aa26556c39a8c231bc647902b495de4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INITVARVERSION</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a23a4ddde7b8770311b5f5cfe0e7b6b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_stdin_is_tty</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ac64250ed95450c29366bf34f4b1f0cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_readline</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>afe1d78b44717d692becd41251c1edeea</anchor>
      <arglist>(L, b, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_saveline</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ab02d1e224c8aabccb5e313584493c32b</anchor>
      <arglist>(L, line)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_freeline</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a57d068e6351de5511a9837517ed34282</anchor>
      <arglist>(L, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOFMARK</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a0972b8ff1b2e2d2abdd184890b79ad90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>marklen</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>af4095ba5ce624b3061385b49e5863c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_error</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a7aa07cb625a50d1de019e68b223629dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_i</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>abe04c677e6b350ca13b68c28a2a12f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_v</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a7136ee26052850280aaffb4e04db8f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_e</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a062f4556e993b5521901729db1abb78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_E</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a8c7799a931aadcdf663a40d5973e9457</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>has_j</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a45db4addfa05fa7804f1f9cadcd9b12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>luaTableIterFunc</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a8efbfd35f622e3a70e25c826e9514939</anchor>
      <arglist>)(lua_State *, int, const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>appendLuaPath</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>af9656bcf9e9c18994147c0b2156d92af</anchor>
      <arglist>(lua_State *L, const char *path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>storeCallbackFunction</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>aac335e8af4593444f6004c8dd5705cad</anchor>
      <arglist>(lua_State *L, int paramIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callCallbackFunction</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a54b69621ce55581186efef0c7d8155be</anchor>
      <arglist>(lua_State *L, int callback_function)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stackDump</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ac771b3d5c5feeccd9582a594d89c3e22</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printLuaTableKeyAndValues</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>aabd2a9bc68a8443498e7132366fc8ec0</anchor>
      <arglist>(lua_State *L, int index, const char *key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>iterate_and_print</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ad34ffe4c9403a3d199b20802c90ce53c</anchor>
      <arglist>(lua_State *L, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>populate_builder</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a2a83676486023d985c9cd1361e15d11e</anchor>
      <arglist>(lua_State *L, int index, njli::AbstractFactoryObject &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>printLuaTable</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a896c91629cd2d1a190a45936b1617df7</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>create</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a36640a33d07dcc94ed03bce5f71ece33</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int</type>
      <name>luaopen_JLIM</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a9aa73eb4bba2664630b3d7f3f27f8d50</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sprintf</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>a882696cfae0e8520d6772eae4dc75346</anchor>
      <arglist>(&quot;test%sFunctions&quot;, ptr-&gt;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>for</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>ac01b79477c9371128eeb01109ffa4306</anchor>
      <arglist>(int j=0;ptr-&gt;methods[j].name;j++)/</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lstop</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2cf6b77aac0764b3cd5f931aff91188e</anchor>
      <arglist>(lua_State *L, lua_Debug *ar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>laction</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a66a4ca6e08a1d754198fb074fcb74303</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print_usage</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9e55125fd1b7ceb0e47f2e74a23028e0</anchor>
      <arglist>(const char *badoption)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>l_message</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ada99d702e7655d32803965a658420825</anchor>
      <arglist>(const char *pname, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>report</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adf55db544efebce3945e6d377a3846f9</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>msghandler</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af038d6f4f95be952fea559db725a4cd5</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>docall</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a56ef3b16f431769debb9f573fbad3472</anchor>
      <arglist>(lua_State *L, int narg, int nres)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print_version</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a42bbebd7e19fd129e8965dd038df8739</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createargtable</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>abfc8caf0b773a1e5aee696e23fe8cec8</anchor>
      <arglist>(lua_State *L, char **argv, int argc, int script)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dochunk</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a010b737b6f0704ee725b795789165f1a</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dofile</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a4a5df8269893769335b43152209cd81a</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dostring</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6a78608b2c6c62b665044f25cdddd015</anchor>
      <arglist>(lua_State *L, const char *s, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dolibrary</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a35c514d99c14aa359be8b6e0a8c9b101</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_prompt</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ab84c9d4e4063a855f07f576fd0538a5d</anchor>
      <arglist>(lua_State *L, int firstline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>incomplete</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8e10896a57f674e564cd721a0853eef9</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pushline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a67ae45d8e6e14757a6cd5cfbf9e54417</anchor>
      <arglist>(lua_State *L, int firstline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>addreturn</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad8082b14213b632babd7d400bae3b5bb</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>multiline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aaa3dddf4399350a0274b73384825ea65</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>abaa044d04062bd2ac5cb7ed65eed3041</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>l_print</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac3c1a4e14d8d9314544e6bdf34af35a1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pushargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ab06d5334211e1cf7303c765f64127af2</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>handle_script</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac0bef8597194699acc07e80a9d8499bb</anchor>
      <arglist>(lua_State *L, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>collectargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a727c73a892f0f282c6a903f01a401604</anchor>
      <arglist>(char **argv, int *first)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>runargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afb1211dd5f81ba577b00a5f7546bcad5</anchor>
      <arglist>(lua_State *L, char **argv, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>handle_luainit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7899874f7ffc3b32a54f93d48bab774</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>_doREPL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a13820d7e4e510bcb288c64a5677c34cf</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pmain</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aa635589a98be774a07f196fe8cb9f5d9</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetVariableValue</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aebba3f7bb2f8420f9f63d51559bea913</anchor>
      <arglist>(lua_State *L, const int &amp;index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCallStackSize</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a0b89d95e0c07f86cf6e963fed6eb1b98</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>sublime_completions</name>
      <anchorfile>_world_lua_virtual_machine_8cpp.html</anchorfile>
      <anchor>aca1e02a9ac5f48b90ec12cf678ea9cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>isInteractive</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a821f510d84ef15e6136525000b3af59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static lua_State *</type>
      <name>globalL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a592ea58bd7221fb73783c74db6161d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>progname</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac7f24ac3abb70f5d7aee1b84c3447e77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldLuaVirtualMachine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_lua_virtual_machine_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <class kind="class">njli::WorldLuaVirtualMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldResourceLoader.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_resource_loader_8cpp</filename>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_resource_loader_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_resource_loader_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROUND</name>
      <anchorfile>_world_resource_loader_8cpp.html</anchorfile>
      <anchor>a3c44fc81368c37a5edfbf7df11022168</anchor>
      <arglist>(val, places)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldResourceLoader.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_resource_loader_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="struct">njli::FileData</class>
    <class kind="class">njli::WorldResourceLoader</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldSocket.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_socket_8cpp</filename>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_socket_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_socket_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JLI_SOCKET_BUFFER_SIZE</name>
      <anchorfile>_world_socket_8cpp.html</anchorfile>
      <anchor>a50dc0d7834a99ee1800d5a413e7ed6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ReplaceStringInPlace</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5aa06a6430e9e3583719f718c36979bc</anchor>
      <arglist>(std::string &amp;subject, const std::string &amp;search, const std::string &amp;replace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldSocket.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_socket_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <class kind="class">njli::WorldSocket</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldSQLite.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_s_q_lite_8cpp</filename>
    <includes id="_world_s_q_lite_8h" name="WorldSQLite.h" local="yes" imported="no">WorldSQLite.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>callback</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a39feb3a4addbfb8ec3306b6e57c5a9c0</anchor>
      <arglist>(void *data, int argc, char **argv, char **azColName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sqlite3 *</type>
      <name>openDatabase_Internal</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a022058dc63c36e9884f313321fe05cc2</anchor>
      <arglist>(const char *database_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>fileTableExists_Internal</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a6df8e004a1354bd4fc21f02610d00320</anchor>
      <arglist>(sqlite3 *db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createFileTable_Internal</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a8ddd8262bb142edbc1ae4b0eb53dcdf6</anchor>
      <arglist>(sqlite3 *db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createFileData_Internal</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>aafa2edf4826b8f7b97f5205e04877889</anchor>
      <arglist>(sqlite3 *db, const char *filename, const void *data, int size)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static void *</type>
      <name>s_FileData</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>a1d41359a2b92021c8d9d986702fa4a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>s_FileSize</name>
      <anchorfile>_world_s_q_lite_8cpp.html</anchorfile>
      <anchor>abd860be634e9df4a099afa5533923ad9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldSQLite.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_s_q_lite_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::WorldSQLite</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldState.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_8cpp</filename>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_world_state_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_state_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_CONTACTS</name>
      <anchorfile>_world_state_8cpp.html</anchorfile>
      <anchor>a84bfa512ba2269b77a80f391fbdde0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector3</type>
      <name>getRayTo</name>
      <anchorfile>_world_state_8cpp.html</anchorfile>
      <anchor>ab10d3780d4a6da8096bc5f9f909a9012</anchor>
      <arglist>(int x, int y, btVector3 cameraUp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldState.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <class kind="class">njli::WorldState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_builder_8cpp</filename>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_state_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldStateBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::WorldStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateMachine.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_machine_8cpp</filename>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_state_machine_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldStateMachine.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_machine_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <class kind="class">njli::WorldStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateMachineBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_machine_builder_8cpp</filename>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_world_state_machine_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_world_state_machine_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::WorldStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Xml.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_xml_8cpp</filename>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_xml_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Xml.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_xml_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Xml</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>XmlBuilder.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_xml_builder_8cpp</filename>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORMATSTRING</name>
      <anchorfile>_xml_builder_8cpp.html</anchorfile>
      <anchor>a4d0768c0d97829b5c252f9643bdc19f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XmlBuilder.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/jli_game_engine/version-1.0/src/</path>
    <filename>_xml_builder_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <class kind="class">njli::XmlBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceInputTime.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_device_input_time_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::DeviceInputTime</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceTouch.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_device_touch_8h</filename>
    <includes id="_device_input_time_8h" name="DeviceInputTime.h" local="yes" imported="no">DeviceInputTime.h</includes>
    <class kind="class">njli::DeviceTouch</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>File.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_file_8h</filename>
    <includes id="_macros_8h" name="Macros.h" local="yes" imported="no">Macros.h</includes>
    <member kind="function">
      <type>FILE *</type>
      <name>njli_fopen</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>ac58d4405bc0f5a6b606220490886bfb8</anchor>
      <arglist>(const char *fname, const char *mode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>RESOURCE_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>aeb4481fefba5b1fcb8b464abab3e34f5</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ASSET_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>ab68660eca41a4916fad216c721a81321</anchor>
      <arglist>(const char *file) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>BUNDLE_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>aeb4597d299e978ba946166bf233d838c</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DOCUMENT_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a2ada1cc4ebdd1e6cc286660ebddefc03</anchor>
      <arglist>(const char *file) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DOCUMENT_BASEPATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a77f67e0b2c49a0d324312ab9d3593489</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepThread</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>afecdbc1c9e303fc703fbd58810d7032a</anchor>
      <arglist>(float milliseconds) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupFileSystem</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a188625fbdc32cb9e1361fc3702a193a5</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Game.cpp</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_game_8cpp</filename>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_abstract_render_8h" name="AbstractRender.h" local="yes" imported="no">AbstractRender.h</includes>
    <includes id="_game_8h" name="Game.h" local="yes" imported="no">Game.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TAG</name>
      <anchorfile>_game_8cpp.html</anchorfile>
      <anchor>afc3d101f633a076cc1ca84b85b6224b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Game.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_game_8h</filename>
    <class kind="class">njli::NJLIGameEngine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JLIAssetUtil.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_j_l_i_asset_util_8h</filename>
  </compound>
  <compound kind="file">
    <name>Localization.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_localization_8h</filename>
    <member kind="function">
      <type>std::string</type>
      <name>LOCALIZED_TEXT</name>
      <anchorfile>_localization_8h.html</anchorfile>
      <anchor>af66a76dc39d2d0b7804de8fc680b7ca2</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>LOCALIZED_LANGUAGE</name>
      <anchorfile>_localization_8h.html</anchorfile>
      <anchor>a2931ce269f8db41515d8dd8747ab7589</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_log_8h</filename>
    <includes id="_macros_8h" name="Macros.h" local="yes" imported="no">Macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LOGGING_ON</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a44d8ca8ecfccda385a2802f51e3dd234</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_WRAPPER_LOGGING</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad03084521a78f069edda4960ef078e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FMOD_LOGGING_ON</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad49afa178ec4521d7021b7b0702d5db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CRASH</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>adc22d45f643dc817497df90cc02bf701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a5687826f07a383abedc6329b6a07f40b</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>af0f5b5dd163750aef913cc0858b5d3f0</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aee53a8a2621ddb7d1bbc9b0ca5a982d0</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a18b5ceb19695891ea4079d1385809bb6</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a027235ba85c1a6314d8f8a32c05f6175</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6477a35a45a62b17c166482051cc7a15</anchor>
      <arglist>(condition, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a20f686a106ec929a8c06764aecbf37cc</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a1a4e0672ab0b08c6d9b8d17c59ba4b37</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad55d2448f9da3e6491c66d9772d6501f</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ade6de648bbfe0c4046b4a0e81c9739dc</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT_LOG</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a4e6fc796c815ae0179e54ca4f59ffdb9</anchor>
      <arglist>(condition, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a215cf9ab11255457243b82024f4c1e03</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ac2edd874468b62d0c794d830c73617c5</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a65c172d2e2cb9e25ee4670e6d226fe95</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a94131c832d840abf36600bd7c935446c</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a3c23ab1e103703b3517528ad68fd06cc</anchor>
      <arglist>(condition, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_GL_ERROR_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a8c242b4461ea505703d8384a309d4000</anchor>
      <arglist>(op, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_GL_ERROR_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>afd7c1a8acb51b1311cccca3f54cedb82</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_debug_log_v</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a78efe282a34305e3723a7161fb785f06</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void</type>
      <name>_debug_log_d</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a66226250d9741ce1e2bb3da485c15ccc</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void</type>
      <name>_debug_log_w</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>acafecbb68ba49a5d0cde797c14f22812</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void void</type>
      <name>_debug_log_e</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ae657b1ed7534487c51976789e2d2c0c2</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void void void</type>
      <name>LUA_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6692fb50cae3ecaeb90797de3258a186</anchor>
      <arglist>(const char *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_debug_log_stderr</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a64ad63c6a78800487a7bf7a3036b1bd9</anchor>
      <arglist>(const char *tag, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>njliSleep</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>abb8935393618ec31c12666227a970bfa</anchor>
      <arglist>(unsigned int _ms)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Macros.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>DEPRECATED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>ac1e8a42306d8e67cb94ca31c3956ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLE_FUNCTION</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a0f68dce17328f16e8d55c5ec43f844b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>addf5ec070e9499d36b7f2009ce736076</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a36d525cf4d116b2fe4ecc00222b256f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRINTF</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a18e350d34314d6cfc3570ef1d2b545f5</anchor>
      <arglist>(formatpos, argpos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sound.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_sound_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_transform_8h" name="AbstractTransform.h" local="yes" imported="no">AbstractTransform.h</includes>
    <class kind="class">njli::Sound</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Util.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_util_8h</filename>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PI</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a598a3330b3c21701223ee0ca14316eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUFFER_SIZE</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a6b20d41d6252e9871430c242cb1a56e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>s8</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2ff401e087cf786c38a6812723e94473</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u8</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aed742c436da53c1080638ce6ef7d13de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>s16</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2e9bf6983da73775aa86158c825bf777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u16</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a9e6c91d77e24643b888dbd1a1a590054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>s32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aa62c75d314a0d1f37f79c4b73b2292e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a10e94b422ef0c20dcdec20d31a1f5049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed long long</type>
      <name>s64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a4258bfb2c3a440d06c4aaa3c2b450dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>u64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ad758b7a5c3f18ed79d2fcd23d9f16357</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a5f6906312a689f27d70e9d086649d3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a94dab5770726ccbef8c7d026cfbdf8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>IsOn</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ae88bd4b701da0facce543b4b1cf2913e</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>On</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a86d8a45efa3de86d9cbd56e47f817ae5</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>Off</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ad1051d2c3a51590b7ff6d8eebf207767</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>clampf</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a49d91d981da3589ae6425aec87b8b2ba</anchor>
      <arglist>(const f32 value, const f32 min, const f32 max)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>clamp</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2ab20be98ddc67c99178eecd4e4fce2d</anchor>
      <arglist>(const s32 value, const s32 min, const s32 max)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>clampColor</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a06c3fcc0066b352d32be5c1af8836395</anchor>
      <arglist>(const f32 color)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldInput.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_world_input_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <class kind="class">njli::WorldInput</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldSound.h</name>
    <path>/Users/jamesfolk/Dropbox/GameDevelopment/NJLIGames/NJLIGameEngine/Source/platform/core/</path>
    <filename>_world_sound_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::WorldSound</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="class">
    <name>njli::AbstractActionable</name>
    <filename>classnjli_1_1_abstract_actionable.html</filename>
    <class kind="struct">njli::AbstractActionable::ActionableAction</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>aa4773ce9842af5e721fb06b64283f0de</anchor>
      <arglist>(Action *action, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>adb3a9cb006b18f67f500f52e6a40b5a0</anchor>
      <arglist>(Action *action, const char *key, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function">
      <type>Action *</type>
      <name>getAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a56a311d63b3309d910f134238c4b9f6c</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasActions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a19d340355f22865e2e40c2b597556b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>ada32a60390e3ef8582f209a65c24bad2</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllActions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>ac8d68d9e3f34d70d05ad6e5704152e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a14bdb9bfc024571d6989763629625949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a18dc6c2833ee933c1bd7bd61100452ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>abf6aa72a4d7b646f14fe2f05c56a8813</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getAllActionNames</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a9df58912375974fd1e5da088e4d4225d</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;actionNames)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a7674886976b87af3bfa33ad030268e3e</anchor>
      <arglist>(const AbstractActionable &amp;copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractActionable &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a0f09166a53c6d1b5652ad268fcdfcb46</anchor>
      <arglist>(const AbstractActionable &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ActionableAction * &gt;</type>
      <name>m_Actions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>ab26c1fab1197b15bb2ecc21c4ac03463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; ActionableAction * &gt;</type>
      <name>m_ActionMemoryQueue</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>ae1df3f83b726e71662f560cee9b273ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractBuilder</name>
    <filename>classnjli_1_1_abstract_builder.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a0cfdd77fe097b255a5ca29c70675ed0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a5e86ed88487717e88be16728662f2964</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>aa231c6c9955ad68dabfa0ae0b385da24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a88e349a8a99b1fad0c166c0ddbc06e39</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>aa1d220053e182c37b31b427499c6eacf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>ab66b774e02ccb9da554c9aab7fa6d981</anchor>
      <arglist>(void *dataBuffer, btSerializer *serializer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a0f2d344fcf697b167f4f2b1122b5fb33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a902f73ea78031b06aca183a417f3413b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>abb4a8161cd71be12807fe85864b67050</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a3e6e553e06d1ca30517ad5fb0bd4d000</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractClock</name>
    <filename>classnjli_1_1_abstract_clock.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>adf1ecfb49abca618253d605ff43a212b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a3c605a41c8f527a61c2226b2dba6bba4</anchor>
      <arglist>(const AbstractClock &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>AbstractClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a3cdd1200a3ef9bd0a5748ab3e7c2ad7b</anchor>
      <arglist>(const AbstractClock &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a41aac7ee2287261e3b9e7fff9863f821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>ae4b83dff877b5dea51542470e7cb1568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRawTime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>ad837eada8b3deafe40d6a2e27efa048a</anchor>
      <arglist>(const s64 milliseconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s64</type>
      <name>getRawTime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a2c1f94b303a129fa925959923c579b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a06401048780f7b9522187731d3a97579</anchor>
      <arglist>(f64 milliseconds)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>time_t</type>
      <name>m_rawtime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a668e9ea61bf8c76643255af6b65f2a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractDecorator</name>
    <filename>classnjli_1_1_abstract_decorator.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a087eb5f8d9f51cc476f12f1d10a3cb95</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a615f28a723c233e6c8e0154f26c9211c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aeebcf1e20165c7d17da774f57eb2a989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ad7e4cf09f67ea308123abaf1ff109d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a51cc3fb78f2b04d19f5b21cf1e43e79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a72cd0e1e56e66d2a1bb616280e3a76bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a8754d94fd0ad677a28a47773bcd6bb7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a0ae8cbf30cb6d32ea932159ec0de2576</anchor>
      <arglist>(AbstractDecorator *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a5ef875734a96eca9b3c7aa3be482ff29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeFromParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a04b797ac24b5de658d1e6dc165167d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>findChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a404aacf155dd325617fa271edb3d76cf</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>findChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ad9a84c8c505c1e16633c9cc5a4ff85be</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>getChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a490c8ca3c8055dbf7eddac231a3ab35d</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>getChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a9b933891adc24e07496837c27a45e0bc</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a6cfd65297f5fa8a39a5507bcaf609252</anchor>
      <arglist>(std::vector&lt; AbstractDecorator * &gt; &amp;children) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>getChildIndex</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a36ac221195b725e91bf2078ef706e59c</anchor>
      <arglist>(AbstractDecorator *object) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>getChildIndex</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aa1c6e03576355963a3ea5b87463c1bd5</anchor>
      <arglist>(const AbstractDecorator *object) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a9bd85cebb830dff23892f02baab1b583</anchor>
      <arglist>(AbstractDecorator *object) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a954a31a53d097a3d6e111c7c5262d792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a6b94b03ed7bcf783795e02a628d46bca</anchor>
      <arglist>(AbstractDecorator *object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a907a417691a2e3bfef5fd7d0f0eb0417</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a3de9eaa0ff8afc7ccd4378efdaadc191</anchor>
      <arglist>(AbstractDecorator *object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>accd814c7ee5dd1b5e00a3e44e79bff27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s64</type>
      <name>numberOfChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a1a8c380d937337233418c1954ba7d797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>afd5844a76f88ee1271f228c6dab2dc6d</anchor>
      <arglist>(AbstractDecorator *oldChild, AbstractDecorator *newChild)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ab65a6cdff82f7ef431cd411c57e3773d</anchor>
      <arglist>(const AbstractDecorator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractDecorator &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a5d151ef3bd5e6d015fc2c99a35fcb188</anchor>
      <arglist>(const AbstractDecorator &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractDecorator * &gt;</type>
      <name>m_Children</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a75043f7e8dfcfe3621a9cf2b89f46e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractDecorator *</type>
      <name>m_pParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a2c8fc57dd9d1a874a23ae51277a8968d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aa985f5baca6581f7cfa49d20e444b40c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractFactoryObject</name>
    <filename>classnjli_1_1_abstract_factory_object.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ad8a2eaf0b14375ad9739a8968429739e</anchor>
      <arglist>(const void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>afdff01ff050ea5519cb882f226d3b12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af4151e41b80d5bc3fc42822c67fc2278</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a207c86146d40d0794708ae7f2d4e60a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a838f4fa7e65cace6098aab5222892942</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a2f69a21b1f548d10ca5e5310d4a84570</anchor>
      <arglist>(const AbstractBuilder &amp;builder) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ad9750ee376e973e4e45ef5b8d566efc4</anchor>
      <arglist>(bool shared=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a8776a16a4f861e556bd9395c8a93ba71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4763d05bc9dc37c559111f8bb30e1dd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>aad2fbe86fb3bdecf02918a96b9c57976</anchor>
      <arglist>(void *dataBuffer, btSerializer *serializer) const =0</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getPointer</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a40f34f74548bc892b500dfceb828c864</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>getPointerValue</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>acc031cc8dee1b86531dc7c327f74b30b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a84f85e5d5039be7d66305b5d57537b43</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>aff65c5ff0060e64463acb78e2c3ee0fa</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a423675a076695410ba91c672ab8c2708</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a2c06da8ccb23065ed2527a9fd5321307</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a680d6b05e920e407856e81a77201e445</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a0c32e12af66d89087d475e449766d485</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serializeObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af4234af26cc358d628c45899be311ffc</anchor>
      <arglist>(class btSerializer *serializer) const </arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>m_pointer</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a8eea2673c37f55c871de8a808a1a0b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>m_pointerVal</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af1a3dd67b0ce2fc70cff9ca111263829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a479f2ca6ff107902aad2458c326726e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a798a7b4650cbdf87d7839f4ab5b70b78</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a31be74226dae8b0e6fd8a0859b1bc527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a87597409cecc91b4d40be5e9b3a2d4dc</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4f7ae7bf09c7c9426e7d6023f7fd8dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a171f8eecedafbe703fd27d2cf9e51f9f</anchor>
      <arglist>(const AbstractFactoryObject &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractFactoryObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ae2c1cfc2cf1b38931ac450e2598a6bb9</anchor>
      <arglist>(const AbstractFactoryObject &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_canDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4977cfd3030c6610ea54ec279b253f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a7b32ea157388606e926495880208db97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractFrameBufferObject</name>
    <filename>classnjli_1_1_abstract_frame_buffer_object.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ac8d66ca8d605b2c45873fc4020c579ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a52386b04787e7e8b9ca5eab11ef744b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a25ec8745d2c47f961fde39c6dc4e83aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a5d7b8b3bc421084f282343e506a6d289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a73ffd499fceaacd59b518a541ed2133e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a85e419449efe44466d81f9502fca2c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a9fa4ab667a74a7a23b18ae3418e56f7d</anchor>
      <arglist>(u32 width=2048, u32 height=2048)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ababe9973dc3593e158adf12033f66b71</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getTextureID</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a6a954c3ede9278ae901b68bbeccc86a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a66d234282238e25ef245d64d087be8d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa4ab66fbdcb04f1834d1dc05b4c7a10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a95ae9779550ed7496011f859ec3d4766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>f32</type>
      <name>getAspectRatio</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aded6f9fc4da10af752cf90a97aaa751d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa75a537f5745e4be8f749892d195b43c</anchor>
      <arglist>(Camera *camera)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ac2533319b6631e307c44d0b68f46d9ea</anchor>
      <arglist>(const AbstractFrameBufferObject &amp;copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractFrameBufferObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a2b192e82cda52d9dc2b4983581f6ee2c</anchor>
      <arglist>(const AbstractFrameBufferObject &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>renderInternal</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae5861927463cc57cdd8214a4b957a68d</anchor>
      <arglist>(u32 fbo, Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a513f1d176292bb518491b174a57b74b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a180636e09d0ea991b25b2e45ec06c1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_height</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a192aef9e52e79eb705258273089a7721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_width</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa1664d2cb683746ddd76be458554c7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_counter</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae58bffbd830c6b4f8c85d233a6ba4355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_frameBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aed8941fa16af18e00f890ed6eadf67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_frameBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a69aab8142ecbbb43a3d4e43f3a8cfc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_stencilBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a16e27e78936b43b521f4a295b3bb26a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_stencilBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a5af08a294c714db024533f9f0fc0c521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_depthBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>af0e82f91894a611751c1a42bf0d5e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_depthBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a58936e11cbd20f21422558447158cab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isHidden</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a6046080b62350f10fc21c2ff4f9c5227</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>af390e9477ed759618405db2d94aa4b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractObject</name>
    <filename>classnjli_1_1_abstract_object.html</filename>
    <base>njli::AbstractDecorator</base>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>afdabb48c4bf763e297ffe810b433a863</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>a08dcf202a47f0782813b8bc98c659e78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>afc07f4138bd3003910e7aa7fa0fe11ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractObject</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>aadfc508440196d05461ebf48fd3d3625</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractState</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <templarg>OBJECT_TYPE</templarg>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a8a512c0712fa7ba603b28e2696e035e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(OBJECT_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(OBJECT_TYPE *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(OBJECT_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(OBJECT_TYPE *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; Node &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a8a512c0712fa7ba603b28e2696e035e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(Node *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(Node *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; OWNER_TYPE &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a8a512c0712fa7ba603b28e2696e035e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(OWNER_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(OWNER_TYPE *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(OWNER_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(OWNER_TYPE *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; Scene &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a8a512c0712fa7ba603b28e2696e035e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(Scene *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(Scene *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(Scene *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(Scene *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; void &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a8a512c0712fa7ba603b28e2696e035e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(void *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(void *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(void *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(void *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractStateMachine</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <templarg>OWNER_TYPE</templarg>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; OWNER_TYPE &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>adaf30a9f641a51097fcbfcf778b49cee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; OWNER_TYPE &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5c56c503270e18051259b296dededc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5da3edbca0c33276af935985a8ec5bd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ad3ef9ec7421e733f445a56570914298d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; OWNER_TYPE &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; OWNER_TYPE &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; OWNER_TYPE &gt; * &gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a818a97119dc08a5239497e323067c483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; Node &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Node &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>adaf30a9f641a51097fcbfcf778b49cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Node &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5c56c503270e18051259b296dededc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5da3edbca0c33276af935985a8ec5bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ad3ef9ec7421e733f445a56570914298d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Node &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Node &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; Node &gt; * &gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a818a97119dc08a5239497e323067c483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; Scene &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Scene &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>adaf30a9f641a51097fcbfcf778b49cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Scene &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5c56c503270e18051259b296dededc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5da3edbca0c33276af935985a8ec5bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ad3ef9ec7421e733f445a56570914298d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Scene &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Scene &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; Scene &gt; * &gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a818a97119dc08a5239497e323067c483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; void &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; void &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>adaf30a9f641a51097fcbfcf778b49cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; void &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5c56c503270e18051259b296dededc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5da3edbca0c33276af935985a8ec5bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ad3ef9ec7421e733f445a56570914298d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; void &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; void &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; void &gt; * &gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a818a97119dc08a5239497e323067c483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractTransform</name>
    <filename>classnjli_1_1_abstract_transform.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ae81766ce7baa95743ad256dfab13a086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8ea40aa6d85fc58ddec0962568921ddc</anchor>
      <arglist>(const AbstractTransform &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>af9f17c8a7ac8a2aafaf7742c50fb5bb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractTransform &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ae9d36f8d695542afbe19b9cf20426e3f</anchor>
      <arglist>(const AbstractTransform &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a55d3af659fe71a8b6be70875a2557a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a2c2a2edb25e1d978ffe2d3979a2012b1</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btVector3 &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>af834762b8dda517f47b5e9135160fa3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a84e65d2fc93ada77417e577ff0b1bd30</anchor>
      <arglist>(const btVector3 &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>abcdb1fff95e351b8a10fadc19f7e79c8</anchor>
      <arglist>(const btVector2 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion</type>
      <name>getRotation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a35cbde52ea7f047bf4738dbf90ab6967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRotation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a6a21cef934dc0d075fe1f70cceafe4cb</anchor>
      <arglist>(const btQuaternion &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getEulerAngles</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a1cbc7b5d3fcccb60be0c15739b044178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEulerAngles</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>abd9b461c56bf979fd3853d482636eede</anchor>
      <arglist>(const btVector3 &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a9443e0ab496e5e8fa6614fab2b67e1b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8668e1e13020412115e65b7e50176262</anchor>
      <arglist>(const btQuaternion &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab294f0ef2bd997d2c01dfbef717a6b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>afcb4d785570c651f7765519eebff88f7</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>aa478d3e18df29ba52a0ca5b9369e2d80</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getPivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>aff55af8cb19e941e1fe58c3e3acd2695</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ac58afc1596f3c95b941c03a0ca2a7d75</anchor>
      <arglist>(const btTransform &amp;pivot)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a25e1a5d3daf3c0c5839915f33e37e51a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_WorldTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a90ca5d67abcb0a5ea1e3c3554c9f8e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btQuaternion *</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab86688491ad0a42d93ebf4242a12c17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Pivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a6c1eda10f9fa9bd340e3b1a560f3954a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Action</name>
    <filename>classnjli_1_1_action.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::Action::Sequence</class>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6b97581cbad92f763e70e0f1885c3d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>af022a0ebc94b705f79a33335e45986ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a67caf3959a60cdd6d158de8e6e1866bc</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aeeef130098bbc78ab02ec3521aee651c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad45504d83d6280bbca92fa2c901a3d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a554b5fd8c31aa5245762c2f711fc1c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeat</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ac660ece5790dced62b28f6ec0199c1d7</anchor>
      <arglist>(u32 count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatForever</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a63707be93052a5843662ca386ff39fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3aeafe981e3b127eb9ad728e88e31315</anchor>
      <arglist>(f32 factor)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a708f1f3cccdaa8787bdff763ea975136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a036937b57eea213ffeb977e3c22e51f6</anchor>
      <arglist>(f32 duration)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDuration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a7afcf7a1bbd2fa99f34df6ea6d2256e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a134104e9db058f54d9724eea552a16fd</anchor>
      <arglist>(njliActionTimingMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliActionTimingMode</type>
      <name>getTimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a0c8ade1333d8b2cfd0253fc37db8a625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeLeft</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a385f42283dedb3e429511712cc7e8709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepeatingForever</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a4b4147d531aeb36d3ad12b88637e7824</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getRepeatCount</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a0dc1f06fa716d6618044e2f66b75c32d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a841c23378617e1a364f4a7640c656aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a54e88178b04ccde34a20278578b3dda0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a2e19fe3d1b62099a712f08e0b14ac90c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a86383bf6b2a8619ccf9a6c1fe1ddf5b9</anchor>
      <arglist>(Action **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aa27495555063398e9bb7c765b8092480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acef1a76a425d0fdb9bef89e7c91461cf</anchor>
      <arglist>(const ActionBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>affa42ac0f1ec9481600b4cb8a4918904</anchor>
      <arglist>(const Action &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8c748b40788d945d8ffcfe27e75ccbca</anchor>
      <arglist>(const Action &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad3c6ccc81242c10ce6aabf0fbecd62dd</anchor>
      <arglist>(Action *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a00b6ecc4285140c2350464f433a96391</anchor>
      <arglist>(Action &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a41fbbd81970c160b66d59ae010dabd66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>createGroup</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6e680e0e9057fc21e8075521edade90a</anchor>
      <arglist>(Action **actions, u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>createSequence</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a257c6deabd72ce9b30b06de20101d412</anchor>
      <arglist>(Action **actions, u32 size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8eea8ac4abc1e39cf11326854633736b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a06624fdbd7e7d8d6b814b17106520c3c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>afc2efdef9092be597613173a32ffd6f9</anchor>
      <arglist>(const Action &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aae77f01a52bfe9c883ee2a59ee3e2b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Action &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a9c8b7640c2e299cbab62662d5a2d5751</anchor>
      <arglist>(const Action &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae51ccbbeac585e56d1e60d4db1cfa418</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae46e730b8da720cb15106910951f6244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinishedRepeating</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8347eab971c8184abba3c9222abcddae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChildrenFinished</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad531386687c1b919889627774315b3d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleActionChildren</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ab787c5769b5be7861a921ee20aa6c9b7</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decrementRepeatCounter</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a39b7125ce9d6462992899cd9b1d16182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Sequence * &gt;</type>
      <name>m_ActionGroups</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a2873cb857d3cce8da14e57c72135cc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_SpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a650426751b72971d7d92cf0edf3fc364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Duration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a0e9ef8b9fb180016c4f4abec67ad8dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliActionTimingMode</type>
      <name>m_TimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3ae742326e7c2cfdd86b816816256f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timeLeft</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ab82c9d7ba3c11ef73b38f04a136cb87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_RepeatCount</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a7407ab22c618d86062eb6455c8f071cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acae59ef0f73ad6fe5d30782b3054c2a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::AbstractActionable::ActionableAction</name>
    <filename>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</filename>
    <member kind="function">
      <type></type>
      <name>ActionableAction</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>ab9c1588b35748040376c7fd9af9b517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>callCompletion</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>acfd8e38d1a51229d6da90dccd2f96ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Action *</type>
      <name>action</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>ab851715245b788c049ee57f5cb100e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>a6d5c613f063f9de4c8d998feb1ac9434</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ActionBuilder</name>
    <filename>classnjli_1_1_action_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a410b750e7ae37ac7133400541cc22591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>aff50c62343455767fa7411c1aaf5cb4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ActionBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a359441fcdd9e8a70b88503933dc286ab</anchor>
      <arglist>(const ActionBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a00afd17e5b81ea439d2d16c58959ddc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a770ce9cc5acda779b4e7cac097789fd5</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a393e58849f810ba9da576ca3cf98b90e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a8c836c6e7fd6f74f5244210e78cc7c1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a8a08d9c68fc60ff67db9f9e1134b9b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>ae2da40ebf795f9a9d2b3687c682a42fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>aa5b6c0e5cc1d083f56e0d76d455a5333</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>aacfcdb47e20c41801bf1ad9ddc3dc7db</anchor>
      <arglist>(ActionBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a245affef6050db4a22284caba38fc092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a6aec9e2d39993a78beafa386f5498822</anchor>
      <arglist>(const ActionBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a0daf2fb6eb95f633331ef97c9499a882</anchor>
      <arglist>(ActionBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a0bc5289228f4b0c978caa2e00f67b009</anchor>
      <arglist>(ActionBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a3e5d602400e33df51b2b5e4a4cf1f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a4722e62e278de2668faf92c26fe7f71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>abc0b4b0332ee13e9e1a8f7121196ef10</anchor>
      <arglist>(const ActionBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ButtonHUD</name>
    <filename>classnjli_1_1_button_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a786d5ed2213e0d54c5a5ad4e8595c183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab4e4d62af2b4de5ad95218ecd5870d69</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a0b2958c38a9ddf74333b32185f2fe947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>abfc88697bf3691fb813281f9ede83273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a6b438352b99b5261bb6ea6803cc84ea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab43182f8de5edb34d84d0284acb0e909</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3b92a6bd18407b356492489408317fbf</anchor>
      <arglist>(const char *face)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3a5f2b5ddaab37fc50633902f8365927</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a94ef2e932df76cb8b390420dce0ecfe2</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8346d046cb538f1c0269f1ce10354024</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a845ff0e5328fe156aff8d20e90b04602</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aaf91ad4aac85500c011a9b0bd658dc7f</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a478e096b1d257953d612fabd1e2eaf62</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8fededdc4f97b54d54568a6acfd43e4e</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab2cca8ad90957d9d2baf24ce1d844d5e</anchor>
      <arglist>(const btVector4 &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a6b842db44f87687d59ba28d1a090da61</anchor>
      <arglist>(const btVector4 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a38b826893d35569f5f4bad03282523da</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a256f464d6b5893f9cfa3eceb15f46220</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3557a4d39fdb04fae8fec0e24c7b022b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ae541bc89ec45370b2a4c403276b3ab60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>adb029cdaa590e73ca8867aa834967e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad9948945216258762bd53976d588b48c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a642015e2f45cedb7c6bf5fe3c1383b06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getBorderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad7e20cad40df1a03a035e7f7778fa491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getTextColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a7e37fef83612465b4b562fb79a4c52a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getTextShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3996c0a5dd94f9cee6157c4a1406f3f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getGradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab0b19fd79aa3c6d4f86cae63afc498dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getGradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a680cb8edc623871d9ebc79ff35abbd35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a999657f8b0b10f644bc012ed48ae2257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a4ca0cff19bcebb4087b2914a4f7a6c18</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>abd99d6a387e3df0225792f9fb5f69517</anchor>
      <arglist>(ButtonHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a17ab10df2d1b3d62c6961ff9680f2104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a9428e16d981275c03f7078d8bd83af8a</anchor>
      <arglist>(const ButtonHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8f3dd51d5aa08844b19cff396bbb6e80</anchor>
      <arglist>(const ButtonHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a5813247bc2dba7b727fe5da24f800bb4</anchor>
      <arglist>(const ButtonHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2cf8aa64829b2afe1f6e932e0d4443e2</anchor>
      <arglist>(ButtonHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a10383e7d0908501d1f871d8e1b272230</anchor>
      <arglist>(ButtonHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>afeb1e02f5ff381bee6e7a1915af5e996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a506d6b5e9296d605dbb84a8a1f8866ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2bb41974899ae34203aaca05acb3fefb</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac20c00ea9c089549275ac33f528ff5a4</anchor>
      <arglist>(const ButtonHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad157ec80fdc2bd473d02fa4adcf74bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ae3bf418da2ecaa9f2c15a96ea18b9d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ButtonHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a449ff116c6c42c5c5ff992f155061cc9</anchor>
      <arglist>(const ButtonHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>af161e89ed35405055acde0f8b42cfe8a</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ae8dc759bddad5462c7a0928f109977e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a4301c64a091ff9abf32f6a6add14593c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aa17394aa8dfdb299d76ac1effd5bbbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a9b6b903e46fb1369f15560b2bb710336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac09c838f0985be02e905d1476d698e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a6a83ddc2b584f7e83191dbfb9024df1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a1162e0793f09db4e3e5d62d93b967598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_borderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>abbaaf649b3c55c5644cd59827caa00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_textColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac2561e2838776df33d2c0eff6aa3e145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_textShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2acbd93bdfa31be57d9a00fdd411e735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad252ad621b7f1f8903773f3167da7cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>af633bca7b8c4643687c2db6efee9c0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac098deb37ba7aff504d4d65c5c243fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ButtonHUDBuilder</name>
    <filename>classnjli_1_1_button_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>af246362e779e52613957eda5deb65bf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>af430a184a1cae8ac0dee69924689b4a1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>aef67e0f544c6c1615e6b59e9ae526a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a101b78818a43bf37e618ffb5d53e09c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>abb854c79389ced64d981193c45d55627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>adeaff5c04de77fbabf72f5769da60224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a6957291ec1c36430f103051f7d2fda07</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a91ad76b10c39fa4cbfc7c36df6466dd0</anchor>
      <arglist>(ButtonHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a2b6f64dd4a66c41d0751c8fd0aeb5158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a44ad606a8258587f5fa779c93c185e96</anchor>
      <arglist>(const ButtonHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>ad3b9f6465aa4be040addee2014d910ea</anchor>
      <arglist>(ButtonHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a933a13c17853a70d6ed610da1e6d8502</anchor>
      <arglist>(ButtonHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a685de0a35df03f2ecc2458aa3cc935e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a72f4ab170068007b3ed3d22a785569f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a3a49993012dbd9456d13ef822eccc269</anchor>
      <arglist>(const ButtonHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a4e72108d0ff2c0e5503ae0c25009251f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a9c8322e35fa86b7ea559bc88ae3f78e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ButtonHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>ae0da883bf966588af25862e85cf76f8f</anchor>
      <arglist>(const ButtonHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Camera</name>
    <filename>classnjli_1_1_camera.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a797f44ec1c40d785e9aac03022f5d47c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5d966c55a274d041a4a60ca75d144842</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a98ee63625f2f357a131934e7d71140ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a8831b8b9c3c097394f1cffc2913b55be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a83dbb91dfe5745ad209918e803569ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aecd11caf4880997cdaecef6c47d69c48</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getZNear</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aa7710ca6017223ef747d168b05819a2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a078a786623bfed82e5c42af635ff7c50</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getZFar</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a11ace403a0f59a4e45b4b7b021de6d59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a249c6432aa9c8809a92012a272ec6d28</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a1a40d5c51ae0c04a71f96b12ee6757c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableOrthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0421efa372890d9e3a934911a4aeebf1</anchor>
      <arglist>(const bool enable=true, const f32 near=1000.0f, const f32 far=-1000.0f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ac1b0bbc02a307ee40b231ea0b2e21286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ab5aa8d0d534c0745146ed0d84f72fa18</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>njliBitCategories</type>
      <name>getRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a916b20e26fda2daa4e4878cc16e0859b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>afd4e08b967df5e00190f47ac6579adc6</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a122317f4e5f4fef2331c3bdbb094080d</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7870e48c1f18f0386a2dc7961a94b02e</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>unProject</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ae8575adfa033548c499b300b8635409a</anchor>
      <arglist>(const btVector2 &amp;windowPosition) const </arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>project</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a1f20db49fb97ac85f32fcd88e91569f5</anchor>
      <arglist>(const btVector3 &amp;objectPosition) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTouchRay</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>acebff379eca9f4d2d4427473a0f0c9fa</anchor>
      <arglist>(const btVector2 &amp;windowPosition, btVector3 &amp;from, btVector3 &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getForwardVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a4ddf4113a0856877fcdfbd16a56c9ad5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getUpVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ac3bfd6a110124b6103423de352d729da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getSideVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>acb6c13ca8fd8de0bd66e79262de9e2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a452756c63a51e1f2499d0581a2405327</anchor>
      <arglist>(const btVector3 &amp;pos, const btVector3 &amp;up=btVector3(0, 1.0f, 0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a4f9b25920947c5431686b660b56c81bb</anchor>
      <arglist>(const btVector2 &amp;screenPosition, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a22a0544c2a70354e68d3d00c5fad2d06</anchor>
      <arglist>(const btVector2 &amp;screenPosition, btAlignedObjectArray&lt; PhysicsRayContact * &gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a40e0bd1df15a53e2278f6b856298a224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ae492da69f9f3e3a403798f02975ce284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a1945f0843dd2d0050b17c7b58b0515e8</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aa328de0356a58f32291f722bb4536bba</anchor>
      <arglist>(Camera **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af159afe66f189f378d5ade9e09163d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a84b42c1ede5b42f4c54efeb0a8ee2d24</anchor>
      <arglist>(const CameraBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5db9a750b9a65d400c7738786beba0cb</anchor>
      <arglist>(const Camera &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ace71223d6bb162cbdf3d42891d1c6d0c</anchor>
      <arglist>(const Camera &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af8442fe00330b2f6df5b731b15f1bc19</anchor>
      <arglist>(Camera *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a00b2830532ea38244178bae6c15870ad</anchor>
      <arglist>(Camera &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6179ed17de968bb1da17d307cc77672d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6b242e7ea1b008c3073fea985ac01bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a82db3cd7c219d8f76d06278f410a8c1d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a865e8f65462a466b6e2e8c8c98e2d34b</anchor>
      <arglist>(const Camera &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a83f596c774d17aefbe44d3506d42da5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a557fb5ac847a6ce53dda04c42a294dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Camera &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a3c7d3d8e855949637ffdec8fb16c8046</anchor>
      <arglist>(const Camera &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cull</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a9919eed4f61256bb04551ac64d6aadcf</anchor>
      <arglist>(btDbvtBroadphase *pbp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const btTransform &amp;</type>
      <name>getProjection</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5156491ab0e052e8480dbe61536dc080</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const f32 *</type>
      <name>getProjectionMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7eecc6fef858393d3f4fe90565e03fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const f32 *</type>
      <name>getModelViewMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>adb4eab206f9f7b5d60bbf15eabc3b02a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getViewBounds</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a99666c1b08c246db791a6424a90e0e95</anchor>
      <arglist>(f32 &amp;left, f32 &amp;right, f32 &amp;bottom, f32 &amp;top, f32 &amp;farLeft, f32 &amp;farRight, f32 &amp;farBottom, f32 &amp;farTop) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getTopLeftVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5bc41e60801df99e6c88e392a9349646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getTopRightVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a668e811dd261da460f127d1db6656f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getBottomLeftVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5ee176a0385150ca050949b6c9102dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getBottomRightVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a682a617eb1240589fe902d60cd9847dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a4ce0a661f8a18d87af3453d8159793ed</anchor>
      <arglist>(const btDbvtNode *root1, const btDbvtNode *root2, const btVector3 &amp;sortaxis, const btVector3 *eye=NULL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Near</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a648b79887b9acf3fb12dd7006a68cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Far</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a34d45ec43ca2eec498138e80685d8ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Fov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aab4d792e3aeaf5cf1072d0a75d4d4f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_Orthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a140d99f05bf37657affe3006d7c2f00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_RenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7fb57199725228cab2ac28462cfb7967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OcclusionBuffer *</type>
      <name>m_OcclusionBuffer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6cd9448c2d481d6b5550bad78201be2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SceneRenderer *</type>
      <name>m_SceneRenderer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aa5b56fb8e1f66bcc1e97cc06708d438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_projectionMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a8b02bb72aff457b5d68970d266348131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ProjectionMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a513f74848a02e22d38fa2f4b83306363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ModelViewMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ac14bac7824b812adeb752894023376fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32 *</type>
      <name>m_ViewPort</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0ac4d128631b54a0a5ab1d023c565b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btScalar *</type>
      <name>m_ModelMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0cf1d4419f8b9414ba59ce9229ca1037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btScalar *</type>
      <name>m_ProjectionMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7d25685257aaa004c1aa1aed8376fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>OcclusionBuffer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af60c965608a88762c5d3b48490472319</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aae6efa51fde36cf2c0759009ba7b19c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CameraBuilder</name>
    <filename>classnjli_1_1_camera_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>aba605e83cc6c339c6284b0354584b936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>adf134bd99fbaee4b234ddc3cf5aca850</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a12f6e26a0db0cb09f401c166a4aeffd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>ad124a1d1f8951727bacbf35a39f00089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a421905a3e6e10d533c453e7efe785ceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a58244983c0efd369687df0b6047cdb0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a50bc37b743bf088e40717f190efa459b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>aff9bed9d9973af29a057c455d867565a</anchor>
      <arglist>(CameraBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a2b750dd5c15d602a88710603814b9d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a59f2945a02e010202c4954a3b07321d7</anchor>
      <arglist>(const CameraBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a4818785295cb52b1a41f56a5204a333a</anchor>
      <arglist>(CameraBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a15e258974cdcfc6a631a18f05ec20e47</anchor>
      <arglist>(CameraBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a96aa92986150808f08e5238901d01b92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a76bd656e796c9b14fd60ab4762e46840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>af3533bf68a37790640ac81af6643fa28</anchor>
      <arglist>(const CameraBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>af53e66a943c8f03efca83d55539e1335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a42a5908a3c615449f221b15e37e100ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CameraBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a3081d2a259e243ab34492408583f5471</anchor>
      <arglist>(const CameraBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CheckboxHUD</name>
    <filename>classnjli_1_1_checkbox_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3d9608fee3e29cb75255d4c8a52f6402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2f4a7c62936fb7e91274081cb04c1d11</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a9ad7d50062d24943d128c0a94ad4e86e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab4c0e987d977bc8560a9af11a0e68f59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1c0ba6c7d5f12c0684a59f7576c3e0ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1f5298769d6467f4333a6fa208131ccd</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aaa1068b0211ba419f36dfb3b10e726b3</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4063a85d6fb9bc70311171465efa7025</anchor>
      <arglist>(f32 fontSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae4b99948d4cc44e2ddd6f1b8b2e6cbf0</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a34ff2d255d4c683052a099f8207988ba</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a186750a8e24a00f9473bb14c47248810</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontAlign</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad910eaefd683c7809d908aa43aba1770</anchor>
      <arglist>(njliHUDAlign align)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae3f929ce57043944b8193b5e82396fd5</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxFeather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a185341fbfa8e4a4f6c011f6b6a90216f</anchor>
      <arglist>(f32 feather)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxGradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac96f62891f59b1f56285b1aeb8dcefb0</anchor>
      <arglist>(const btVector4 &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxGradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2731b7eaefa483f90e8fe96ec4951fae</anchor>
      <arglist>(const btVector4 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a57260414f1a25ced9c1da85f67641c24</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSizeIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4b88a46f30ab4675d3f9d2e14ca59a6f</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFaceIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a9f5a683fa1eadb2844f1d7735e01f389</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontColorIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab23a6ab181e6698b8653c0c8f45a5b78</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab1fe6f159b1937786b4c070c682220f9</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>abc3c9bdb220e6f12ae6f604282df350e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a39b4d8b338311780efcba1e3bb40a4ad</anchor>
      <arglist>(const btVector2 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a7abe03703e44a6ca75911701fdfb6e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>abcb50a74e3ede0d25b64ccea5375c9f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFontColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2d74cfbdfa01b6eeda63c2ef389ade35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>abc9efbd27a9d8e49b8c132e8b514e0c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>njliHUDAlign</type>
      <name>getFontAlign</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa77626cb568dfb747237f83d72d064c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCheckboxRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab6dd29f576851759e287cd59d48fbd3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCheckboxFeather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad017164469dffafec422d009c4009603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getCheckboxGradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1025ff961e313a9b297d5f439fd82f3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getCheckboxGradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab3028cbd3a0a2ffba9c0760b0435bce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getCheckboxDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa9f2a6a721d87fa6c25fe992deb994e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSizeIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad4f28446a0c7b8aa868cbad40fbf6dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFaceIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a8e37efd669ed288c04230cacf87045df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFontColorIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa7d1790f3d62e9897f7cf6413bff30a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTextIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a38a066fe72f94f0bcab5d93cadba8308</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad543bafb52bd55a7143af7a9312d663a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unCheck</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a6e4733ecf2b4e5e44cd8206af9bdc671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChecked</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ade4afc4e3a0b8feb1574afb1d8c05451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a22d51a25e265add58686c00c030cadc8</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1ca38e5db835fc353407f8c5bfae4039</anchor>
      <arglist>(CheckboxHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a73657218e0fe45f9f0fe4d6877f12fbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab2fa7becc1b4e1110a57d6d04f9e55eb</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad900735c5021aa4557d049e3c4ff7f91</anchor>
      <arglist>(const CheckboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>afc718237c1b7e03f45567a56f267da39</anchor>
      <arglist>(const CheckboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a7852f303352b39bc1c82195e336d3f4d</anchor>
      <arglist>(CheckboxHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a0a834ee3236f5dae14f7ab32c69708eb</anchor>
      <arglist>(CheckboxHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a84526a179ce84ac76f694927cddff8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aec11f8636407a40541f56c650ac8ce3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a85dcc4809caadfeb82fbfc48e9fbc33e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3eb6d43b7a6bc7f47f0d6619bb226d11</anchor>
      <arglist>(const CheckboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>adbd098f0f7b90603014c8c45df1fab91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a455334383e0cadeeaa1c09752064ec67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CheckboxHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a440d2c1e0ca2850ffc333ae8f4df24ba</anchor>
      <arglist>(const CheckboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac373a05200f80a5a5c927f8ab7199d6f</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>af97939ec2d8f7137dd7206aaef82ebeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a15d15c4ef020a1d109c1257b535ef6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a0e1d4b8f2b740d9d6189da68959b34d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae30d4899d8b3bb39b583005d30e94d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>acaa459636c3131b4991b2a7d74d4b6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a57ec6ee10cf894de31c8f5d3c1987cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4a42a1e6ec369fe33ea9a7d6b546048a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_feather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a06f4f2ae5cbff9350537724e8b2f5f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1f692a5cf90de60c6a1d3747b1f3710d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3f4833ec007b2ee45c150e5b851dc1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_iconFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac904923a373f4c67ab94dbf407459245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_iconFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae3f331029c085859eb0e47c66d16ae56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_iconFillColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab725b03ce1e63bef6675bea2f5cef7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_iconText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aafd86237ddcbc55e4797d478b906bc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a5746b7e4e3127374c6761d077e061661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_checkboxDimension</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2b013bfab34f523e31de0eae6c113d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isChecked</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a412e277cbdbd39ce605d81342ef11f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CheckboxHUDBuilder</name>
    <filename>classnjli_1_1_checkbox_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a69a9bd58bdf7db8306f69ffef3a30db7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>ad07d539dc779a9f8ce97ce258bea2bc7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a2e893b19873dd7b4b5f6f69c960ad666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a9c84d8f88ac8e65fecf8ad63c1705450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a6347bab956156a1f374b54b457a6b993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>af2521615d20bc4ef376e5e41dc8f0b3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a22faeec81ed59b1ba7084ba700ec5210</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>abab25a673391a5e718b4dc6b9257a8b8</anchor>
      <arglist>(CheckboxHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a6132b8cac7dc7b617ea73baf424e15fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>afc578dfa991f9059971aa708465d3790</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>aaadf41f5af55be66be36ae26e4e1fb0a</anchor>
      <arglist>(CheckboxHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a9c32d2021bc5229efd449c5edeb50613</anchor>
      <arglist>(CheckboxHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>aa965d6238c0673fa0923ec6da1a26819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a141ffeba073d9bc717b94a954bb6896f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a12a7752a2d8f4978f46031123747105f</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a84d0f7ce28c152cbf174ebe89d8e0b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a2a27188610dce40e85eceb1ce4eb12bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CheckboxHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>ac93f2537edb986ebf56b532359762f30</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Clock</name>
    <filename>classnjli_1_1_clock.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractClock</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a3f545956fa3dfa04a05defef1ee5fcde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a6450a0b8789fa7e5a36c9a6e3d5caaf7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a976e1d6b7854d6a66074d573422ebdbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ab7e908f3651b87422588568a724a912a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>abc2f28e73fe91cb9c4d9791a11b4f9a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a03f67b4c2323f6f3cb67ad48a276a068</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ad318ac6f8c34fa8796dfe6156cbb1824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMilliseconds</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>af5585917dc19bff0dd795e7a86bb0bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMicroseconds</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ac1debc5f875f6011e082d93037127870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a724c8f2d661768599d07bec6bdbe8863</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a4762e97f7a9b32376bb80cd3388a5709</anchor>
      <arglist>(Clock **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ac31ed1d0d280bde5c6f14065d96f5bb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ab71e13e33fd3153b725fa9d37a414915</anchor>
      <arglist>(const ClockBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a0f6bdacbdb2386e73b651469cec01147</anchor>
      <arglist>(const Clock &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a5bf121c9b4b16a5e72290325362fc204</anchor>
      <arglist>(const Clock &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a84cac9968da6a5370549359482c1c684</anchor>
      <arglist>(Clock *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a1d5053d6e7cf9a3eead5984699d71376</anchor>
      <arglist>(Clock &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a6cfc3c0d133f84b73bd83c1aff8eb27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a46fe51eb140fd7a3e6a011d511a7263f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a7e5e8e455e01fc4deb3174770a9a3532</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a25793091ce80c61997437fb69efedb50</anchor>
      <arglist>(const Clock &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a8223b146693fd33eaeeb13ff476dd2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a195cbf38be9b6e517939c8d30324bd8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Clock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a91ddfa8228a7fe29c35d58a54e471fca</anchor>
      <arglist>(const Clock &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_btClock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ab107f00a19c387d5b34d4a2fb92d8370</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ClockBuilder</name>
    <filename>classnjli_1_1_clock_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a777a0dabf45bf7aa350eead4b2d429b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a573603a3b9590297c693adb6aa14fcf1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>ae5bfff62ba0be4db0865e9edfbf50fe8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a33ea4324b90a31366ac060a1ca92a41e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a198b7584cba37e593f778eea3fb1b5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>aa3b1a743385a2c841b6693cfbea87df9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a08140bc3b890b7778a8d11560f1c185a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a8a38ebf364f8372c734f1977891b5a38</anchor>
      <arglist>(ClockBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a3927cd5ba27c3a8d8ff4afa03875ef2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a043ff6eed1fa8b4101c71637131a8c85</anchor>
      <arglist>(const ClockBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a921adfaafe7130bca6d12c76c03a9cb1</anchor>
      <arglist>(ClockBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a0b61c45e426047e635c18d47a87f9e5d</anchor>
      <arglist>(ClockBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a7d127f936da1c376250e912e569b3531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a252dbc5874f31103b041b5d9b19d9b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a1ba284d73c87e086394b6dbeb4b6cf17</anchor>
      <arglist>(const ClockBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a9cba8993e2e7b2aeed39039d46b589f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a6d45ceb8e216b0968d66542f150a4fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ClockBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>ac343c5119a8e56a0d8323ea2f637b739</anchor>
      <arglist>(const ClockBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CollisionResponse</name>
    <filename>classnjli_1_1_collision_response.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a8141ac38cab5920994269cf078f43a5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ab0b1938969cfb130dea4d4a0b7209fba</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a844db049d032f0dab978e16b50ea2aaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a1de8dc0c52333d4ab190c0b29198d43d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a44eb54a8ef51420870cb91d7e03bf776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a8234112307019ccd87b96932ff41b527</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ae8f341400609075fa392be53bd80bed5</anchor>
      <arglist>(CollisionResponse **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a7a45466dd3c077d8e073aa963d62e919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ab88008dbb8530e2f17008d114ca7f846</anchor>
      <arglist>(const CollisionResponseBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a2ae8c84b9002d345d1a2f4e6e41e863c</anchor>
      <arglist>(const CollisionResponse &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a7a801cbdf2699d801c92c906ebbddcd0</anchor>
      <arglist>(const CollisionResponse &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a451b249151cee97ae2913a93687b804d</anchor>
      <arglist>(CollisionResponse *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a1efc781fdee9a0c85103ae8a851ada5a</anchor>
      <arglist>(CollisionResponse &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a4ca0dcf9d50c335270a14ebaf864adf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ae4bc0371f4d64b19378edbb0fde924cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a24e7db05ad1d9b24bd59634614eb87ff</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a0487102f92add4ba625883d0f67e8db6</anchor>
      <arglist>(const CollisionResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a848e4b5a53a32e6e73ad89da46f9ff9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a97f0c769f64e21654712d5364a199b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CollisionResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a611c8f8b4d45e0aa62e25767ceedf03f</anchor>
      <arglist>(const CollisionResponse &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CollisionResponseBuilder</name>
    <filename>classnjli_1_1_collision_response_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a5289c7fb600bb4ec6c401912e52d05e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a49d6eaf02a37582f2d696f44ea7cac1d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a205b2bfb161fb16586c90b9720564974</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>afcb42ddd8899f7003e998e605948e8c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a9cf68b0b81bd090788f53349e18dacd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a366a6c56998897fddac196492079d946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a8b3756f838b661d0b9eadb371834834c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a8c281e0f4c201610eddd0185cfb8d6aa</anchor>
      <arglist>(CollisionResponseBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a04a7fb268013761c5632c2c665acfedf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a363792fa84714d68ddb1abf4052b12d5</anchor>
      <arglist>(const CollisionResponseBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a5038eba7150231ef4f2324aabd4076b8</anchor>
      <arglist>(CollisionResponseBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a17f221a035b20900409fd4ef0dac9163</anchor>
      <arglist>(CollisionResponseBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ab410cf0e5889752737ea4b7f4520ad42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ac53d07488e9fa7b52e3d980adb5a018e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a228e7cc1ea19bd71bb9bc3805620f1d1</anchor>
      <arglist>(const CollisionResponseBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a3a3a7ee2fceef8d94926d2e041f87819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a0ed2afb5f8b1c166a5cfc6f1f0beb78a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CollisionResponseBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a6878167154c83eba4f2050c50a11c92e</anchor>
      <arglist>(const CollisionResponseBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Cube</name>
    <filename>classnjli_1_1_cube.html</filename>
    <base>njli::Geometry</base>
    <class kind="struct">njli::Cube::CubeVerts</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aba49570ea3011a9736466b11d4155634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af61265769b468b97db1d74b92a053f19</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aa59a429868c73f947d00f770572be587</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a34468ccef13baf9af39a71dbc15d9247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a4b3ce202f2b061904a1ac9c21b89d1a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a463d6ddea659f4f822226f9cc5a79010</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a37645be74ea1304d21aa21cc7733a7ee</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>adda7c00270d4dcf6b36d2e8baa408fcd</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a23cb59fa703c22d30a2fc91f193b9bee</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a305b61415710d38c9eb7dc8b66c75bf7</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ab6312be4dbd5a7f8ce6aec9ab3db8433</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>acfd7a025426083aae917e78762bbf9cd</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a2f2e8e877b7d3fca8ee1cd52b1789c96</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ad2bb63bfa04b3833061cf34f02e5e64e</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a8eacd30c89f13f065e753d6fa39e08a3</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a90875a6c4bc91f9c6537df291e857fca</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a1e9e17f2b9540816b53f5512242c3223</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a363d026023301db862d2af33c62635dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a039e49bcdee47f5c0f8042d4753e22b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aabd5e1c6893048a0697d1a8a8ddbfa64</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a610422aceaccdf867134e968e356935e</anchor>
      <arglist>(Cube **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a27eccc47baafd77d01052201d3af47c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a9718ec8c4760676a57d6ad37b6135b20</anchor>
      <arglist>(const CubeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a787aab02519eb0a492fd7ac0248fd072</anchor>
      <arglist>(const Cube &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a0af2f65c8816aa6fa64cc35f4a0e83f4</anchor>
      <arglist>(const Cube &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a88a32c6bf208aefbc78ecb98fa10e84c</anchor>
      <arglist>(Cube *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ad5e0e6661397036c47d3b69c73e71449</anchor>
      <arglist>(Cube &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a7d0fcf7e32ad4dde6c88fd88f8360666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5535d8b421b251568aa2683e68565ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a13c6574a55b74a5a67924faa3936f038</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5a3ed8352356dd46e9ed33768bf668c5</anchor>
      <arglist>(const Cube &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a11c489f16e5521c12bfbdc6cfd18487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5bab102d0ab4535470fac32c810ac318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cube &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a3b9f506412312df105903bfe1f089f6c</anchor>
      <arglist>(const Cube &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af902a20050d40c642b6c5e7def28cce0</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a2cc1f09c86f816b8637dd158b892176c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ab9ff9d98801e8900f3f22bec9363e16e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af4a8f82cb85fe11650cb7667de65f5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a8cd8f387b7c0de4673c255d1994927ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a55eb14ac8d33b9f24b4bc5dbbbfb8534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aa49ffe0207d437cdbe46fd21b92403e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a07bd067ce42626569c961d742a5999d9</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af3aac830f33d30beab789a41a12bae49</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a98d695049b7fd389f7dc5884efd75921</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a328e8add9f2af823067d7c98e33dcff2</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CubeVerts *</type>
      <name>m_CubeVerts</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aef7ffe6a03c42b84dea87cda97e625f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16 *</type>
      <name>m_Indexes</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a6570ae7288027e012bb99028132debd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CubeBuilder</name>
    <filename>classnjli_1_1_cube_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a34ba107a8d9826982b03146e1e5852ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a125207ce7b17c2c930210690cda6e4a7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>aa31c012a2ac6bcff0b63af267426e0bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a30191c9b9ed4fbfa561d15ee36283f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a8105b27cbcc1855b0087630d4b0113fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>aebddce8551b961247641b8ee86eb691f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>af91e42ff6729c76bdb687188f51d2e00</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a21b2794c5da145beb00775bd5e487607</anchor>
      <arglist>(CubeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a97292ccb4ef5201f974e1fda4f3a6d0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ae6785ec56327d8e991c5ff1d60972a5a</anchor>
      <arglist>(const CubeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a22ee0611d791327efaa4f5d090aea73f</anchor>
      <arglist>(CubeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a0e6301766bfb138e5f2a4604544c519f</anchor>
      <arglist>(CubeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a89d4a78f11f19c295141a7f60bcded0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>abe2c3fbf59c9e98e0f147d1524e9d97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a880e39d83c906cb15e3dfba742d6d1e4</anchor>
      <arglist>(const CubeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a66faeead20453a4a696a370299f6f1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>aa7793bdf63711269ef20c22c676f9542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CubeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ac21bb92a717de7bb94d36fe0cfca262c</anchor>
      <arglist>(const CubeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Cube::CubeVerts</name>
    <filename>structnjli_1_1_cube_1_1_cube_verts.html</filename>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>vertices</name>
      <anchorfile>structnjli_1_1_cube_1_1_cube_verts.html</anchorfile>
      <anchor>a426460bcb49986df85666bd7cd0875fb</anchor>
      <arglist>[24]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorld::CustomFilterCallback</name>
    <filename>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</filename>
    <member kind="function">
      <type></type>
      <name>CustomFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>ad18b15dd9ba6a364c8a9dc05d84aebe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CustomFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>a78527d37f6c6ce9ed9b572a2c022dad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>needBroadphaseCollision</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>ad9e467e050dd1ee94f787dea4c211117</anchor>
      <arglist>(btBroadphaseProxy *proxy0, btBroadphaseProxy *proxy1) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceInputTime</name>
    <filename>classnjli_1_1_device_input_time.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ac8042b5700a5c1ba5901e1e552e535e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a69e4bb4be69f3ac53f4514a58fd61021</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStampFrame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a03eca1e2b0725a5be925f6ec5cd33b7b</anchor>
      <arglist>(const f64 timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStampTick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a6a06c7800f1925631dafb54671b2abd7</anchor>
      <arglist>(const f64 timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>getTimeStampFrame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ae80f7d4b32223221339d3ef3a8669a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>getTimeStampTick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a6e6f73d5932fcbb2d17a74c52ac4280a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a2c5cc0a5ead654efbbce74d08f490fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>af34c8fdf7626c83b3a106984c6218332</anchor>
      <arglist>(const DeviceInputTime &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DeviceInputTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ab1ca58d01db67a7ca5eb57bbbe07d929</anchor>
      <arglist>(const DeviceInputTime &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a2c421a428c0d4fdc1311d91b7001f9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timestamp_frame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a798d29d739522cad83bd37986ed15a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timestamp_soundtick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a20e05f326dd3a3836a549cba6b536e85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceTouch</name>
    <filename>classnjli_1_1_device_touch.html</filename>
    <base>njli::DeviceInputTime</base>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa56351410e0c6fe7ced6fafd4cde27f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa34b346fb2574885542d03fe8170ecbc</anchor>
      <arglist>(const DeviceTouch &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DeviceTouch &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aafb174d178edb785547de79d2c561417</anchor>
      <arglist>(const DeviceTouch &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa0c19c372c26f011e3b60f0fbc5e8c87</anchor>
      <arglist>(const void *touch, int n, int N)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adc6021981c650837f9ddb1486972a9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a4bdc7a1fe5514893275e7e703c84e1c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a4895380f45fe67b759b2cf8464ef9287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>afd1b650b59f3a0cfbe7ce4cc46536e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a3558b0f54614b5b080477be55feca7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPreviousPosition</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a0f129f4e01fcdb7b49f1c0156856235e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAddress</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ac4200c9bad22b0bc5650ddf011ad78d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTapCount</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a7263b3def6149971e8e7951bf61a7ec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTouchIndex</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a00c39635c7010b000a20eb490df7949c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTouchTotal</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adace454fae4319e399766ef2a978c069</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>af37ae2aa3c4b1bb24a1f69e32a0cd659</anchor>
      <arglist>(const void *touch, int n, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aab179cccc7d0c895455113d0706ae3b3</anchor>
      <arglist>(u32 x, u32 y, int n, int N, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8f54436e475cb32dc1c9ee64805fe64b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const u8</type>
      <name>MAX_TOUCHES</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8f2f389056e9750d3cee41875987c4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a2707fe5acb996fe22b1b20ceb6b1e063</anchor>
      <arglist>(DeviceTouch &amp;t, const void *touch)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_xpos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa459469f52287f2085402117c13512f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_ypos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aec3c40c2adb1ba1bf5a13bf366bd3b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_prev_xpos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aefd5c83cec6edc7dcb7edeec2144c470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_prev_ypos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adc6f1bce3fa81e81f1a01ca55b2b3db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>m_address</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adf8b9a7a96b90d0639aca0b9982a95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>m_tapCount</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>af4506b66dcc8e44597244c9a6827bd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_touchIndex</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8702a0eb417f912b2b8733b2f21a8060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_touchTotal</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ad36aeb2b221ff37cf29d6b5f837d0d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_scale</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ae07cde00eac9eb6e816f261bdb0df9d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DropdownHUD</name>
    <filename>classnjli_1_1_dropdown_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>adda357901d74500336c94c7ee9669aa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a57d1d37ab05530b8eb88f595d22c02d6</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a7257b7b4a682fed5216d0abb08dce26a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>ae65b7bbe93fbdb2dc473080e54ee6c9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a5c83fbea8bf711bb1282c9f7bb43d3c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a733c7ee4220595ea54f5616cc154d14d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a22045044c975af1447abe75617116d23</anchor>
      <arglist>(DropdownHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a83651e33412fcff61dd508e83a8f2984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>afa161ca2adcbabbbce78ef322d6eabeb</anchor>
      <arglist>(const DropdownHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>ac83d2180662f195901311d0c5ccfcca2</anchor>
      <arglist>(const DropdownHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>aabcb59b5954b16c76e3d49ad1e4a725a</anchor>
      <arglist>(const DropdownHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>aa37935d193a6a367c5337989a4b53cd4</anchor>
      <arglist>(DropdownHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a595641a19586e9ee8e01efdcaed202af</anchor>
      <arglist>(DropdownHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a5cc1789ccef7945c17c3bf0ed27a3646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a17dd6c8ecb94471289bcb69662582207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a6f5b1a8e46033f2871b1d3c80294d312</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a0c890dbe0093b1920ddfd628cf7b7ad0</anchor>
      <arglist>(const DropdownHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a8cd9837739df28e99c13778009565422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a23f653591dd54418ece258c07bdf262d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DropdownHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a659508b55a4588bf5c1ec97d89828f41</anchor>
      <arglist>(const DropdownHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a6fce382446a9b4979f1b340404cc8df0</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DropdownHUDBuilder</name>
    <filename>classnjli_1_1_dropdown_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>abd6b3a13c517f516b916a1a8a18da8fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a1f04fcbac0717300ff59bc3983473c44</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a1e29e921d2817c9e9a056a54b29dc630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ab8655e448fadc3294f40581bc102ccc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a54135d2d3899afb4ed353deb8419b8e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ac4ecaba90b6445e3164743886ac2abf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a8a5658575389ceda1ea61fabb0915957</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>af46213786e79531e5aefac74bf13ad5c</anchor>
      <arglist>(DropdownHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a42edb16445b424ad46519e8f866d0522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a56ad4fffce5b318a53bd8edb7bbce467</anchor>
      <arglist>(const DropdownHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a9daf63ae2c6c8646389fca153f0f01a3</anchor>
      <arglist>(DropdownHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a6587729282b94014984a7d42da735a70</anchor>
      <arglist>(DropdownHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ac5bc954809325d271ca5f433e076db68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a3cc32e8c174921be2da4053a9cd6dd80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>aa0a70e84ba73cffac3ac290c0eb07c64</anchor>
      <arglist>(const DropdownHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a6daf1f10d29a42c58ff7cb22479b3771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ab80b7526f302458b511eb2e55dab2da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DropdownHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>aa99a0d6453ef717fd8639d87b6a9657e</anchor>
      <arglist>(const DropdownHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::FileData</name>
    <filename>structnjli_1_1_file_data.html</filename>
    <member kind="function">
      <type></type>
      <name>FileData</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>aaf06a8fe66acb95e4e4dbcb82d21da0b</anchor>
      <arglist>(const void *buffer, s32 size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileData</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>acff97c051f24739ace3fd781032cb7d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getBuffer</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>aca93dc4dc69f598737df2583806874b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getSize</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>a6334f40ac5be80b15e7c64ce73f3373e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>m_buffer</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>aa8f869ffd8b6a106e1e72e9db82eb2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_fileSize</name>
      <anchorfile>structnjli_1_1_file_data.html</anchorfile>
      <anchor>a64eb4cb8f8ca6a1d73f6ff6f2a1ce271</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Font</name>
    <filename>classnjli_1_1_font.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a49a5ca73314c77683178c379d6f658e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>aef584a28250b4bda59f5fe1b7436ad02</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a2433744be84d75c130c7e6a19259fe8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a5318ddd5d7d00ee3673652538b595626</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>aee5ee1fa435402d015a325d534d1f50b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a1323cd42dab19cabcdc0d3a6a59c2217</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>afd040cf2569f9d896fbf1ba70c5c78d7</anchor>
      <arglist>(Font **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>aed93d25eeea36664ad36cb6465b13c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a4c71abd74ce06221198a289f752a47eb</anchor>
      <arglist>(const FontBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a3955b88a609b5c0b0e11c8c4cf747a65</anchor>
      <arglist>(const Font &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a91edeebafbf382cc57006bb97c517668</anchor>
      <arglist>(const Font &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a83d75bd4034a164bd219e8318b1ec25d</anchor>
      <arglist>(Font *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a062eb1fa5441ae63edb44e3183d29789</anchor>
      <arglist>(Font &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a552e9d61c8ef5dd961a00a0a92fa432a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a68907f421c0aa100e9d91deb7b4ad702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>af2ea00a4ebba3ab57a719c811677e96d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a70fbc2653acb46488f802a21c53986a0</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>ad364f7591804a6e096d3ce271c68a93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a6a6984e57882eee149d78de2263c8a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Font &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a8f5fab015c823b48153b5be3463510f1</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::FontBuilder</name>
    <filename>classnjli_1_1_font_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a5bf8b90cd09a850137d8f681729830e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>aa5a3ca78ee946c9bd93edc9d286c2e68</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>afb8196d9302b539b757f822b8bf9831e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a2c06e5da29266e17d4a7cfe917d95639</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a27762749a2261010446cf3020c93755b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a4455e62be5801808c75ced7c2c1d9e93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a7f000ad543e40f9ad248ce1fc4d1d1ea</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ab356942e09bc2e319c3b2eb1a310adb8</anchor>
      <arglist>(FontBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a1323af36408057f2e962e81e753e43b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a1eed764abbb1af3bd3eadecb7c2a7cc3</anchor>
      <arglist>(const FontBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>aa1190c756c9eb78ab5760f66e86b7440</anchor>
      <arglist>(FontBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a1f3cedf42a8651cd0dfb15b3ecb9c2be</anchor>
      <arglist>(FontBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a4d697f9701f425af03efc2ec14989f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>af1bf89e07e97044c41ef63782919e048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a552bc27c16d565f7c6f4cb9a02deec3a</anchor>
      <arglist>(const FontBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a2b10c49afaf95709729b0be017291733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a9cfa6429f9c1c899ee2b20d271b7b2c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FontBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ab03e94372f86ba6d933e684254a7e8e6</anchor>
      <arglist>(const FontBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigid::ForceAndPosition</name>
    <filename>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceAndPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a0e6c3f8b0e79eec391ee40f77539c224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceAndPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a793f0d8c9d6512fcedaa0f158717cfec</anchor>
      <arglist>(const ForceAndPosition &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a20e9a97be39f77a2c7d3fa0b9f043a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ForceAndPosition &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a38421e123fb71f49987c20450f0919b9</anchor>
      <arglist>(const ForceAndPosition &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a20fc1791d7e8865b2a37b500ec664ab3</anchor>
      <arglist>(const btVector3 &amp;force, const btVector3 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a5f7cfc91442563dc399bb13bc9cd08e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>adb6642e850e70bbdc85af7b10ac6ce33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>acfd0c44e0b6bd6cefadf5ebc47edfe5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Force</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>abf8c5b0f5b6b3abf8ae590a3bcb6d1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Position</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a15ddba07c93b2cfe06d8ab3e5a45f989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::GameClock</name>
    <filename>classnjli_1_1_game_clock.html</filename>
    <base>njli::AbstractClock</base>
    <member kind="function">
      <type></type>
      <name>GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a6eca9b59f7e983c3719b21a72afcba36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a099e2c1261f90f376f5e708ba23900f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>adb4b5fc28c79a15fa286fc66c0975768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a4dbe0f8e9b611bec08316dbb158d6a17</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>afe3c4dab3ee3c43690cac84a98ee29a8</anchor>
      <arglist>(const GameClock &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GameClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a859e7bcaa328319401bf4a154918cb6b</anchor>
      <arglist>(const GameClock &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Geometry</name>
    <filename>classnjli_1_1_geometry.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::Geometry::TexturedColoredVertex</class>
    <class kind="struct">njli::Geometry::TexturedNormaledColoredVertex</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a34d36cac83ff09f287d53bd1ffcdec20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a19d2c2833d9ee3abbbb7cf7605777fdf</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a18363bf7b63896084e4a4a8052e81089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a69bc7a259420cbed410a8216106ed954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2c06a8fcaf48cbc2b3b15f7ffbfa005a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3cbdfa54d4321633f3c59c27a041fe52</anchor>
      <arglist>(LevelOfDetail *geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae0001216bacc787a9c235fb78609d276</anchor>
      <arglist>(LevelOfDetail *geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllLevelOfDetails</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a95e2234f03e5a4fae599689e1545f323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLevelOfDetails</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aeab88556c965913efa3d78fad81556e5</anchor>
      <arglist>(std::vector&lt; LevelOfDetail * &gt; &amp;geometries) const </arglist>
    </member>
    <member kind="function">
      <type>LevelOfDetail *</type>
      <name>getLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0cc130b6489ecf8302aa022a10c5382d</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const LevelOfDetail *</type>
      <name>getLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2ad8c0b02598aa905fbcdc9e5f08c30a</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad2e3608762cb25ccd07181377b4f95d6</anchor>
      <arglist>(Material *material, Image *image=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a419d020ca0b46536bb53d923fd1c7df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6b2c0bd5d2aeaf8cbe4b7135ac3bfa4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a21d8c3cebf009d7006e40a489ffdac92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad83b2a5ed6ade7e278a6b8c64bc5d875</anchor>
      <arglist>(ShaderProgram *shader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4b0598066056bb2ffa97e85febadfa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ShaderProgram *</type>
      <name>getShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2de57476fee00a5609c679235bf8269d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ShaderProgram *</type>
      <name>getShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1ba8e28055893bcb8c3d779b685ad87f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getMaxMeshes</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aec7ed2f4dfe439afdee985d9cadc5f28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a64f70fb9198d1037e363b8e24572ec53</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a125699411e1abc464f923fe4e72fc65b</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9995d84e425b589da7576cb3815150e8</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a224b18abc15b88b556e6b71bb89ecf73</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae54ead1ba785a8c2207b197d8e419abe</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a495713b5eea24429df8899cfaa59c832</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad4f8c2a3b873a63ee62c87d512b9540d</anchor>
      <arglist>(Node *node, f32 opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4ba0fc9934e40c651b89969d47b03d3b</anchor>
      <arglist>(Node *node, bool hidden=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac1ea8a16d541174a03addfa2dfede406</anchor>
      <arglist>(Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a25fefe3f656bdcb8c88d2fd4d2f48df1</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1169257a4241392cec0a23c922f148f3</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8ffb29f40c6f175f83cc36568feb87c4</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6661dda8bb03d0f3d6e9764760b6b13f</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a27b42b7a7ed3c67a6f8827288828687a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1033c9f6dee9f725b122c2ddd33f4b0e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>adbf0ae6c38f23779df2b37708e80c24c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a97ec03852997043d6900af8009b390d9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac4edd389ae104da289e2282d780454f0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac857e830af897450652aee0922e62e20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a64c12722f84add665776c2b9400108fd</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6ba967a65603a7660ab63fe067e338b4</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlendSource</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a52a0a0310a248e03f8b6c410ca0f3fae</anchor>
      <arglist>(s32 source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlendDestination</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac8524641c3a7273902e2028ef6836503</anchor>
      <arglist>(s32 dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6c736d40f50aa200248ff2fffe362446</anchor>
      <arglist>(Material *material, Image *image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a73a6deca50d0e7324b8d83e58271ecb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af689d51b2b51f9ed668693285d94a004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a66e5b216032f269e6dd80fff3d2b8f73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aeea26399df34acad034ffe6c08f358b4</anchor>
      <arglist>(const u64 index, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a673bd7dd3b822111c7eab82bab544bad</anchor>
      <arglist>(const u64 index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae0fa26aaabf325ef7dbca8dc5f765151</anchor>
      <arglist>(Node *node, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableBlend</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a12bd5b2725ed4ec11cd48d4fc365f644</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4270551bf9c0f0ade7ce5b0fd16f78d8</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStencilTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a66c3dcdcfb2fcc30bc0520f280b87ab0</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfReferences</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac8ebc8798fec68a7a214e2c516db0dd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a60f8058a4afac8cfe23aa33ae1382fbd</anchor>
      <arglist>(const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geometry *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac4bea52ecafdfa39493603df1b280369</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3474e26333aca3df1716737ab7007028</anchor>
      <arglist>(Geometry *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad3004db6506e2177a3b0b623116f2bc3</anchor>
      <arglist>(Geometry &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0d0b4c87d7da0d66a4b47631f3210076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acf203280328b16d7b39f4675bf5f5752</anchor>
      <arglist>(const f32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>getPointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4be5f27b78acac2c588f532d5af79087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a189c4234a29928076c89bfc8c55e0d5c</anchor>
      <arglist>(const f32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>getLineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a57295f3f031ed218d9bec7078ef70248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4130386ba85c7f15437fc3539530cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af78c87969f709e52b767f1f1841e6b51</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a11bccbb5b7f74ffe5e85afe825069120</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a91ea8d7cf64ab6c3b07d370a64d69f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a21b7c3567e776e652d8220ce3b6dd458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Geometry &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aceeaa85f60d411550bbb70fbb0eeeeea</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>adad627c355bbfee83aa6e535f99e87b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aca0e67046010f664a3680def4064083d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a14b61d28ba0aa06f9d7d60906eeed7b9</anchor>
      <arglist>(Camera *camera, s32 mode=0x0004)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1079a6e3a625b82ab5305b5cc47d1330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a476ee34f854c8adf4126e2ba32639bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aaf9879b9197998f1a63dac38ead6354c</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeReference</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a39b63002b1e195651b30186319f5cf6d</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3780bbd093a4b163de3499e5726667f9</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableBufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3729511d4f34251e0ac1df3135c2a00f</anchor>
      <arglist>(bool modified=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2d62c7f4b2580f1876f4dc0b3d546d79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>quickSort</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af92dc57bfd9c3457085d2fdc4102cb22</anchor>
      <arglist>(signed long left, signed long right, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>swapTransformData</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a67fcd3f18e15e7da88bc070eb7dca337</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>lessThan</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a7bbffa4f383e7a89a52e9b426d58b285</anchor>
      <arglist>(const size_t idx1, const size_t idx2, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>greaterThan</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a5211fda676d03559ae8221b60b2738d2</anchor>
      <arglist>(const size_t idx1, const size_t idx2, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac7ee1093062d2f342519f7914852a367</anchor>
      <arglist>(const size_t idx1, const size_t idx2)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>bindTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a450c71467016f8266e29c7dbcde2c4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0c5aad85ac6ab14068c229abb87e2c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupOpacity_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aca4922f34c4daa4f3e6209c3ed5c2609</anchor>
      <arglist>(Material *material, Image *image)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unLoadGPU_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab4f7836b90acc74a61fce2d49d65a05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupShader_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>afcab012c60ce529923500440187cc85b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; LevelOfDetail * &gt;</type>
      <name>m_LevelOfDetailList</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a027133a39cf09c8f61b77df39e1e7347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_Material</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab2ba0f4fa336c12174fcac949df5fee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShaderProgram *</type>
      <name>m_ShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a28fe075abe7471aee4eff56e0b1389c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_projectionMatrixUniform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa8e22217dcfbcb465395971bef71453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_modelViewMatrixUniform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad20c318e10cbe2afacc7cfa5fadd09dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>modelviewBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3d215d881f2abaa01df45512a3723996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ModelviewTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab544bc75aee1731a0bfe0f107eaf4044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InTransformAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab3c31621e11c227991a764b3dcd8d7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>verticesID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acb095e14b8f0381029cca4f272fefc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>indexBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4b1af9c522fda1a6f4aa6d92bce806f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>vertexArrayID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab0b261955ffe7bfcb78e77972c59c00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InPositionAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3c49bfc26e8e421c3321223cf607ff96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InTexCoordAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a17d04db635e9cfdf49eb928f41569cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InColorAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1c6c813d0d983d18f5f0463b476f8477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InOpacityAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae15315943bb9830d57a1e7a67dfa04ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InHiddenAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac455a1ec0567cade34b5453e32ba463f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::bitset&lt; NUMBER_OF_MESHES &gt;</type>
      <name>m_References</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1a70685ec5ec85f08adbd7277590a67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_blendFuncSource</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9913325754224a04d80c97942c5d0590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_blendFuncDestination</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>afa9f334ee74381bb6bb7f2487943ebd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_opacityModifyRGB</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4bb3529fcfb94e4567ec743bafdcb033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>u_opacityModifyRGB</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aaccfd4b0c63b31bb04aba4d752efa4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>u_pointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac5c7f121590883537de568962f8e3b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableBlend</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae1d2dde4fa803b27f8743710841a53cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableDepthTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6417e088ae2684f413e37d3fd17e4b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableStencilTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac546ac75ca65bd355d3a1aca7077a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_TransformDirty</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad414e27c2a708d6b0e361b88cfd8d75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_LoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4e9e4a00d2ae14efb4df0fbe1485570f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_setupOpacity_Material</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8990f2c3818485e53b23de12fea66468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Image *</type>
      <name>m_setupOpacity_Image</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>afcd7de399a889620ff0ad2b2f2fc3afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_setupOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a55329444afa99dbd6fd3092e550c3618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_UnLoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acab3d6720f978b23572f0ae75486a14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_bufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6dba2ac93b83f9baa5596158e311470b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_vertexAttribChanged</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6a2f29f2dd1c6a0f46a59f719c422a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float *</type>
      <name>m_MatrixBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa2abacdbd107c6b2d23e30be645ff0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>m_maxindice</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a139e720f59aaf7f651199c5462ea8bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static f32</type>
      <name>s_PointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4719e7a6be0324ad5a3369e563c8528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static f32</type>
      <name>s_LineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a31da0cda6afa6d640ce54b5c6642cf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Image</name>
    <filename>classnjli_1_1_image.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac92f337318902d377176bb26c47c385f</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a33443a3f03144ed102b04a7cc512a168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5f92e1419c9a58c18234a8ff511ff4d2</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>adea3c0735bbe2fad58c5fc18e0358f02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ae055470f1ec8208925e8d8456631dd78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a4f82baf12c1bbb6499d92d7581181106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a9832dbb9ccd17a73581cb8ba3425adac</anchor>
      <arglist>(const btVector2 &amp;position, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a3e991778945527967f1051433d12bafb</anchor>
      <arglist>(const btVector2 &amp;position, const Image &amp;imageSource)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a197fcba156fbfe31149a38513aaa0abd</anchor>
      <arglist>(const btVector2 &amp;position, btVector4 &amp;pixel) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab28fe1d7ea14d262795c549040d17f85</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimensions, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa1fd01f4597a64ef7bb83eab78bfa1b6</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimensions, const Image &amp;sourceImage, const btVector2 &amp;sourceImageOffset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a0568bc41e5076a40e2f7481b2a59a88e</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimension, Image &amp;destinationImage, const btVector2 &amp;destinationImageOffset=btVector2(0, 0)) const </arglist>
    </member>
    <member kind="function">
      <type>u8</type>
      <name>getNumberOfComponents</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ace1250af3e94d2df8b6783f5fe11cce1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aed1d21650a3158690d5fad00d947f2b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a63b1d5af43d9185316132bb77f989561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a843619286d44c11b2a9abadffb0327d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u8</type>
      <name>getBytesPerPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abf624935c9430e71c6114dee8212bea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const u8 *</type>
      <name>getDataRaw</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a07ed25f05a7a5d44b7d4560af4c4d593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u8 *</type>
      <name>getDataRaw</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a925c55df126dd77b51d895fa5ab779a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataRaw</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a0194e506d4b5f54f85eb1a185a2bfd72</anchor>
      <arglist>(u32 width, u32 height, u8 numberOfComponents, const u8 *const, const btVector4 &amp;fillColor=btVector4(1.0f, 1.0f, 1.0f, 0.0f))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abb8f6bfcdfd719dfe34d983157c352e5</anchor>
      <arglist>(u32 width, u32 height, u8 numberOfComponents, const btVector4 &amp;fillColor=btVector4(1.0f, 1.0f, 1.0f, 1.0f))</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>getDataRawLength</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a623f89634a4f35764712fc226ca5abb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a1e15b3f6496df2fd30343d8b1d3953a6</anchor>
      <arglist>(const btVector2 &amp;from, const btVector2 &amp;to, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a69d49e4cee4cddeae589f857f263a684</anchor>
      <arglist>(const btVector2 &amp;from, const btVector2 &amp;to, const Image &amp;imageSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blur</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af0f769d7188c8493a97d3a12c266f1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac0af5dfc7833f19b47aeff225506271b</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abbf9c8b23419953dba0bc0ac4133aad9</anchor>
      <arglist>(f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a7d7f01271e4853d00ca403a9b15e0c53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preMultiplyAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5d36dc67447d4f30561baa36357ec223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a16dd7ca0f260d8096beda930c3df4de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a559984938676a684d1b24abc1fd16647</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a2306ab0ba9cf4fec206ebbbf73a7dfaf</anchor>
      <arglist>(Image **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a77d7cdef2f8980d1e0d7ea3a18d15e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>acaf1736c1e56c8d1660cf061fb3a43c5</anchor>
      <arglist>(const ImageBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a2db12730fdcd332a2452ddccb1932535</anchor>
      <arglist>(const Image &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad159312ba729b8d4d0c8237ce6eb4eb4</anchor>
      <arglist>(const Image &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a6038d937b31b613a7980c80d18f72087</anchor>
      <arglist>(Image *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a17ab0e29b263eb32c52697c01b50eb11</anchor>
      <arglist>(Image &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>adc9ed74e583801bc84aeb888211caf27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>createSubImage</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aec27f54b10de1b7b782da4de1138b151</anchor>
      <arglist>(const Image &amp;imageSource, const btVector2 &amp;position, const btVector2 &amp;dimensions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab4a9a3dbcd9300dba94c600c89ee6eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a93bd5b6d3f6955819dad53bae0b2b724</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a70b449b0a21208c1da192eaa069f49f9</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad1fcb460b23906d590ba8dfc84d9decc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa665625bdf98c86e3182500eaa43ea28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getClosestValidGLDim</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af61c27bd96e1739d4bfb4ae40d2c8078</anchor>
      <arglist>(const u32 dim) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataRawFromWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5c037d894c197c60bc5286f2be83368c</anchor>
      <arglist>(u8 *, u32 x, u32 y, u8 numberOfComponents, const char *filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a54c25a70729fb34096c0da05026ef2c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPixelRow</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a795757e6b8ced8be19cfb1cab560ffd4</anchor>
      <arglist>(u8 *data, u32 row, u32 width, u32 xOffset=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getPixelRow</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a1d1a40ff4c30f776b445f3ac003de70e</anchor>
      <arglist>(u8 *data, u32 row, u32 width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u8 *</type>
      <name>createFillRow</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a044f268715ce2eec21d386a45183bd1b</anchor>
      <arglist>(s32 xOffset, s32 fillWidth, const btVector4 &amp;fillColor=btVector4(1.0f, 1.0f, 1.0f, 1.0f))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8 *</type>
      <name>m_RawData</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a15158bdf19f840193dca9df44bf9e348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Width</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a784a866596cacd15f4ddb59a0b56f78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Height</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac4709639cbda0dab2a74ffd6a7466026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8</type>
      <name>m_Componenents</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a313f2d8768b456631e6124eb23c1e4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsInWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac6659f46597d14c903f25a6dff553585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_Filename</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a86539a463f9a77d3960a9d7c658cc882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_hasAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af3bbd441e35bcf5c20b8d5f5b1d6d790</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa22855a62c62ec48cafb88d34a7cc2f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ImageBuilder</name>
    <filename>classnjli_1_1_image_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a03f517b587dc3fe56f7a8f6bd6564bc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a65fd9359f86d1832accd678c32f0d5c8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ae09070dcc973f71d74ca75e1a9bfcc15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ac6725010815a1f9e467fe2a6437e2b44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ae2adf4b82bfba239f3cb5c295abdfd7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>aed8726e0c36ba947855178a04663e58b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ac5baa49ce01af83d95a6f2e91930a5f2</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a0881fbb8508eda6cd24f4bb88cea7d7e</anchor>
      <arglist>(ImageBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ab7f6e7d83f216a3960680120efe91ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ad833ff0e86b509792558c6e9a13e60f2</anchor>
      <arglist>(const ImageBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>afbf28e5e0ce6adfed1060d6ea211029b</anchor>
      <arglist>(ImageBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>aaba974b3b241ddd9dd440d0e8e1b3179</anchor>
      <arglist>(ImageBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>aff81851fcd608c40ebc87fa16af2489a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>af9547c56bce9f09b589ea57cecca23e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>afe41d1344d28fbc203f4caa9b20f0085</anchor>
      <arglist>(const ImageBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a77188ee3604cdb3ac57bd3430a7e6dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a6db136c8ffbbd6fa19229ff62a736f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a27a3d9d0932c89d62e509bf11739dd61</anchor>
      <arglist>(const ImageBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLIGlyphPosition</name>
    <filename>structnjli_1_1_j_l_i_glyph_position.html</filename>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>x</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a6ed30622b40cf678e609e334d92696e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minx</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>ae033f5c40cd80581c9b4ea0ef7a50212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxx</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a7186124c79d3019feb5b1ed6b0408302</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>ab5ffd6bb77fffd445c0d9f38ea8621e5</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a9becd8eef286422eab003470608064be</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa0679a354ebebacc7d31aabff0a4e05d</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa3fc3849f99bd39c429f75f9f2fd65ea</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a8c627839571ed060bd66b86b6fdf75e0</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa324a7eb79043aebc5e1c41c8cffbd00</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLIPaint</name>
    <filename>structnjli_1_1_j_l_i_paint.html</filename>
    <member kind="variable">
      <type>f32</type>
      <name>xform</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>ace4bc2627435f8b885026d397371bab0</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>extent</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a83e7cb273d83a5cba38622cf389a6279</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radius</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a7496627a07e930c0f224b7bdab820924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>feather</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a0ca1781af3e96711b8d93398942a83d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>innerColor</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a1d498a43bc3248a1ac16e5b5b1627a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>outerColor</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a1503a9e8b210e51f305939d54eb57e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>image</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a3f6e3a4e448803312e7506cf45b31e3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLITextRow</name>
    <filename>structnjli_1_1_j_l_i_text_row.html</filename>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>width</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a94b1a25f325ac2fd07b319026148c610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minx</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>ae14ecb70a2695a2d483416491b5c3f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxx</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a4721c180f0c8e5d637900c37e9bdb1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a8cebc5909fc78b73ff12cfcf8163fc42</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a7a98698f509414d766a1bca5fe3c804e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>abfc18ec33fd074ea140c6679cb6d104e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a93d67945dad8ea8ef959df9acefcc64e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>ae1ea2e269caff412bc9b4df25af04c45</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a23fb4aef4a3336830ac13966d757cc33</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::JsonJLI</name>
    <filename>classnjli_1_1_json_j_l_i.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a71063ba61ffee06fdf43f5c652db37d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a5b74cc43dbce86c50393c19d3aef021a</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>afa7ed94fbd54738f8fb72e95cb8e8d85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a937b848a460757e172db98eebec4e757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a654ed86d68af67be94afbd267e54a64d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseJson</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ac6c67daeea7d4b60ca3cd20f7a8403d5</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aab69baa38139f33c4aac4ae2836b57bd</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a83bf1f54b655a8ffcb44862665dab40b</anchor>
      <arglist>(const std::string &amp;key, const JsonJLI &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aaaf1576600de948cea4e666ca071f483</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a7487f2f83659dfb1a3f1bf75ed9f6e47</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a39309cbcc85b3fc8afc9f16983f71db4</anchor>
      <arglist>(const JsonJLI &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ae8fefba6b714c66f17c61163f955ba4d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a1e064a152dbb61e45e9daef6bea59ac1</anchor>
      <arglist>(JsonJLI **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ae21a2ad20cc739db7d5e333983be7390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a741ccb5104770062b2095bea1800db7e</anchor>
      <arglist>(const JsonJLIBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a5c822741bc430eecc8e1f85a73a55c13</anchor>
      <arglist>(const JsonJLI &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a36f5dc9fa16bc608f73b65b06bfcc60c</anchor>
      <arglist>(const JsonJLI &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a6bc1b6a389efc6e4eee52fc0563211d0</anchor>
      <arglist>(JsonJLI *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aa3743069e1f8f518f9988483f1f2ac71</anchor>
      <arglist>(JsonJLI &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a18bcd4eec2c12144952bafe3244e2382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>parse</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aac51324ec88a76dee9559a4282e01c9a</anchor>
      <arglist>(const char *str, bool compact=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ac22e69325c25f4dec44879499565a229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>afdd25a388a00c6c701803f5e8a98f9b8</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>acbcc771bf6781df2ece0aae1cfa744e5</anchor>
      <arglist>(const JsonJLI &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a1901614b3766d0852be1f7a7ec833751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a86a0728a57340c400207db80f434d316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JsonJLI &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a0d7010897a5fbd6f5ac872819d346b8e</anchor>
      <arglist>(const JsonJLI &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Json::Value</type>
      <name>m_value</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a3e99d03b130213e9923417753929b4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::JsonJLIBuilder</name>
    <filename>classnjli_1_1_json_j_l_i_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a1e6556d386171783350b1a725b300e8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ab8c231d85099f7a6d22b618dd8ead520</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>aa0d6fa12e47e3c1c79dac88a1d755aea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ae2f2b15362dc557edb19d2d3121aa967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a0eb501158a984836223ca6aa30f71367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a3c763def03afa60a409568efcf8fbb9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ac5981a8d81c43f9bb74881c007369800</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a0f75b65fb943ace2511a64c2ddb4305f</anchor>
      <arglist>(JsonJLIBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a222d2427a765fbde68eeb357a7c814a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a13a0e83281c81dfe87220ec78b96d4b0</anchor>
      <arglist>(const JsonJLIBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a62a1b35dd7d11176bf6e2365fbdeb497</anchor>
      <arglist>(JsonJLIBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a1001b3873c9b83e22988f1e14a9677c8</anchor>
      <arglist>(JsonJLIBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a6d7dfcadc07add1d7650793fb49f16e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>af1ae069dff60a0ff1ed7ec2e96da0b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a30519a014f411a10616ad43dddf2b740</anchor>
      <arglist>(const JsonJLIBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>acace1c21eb9594170cee3bcd78f2ba52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a7c63f3d6628cebeacba839ab9c23cf6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JsonJLIBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a832d644a4a8145aa9c0c4922fd955940</anchor>
      <arglist>(const JsonJLIBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LabelHUD</name>
    <filename>classnjli_1_1_label_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a28829ca230552d9c6428c8612c535886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac6d1f89820fcdd62d04d245324df9cc7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a935716c2f023cbd8887341aba4cb76dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ab7c13f55d1f54081cdd25153f7214177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0a9ebc607a7ba821d4cbd7c7f1ed3eab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac684499e98df76e0554bf882588df45b</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>add1730dd3c52197e98c920ac2246a9b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aaa414bebfb2c580b721e9ac8cb5d2284</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ad2ea252ea0a7e2faec39b37508493efd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a3a7058fd10326abad7c3ad61b976dae6</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a59c9afdc3ef0252c4d52c11f647667e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlign</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a6950d61495c1391048e780c1de548519</anchor>
      <arglist>(s32 align)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getAlign</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a83fa0ae284e1ce5fa0fecfc6ceca4ce6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a196a78a5fb764d5e14287d593a442c89</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>af1c061cf0d790ec8f5de358e3ddfffdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aa41b131ee1d33967a5aa23ebbf459387</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac04bdd57c83cdc4744430b951477badc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>adfc547f4f619dcc29b2ce26478757e08</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a57c3b7cc8a139f5f4d4c1e9b915881ca</anchor>
      <arglist>(LabelHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac225747c39d227a27937becb3d9ae604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a14446b7cbc5ec9a4d99e0c8d1e35e035</anchor>
      <arglist>(const LabelHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a18345e8e11f520c5085ec5c355606f05</anchor>
      <arglist>(const LabelHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a5dbee10b01817e1a381ab78e1725dfab</anchor>
      <arglist>(const LabelHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a416d3cf9a83c516a75e5ad32b2b606d5</anchor>
      <arglist>(LabelHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a41a02be98bd27f1c856cc75f6644220a</anchor>
      <arglist>(LabelHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a139086b63c37fd42a5f97391283cc642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a8b2fa2f2b349bf0f426a29b88816c61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aec37b679f1007bef302e96521d4bf793</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0ac0ceb62be175dd54166581c1e78d9e</anchor>
      <arglist>(const LabelHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>addf0c42945b248883022f2701c9ad690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac4609af1c392895b9f75dcf7d375a8f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LabelHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0af538d5dbba52b278eb181d243c7a04</anchor>
      <arglist>(const LabelHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a10e6cbcbc4723cf94c3317f60ce2828d</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac38777c0a4111605ecca48e4a971c760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a58e6540e10e48a118af8581222acc25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a13d1c6df859379202a8986ac7097700b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a2f9f7352660b1574a4e715454aa1a7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ae242434778593a15db9e3f34555d42a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aae09e316a6c205adf6620d3a576a7657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0e917cde3ec783326e76033b11a6a0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LabelHUDBuilder</name>
    <filename>classnjli_1_1_label_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aca9cde97af074f14c0b756b92512dc77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>af66cd2c3ef0599eca0142b10ef27ee45</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a029c3f5b452b314daa6ba9a83c8e24bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a2746b3ec412580779fa870064c85b5c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aa84d58e282f779799cd4ff267dcd863d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aeed076fc9e1b6c8f176b7ee76996e436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a8c463af751905b0e3fb39c1d4bee659f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a0aa62cdece6dae7fd10c24a1c579b9d4</anchor>
      <arglist>(LabelHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a8c8389ff706e48a2821c223631dcf787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>af2258d3ed85f7f284091f4baca9fb4c0</anchor>
      <arglist>(const LabelHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aa6d557b5aa80fe1009e157e57079f0ea</anchor>
      <arglist>(LabelHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>ab94c5ce938516b0200dec857856f682d</anchor>
      <arglist>(LabelHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a89d3f063cdcb6011b4481494f3c5b688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>ac3059bbfa1a2f136e1a8ae133a000a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a0da59c21d965f7a4e8447e1a75952b90</anchor>
      <arglist>(const LabelHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a857ee8ed1e618b0bed1cfe4d9fd222f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a279c470e18c7979e92e876dc568255b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LabelHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aa3b3a5d6400ac2824faa4b6dab99036d</anchor>
      <arglist>(const LabelHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LevelOfDetail</name>
    <filename>classnjli_1_1_level_of_detail.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a64a365f6419a0a423d9b9e62abe2e73f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a664f4e2718da6c5d978c024dd47cde0c</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a4d24889ff82592e4e8380bb88979abe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a42a92c8b335c9a095c9bba2ac65ae096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a7e9063c16ffbed9557a7b8b6ceb6907e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>ad9cb0ada949172ee263fd2595e69050e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>aa4c26e4ed3fdfaa1616608313b5a7e1e</anchor>
      <arglist>(LevelOfDetail **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a7d97c0c05c3da1ac7ea51a61221236f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a681e154af6b101c3b4d72e111b62c0c2</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a5101017849caba5a224ea66d49c42d94</anchor>
      <arglist>(const LevelOfDetail &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a04234808afc3917f5156f0e28156cd6e</anchor>
      <arglist>(const LevelOfDetail &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a67c8d1f14a7136c3025ad6b2b6e079e5</anchor>
      <arglist>(LevelOfDetail *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>ab5a20557590f53b2b4e5127bba454756</anchor>
      <arglist>(LevelOfDetail &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a6170cf0c8c25bb8875fcbfa1a4a9c482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a875c55721aad141c9db3da41bc600be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a272925da421ba01f41ed17c013d30d96</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a145baec0397df5a7f98ed1a7cf202c7a</anchor>
      <arglist>(const LevelOfDetail &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a2979efde7c79a0e8fa14bdd386ca071c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>ab2931612ba7b2ac208f61d3929474cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LevelOfDetail &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a483238a8476dd019ba58d6d67b0fb930</anchor>
      <arglist>(const LevelOfDetail &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LevelOfDetailBuilder</name>
    <filename>classnjli_1_1_level_of_detail_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a01a281d12251dcc1836e7aa53c63a184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a8661f91d87b8074d74ed765080f76295</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>add07f2abd52424e6e05dfc8fdd52490d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a7da675e6e3e02ed64f06fc3b10a02bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>abb0bd4579bad27f37a5abdf8fc80de65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a3cced075d7f40009628c0cfcf89025bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a6998613e57a926da4f2783c3f0171314</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a243f45dbd0049a04b6e33c66f2e6b0a5</anchor>
      <arglist>(LevelOfDetailBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a2fb82ea91a1711399cb2e8b3fd4d6e52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a867b41522d70287fd9e4d6a70faec089</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a03a7b900c55ddf6f848327862086b1ca</anchor>
      <arglist>(LevelOfDetailBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>ad32dc940ece145847296750aadb84c17</anchor>
      <arglist>(LevelOfDetailBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a28f384995111c37c91ceb4baac0802f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a4fb459d11fe33ecec7adffd9bfee1085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a7197fcd03fa97a397ae99f7cc4c7cd94</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a86c19f728a855df683f126e2662e5841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a8760fbdf5dfc6f452157facdbf002906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LevelOfDetailBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>ab986feed943b5fbed694f19031c38518</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Light</name>
    <filename>classnjli_1_1_light.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aac5ab091f756a79fcfa2f82f5797269b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a1b7fdd6fab1109728cd29f0a6b38e725</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a48081f261a7a5dafbcb31af48d31709c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a567dec99e2751ff5341a76ebe7c469cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a1d914ccd2f4e31c1b64c076582d68b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a28f49f116a6b6efdf4c98d8f85bfb77c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a738eb33ea8c6e9c9083bd7a198b46c96</anchor>
      <arglist>(Light **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a278a6b2f74d72947af46d2d4ddc62dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>acc444163996c00eff00a7595f425284f</anchor>
      <arglist>(const LightBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a582d2f8e59bd6a411ae040b374afae36</anchor>
      <arglist>(const Light &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a806c1cca7149b59810b9ab2525d95463</anchor>
      <arglist>(const Light &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a9d1bd6fda9c37c5222a3ad0ab60f6d0b</anchor>
      <arglist>(Light *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>ad165321d06a04e601966d0511fb2dd7b</anchor>
      <arglist>(Light &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a43fffd7ee2a07673094a0da553264333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>ae0e78a73e2bef4d00deda48fe5cd08e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a2edf4d7c92dea0c8f1525b86967a0784</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aee08c07de527987355ec28780054bf18</anchor>
      <arglist>(const Light &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a1b79e3b111727895a7eadf347c5b1d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aa903929d78e35979cd0299ba4f0d9a4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Light &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a76509ef418063195bec2d16de29bc949</anchor>
      <arglist>(const Light &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LightBuilder</name>
    <filename>classnjli_1_1_light_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>aac7356fd941ae2c09c286ad534d7a88f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ad5669753eb53ac4f59f9ae3aa3a06249</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a67454d2de47dfd4ca24a1357169ff1d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a13ff8b9c4a060a1afcf955b776ae3496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>abebb7f09636b19f0271b14d1aab7e941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a46cbd5c3520ba7388d658a1fa024788a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a39287e2334a24111e0ceb040803e5fdb</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>abdabc133fa77a65fe39e9968e93c297f</anchor>
      <arglist>(LightBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>acd484cc49a3d43a2b42cb818acfd5b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ade460057e3f1484231974184b1738633</anchor>
      <arglist>(const LightBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a9b3eed4936bc492faa55c25ae0742283</anchor>
      <arglist>(LightBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ab5995b29573e59a799cb617f2891942c</anchor>
      <arglist>(LightBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a8dac9bbf039e7a7e5c60c40e822d93bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a22fba014290a67469f193aa3ceb70f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a21e8114a3d6b9a5b82f2e779037c51ae</anchor>
      <arglist>(const LightBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>adb76c72fb81a5069825256062fc50a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>aea5be15bea6b526c1deb50ea09e639d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LightBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a00509ba9b51b955f4d34482735ed942d</anchor>
      <arglist>(const LightBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::WorldDebugDrawer::Line</name>
    <filename>structnjli_1_1_world_debug_drawer_1_1_line.html</filename>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>pointA</name>
      <anchorfile>structnjli_1_1_world_debug_drawer_1_1_line.html</anchorfile>
      <anchor>a482dcfd60272237572776f19ee9bb981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>pointB</name>
      <anchorfile>structnjli_1_1_world_debug_drawer_1_1_line.html</anchorfile>
      <anchor>ae12b013ac2e2543f60bd18395dc1f64c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Material</name>
    <filename>classnjli_1_1_material.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a1c74cc631aa78569c35b0e4113f1c4e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8d1519f3e480e5e0e700434703268152</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a41286c39522c0d8f98774a9e36e08dc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a67ef5bc2aa89291e5c3e6516c60bd56e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8a22e2dc6e6cd6e6713b0ed7c404366b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a4f8174dcc64028136a2d493055367f40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a4533466ee12731b0b904f2a2c851c7d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aaa9aa4fb6938991a0915f095ddc36881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a59c17d953cd93d6bde3be00669db5b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a22e54e48e6b4d0e028be95a4a2fff028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aa72237beeace57fc34ff62a197d636ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5820f81386e8a5d891e07ca76f5a6232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a4404ff3e686f2b2977679550d0790b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5fab4a263777ae1dbef47d6f4f86c432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac8523f4083e0e7c1e4108c970f3dd955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9098bbd3e2beeccb0baeac2de6d5f16c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aece9965031ec1fca47aead32933a1a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a67012f8b08e024b6b65fae6780143fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a17cfa75e21214a11bc071109b309073b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a905526db4799657379a363d94900691c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a99e01cc720b6400fe337d55fb2f3c4c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a88b23a7dc24dae378fa6e345a8600e19</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getShininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aca6c8319ef98b3f64d8601126f9b560d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFresnelExponenet</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8f725eb3d8e586c3f8e02c51cfd8bb42</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFresnelExponenet</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3ae4504d9f31e1260b69a84b27da2bcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a1082fa0725cabeb9b824d9ced36e2c69</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTransparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab894d17ad4d2c3bcd27f9293f6f26109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>adeafc9c196919b3936e9a4cac979b8b5</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af453e9c4df89eaba73b2a6deecc57aa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a637971ef59e44b54f49522882f6b1c67</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a57bcff54b39190263b95d07caa9f202c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>adfa835da63d259e393f16edf5e7e589a</anchor>
      <arglist>(const njliTransparencyMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliTransparencyMode</type>
      <name>getTransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aa202d5036efc3c859557bff9351029d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a2ddcfec45012339d0b771c08e76985c0</anchor>
      <arglist>(const njliCullMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliCullMode</type>
      <name>getCullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aea930c71a44dc1ddf1888ab88ccffc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a54c2267f7157687a642f411245590e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af4940196e110324653159242de1daafc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac742f6587ddd97cf6472580922703dc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae8af459ffd643bcc1afc0d5adfa54308</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad8141104f58c570b0e2be3c98b33c544</anchor>
      <arglist>(Material **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a083f354689a38cee64de39ee64d35075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a34ed25d570cab96d0ffa097e48fc3436</anchor>
      <arglist>(const MaterialBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab1e77a75b9771ca05d9b2818eb23bf35</anchor>
      <arglist>(const Material &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a0ebced3a512a4dd15da9331faeebd376</anchor>
      <arglist>(const Material &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>adabdbcd1183250072cdaee47700d2027</anchor>
      <arglist>(Material *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a009157f6bf4a21be8a0cc1182ed84900</anchor>
      <arglist>(Material &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a37bfcf8b884421f68968a03f0807f8bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a95266db699eaabe4754d72f2c577deeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9f36e174cfc3bc09e05d93ca343d625c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab631f786b9f19b8fb9415f221fc57bb8</anchor>
      <arglist>(const Material &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a4855e2ed843f6aef0db9148ff954a288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5be3745f04f35891e502f9421ffcd163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Material &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3998e4e2d69de1774c0f9e9bf6fa4b14</anchor>
      <arglist>(const Material &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8f7886965c92fb212d58342f77055e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aca2f49d7b538a779edbf1b58573666b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad10e910fba799bdc8045470161777540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af454f737db887890ea70cb35d16f0348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a0edc0a0e9ff9784bb1d63c7ddb795913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af3b8bdf52a330ed4a0fcb5eca5bdb717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aca74a247496651560b87a4513f8efa0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8761380e9d38fc626c5b66643a3e5ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>acdd2f10804ee793308e61bf232d47f4e</anchor>
      <arglist>(ShaderProgram *shader)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unBind</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab347a82d08f8f27545915a9b6dc7e38d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad5483bb1efb4fcee9a1420e73c18d2b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Diffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9b605c885d158f6bcf3510c7bc0c8c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Ambient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab6e95c0a9083cc7836aa027e16c843f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Specular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac40bacaa57dc01a8ef74c1a346675056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Normal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae209e334a114b1a29643d4f1c3fdfada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Reflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad73e3e455a6801b7dfee1c17f4ee2664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Emission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>abf9bf481eac85f01fbed79bb520c634f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Transparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac622968e9f93c0434701ede20d11750e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Multiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>affbb378b516bf6c39df30e390f1deb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Shininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a130ba87d3c1d84af92b533f8a5048385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_FresnelExponent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5635224a80fd28c8da170225ea69102f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Transparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab1312ba0234332d75f4727851c9f5974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_LitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>afb1e5515756851ea25491828e35da57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_DoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a12bcd32fc000bb1c86c4b55b41a2bf63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTransparencyMode</type>
      <name>m_TransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a635e9141bcc8d3963deb734427f91de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliCullMode</type>
      <name>m_CullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a186c0897e4c86131c61cf81d775d6baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialBuilder</name>
    <filename>classnjli_1_1_material_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a01ad5ca209875d9fb241e51b6c51aaeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ac686c303c49c237b249c66f034134296</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a4ef20202b61944fefd4a465ba0d466a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a7ea437cd3cde0531a41afc9f6471555a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a012257cc364f7eab04d4fb99fa6a63ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ad5c7e862c0bb69962c5cfcdf616fa088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ac522d111e74a0c67f05513e862dbbaf1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a5b3db121ef8cb6d8ee51a4c7bd9d4cb6</anchor>
      <arglist>(MaterialBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a27f22cac9aa79e20bce648abc76b57ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a7b00390e5032b008276b7bfd595769fb</anchor>
      <arglist>(const MaterialBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>afcecd425d5d84d7cc7845acb1db51c13</anchor>
      <arglist>(MaterialBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a3e3d87bcfa8d9b3c6936685f52edeeb3</anchor>
      <arglist>(MaterialBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ad6c15195cfebc242f23b4d5319acf9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>abf72495ee49aa1fdd9accd45aee1fd94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a15ee94e543a5dd5c30474be74b4c221b</anchor>
      <arglist>(const MaterialBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acbf454f4aeead5d80c59474b3dcedda6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a6d1d9667f304d78e83e3a6977b617beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a3afe9c5b141f259bacc8516f9af19ecb</anchor>
      <arglist>(const MaterialBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialProperty</name>
    <filename>classnjli_1_1_material_property.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a5bbef4d51aa3d85be8b3172c96a091aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a955606826931d35be766179546ba3c1d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ac7cccf730fc5375b239061ab840e704c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a17108a2d62c3d64af7a67b4f0f5c077c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad51c2495e5b58b0be78160d6996cb01f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a157d98033ee98116ba26de61c8e7cddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8857c91bc56d1aab8b6e24df18c63c32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a252a4ebb78f314af5eeec14ebd794692</anchor>
      <arglist>(njliTextureMinificationValueType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureMinificationValueType</type>
      <name>getMinificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>acbace4981a4f6b30d94355d5cbe6afbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagnificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ac8519825cbf12f274d2cfea9d1afcc64</anchor>
      <arglist>(njliTextureMagnificationValueType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureMagnificationValueType</type>
      <name>getMagnificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a78e137baaf12887fa2943a9104969e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapS</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a373bb320a2411e19eb79b376bdace858</anchor>
      <arglist>(njliTextureWrapType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureWrapType</type>
      <name>getWrapS</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a7718122f14cba022510be2141efc247f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapT</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a085c669a1f7e6df12a6e8bcabd70a176</anchor>
      <arglist>(njliTextureWrapType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureWrapType</type>
      <name>getWrapT</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a127c05447adf5cf456f587a6619a9821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad96612e3ed0bd7e7ee02007e4a7e6449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ac710f73d560118360ab73f5bf87cf016</anchor>
      <arglist>(const Image &amp;img)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aff66a14be2c9117f8620cd2bab88f9b5</anchor>
      <arglist>(const Image &amp;negativeX, const Image &amp;negativeY, const Image &amp;negativeZ, const Image &amp;positiveX, const Image &amp;positiveY, const Image &amp;positiveZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a54a76d538f19e7b4bdd29b1106ca92e1</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a26086f9fabd9f206fc89ef9e4d1ab351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adb0972e7a2a81e22c59252d609ed4134</anchor>
      <arglist>(const Image &amp;img, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>abb3e55b3f32ba67f6e52b3a1af5672be</anchor>
      <arglist>(const Image &amp;img, njliTextureCubeSides cubeSide, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8c9ed69e9d9965c8aaaa8e5a79ce1d3f</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getTextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aeded4dffbe587200cb9f39fc44a06d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a94fe2511b5bb027e1ce6960b5e11f5e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a007ed0ad3dec204e83a72fd2c2486b9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextureCube</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a5690a77eb052fe75e8779628f2d4e103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTexture2D</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a2f5002c6cd1ca1817c2e8dac21f715e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a7fd2c78c023f4cd26653f2ebbc6cf85e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a5df96e7c7901cf451e96b49510abff2f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a99beda4f01a76b2c84b09272461df7cf</anchor>
      <arglist>(MaterialProperty **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a84015c9324b282be35bb8ee104b08cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a897d62623f37f7eed1938f5059cc6fe8</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1014419023f491d835e1976b21a6b66d</anchor>
      <arglist>(const MaterialProperty &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a387962f3905d4c56e0cf058056f89e8e</anchor>
      <arglist>(const MaterialProperty &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>add38523dac44032042b6f021683a830d</anchor>
      <arglist>(MaterialProperty *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aed068bab92056dd450e6a8f00e30b84e</anchor>
      <arglist>(MaterialProperty &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a3c185a70184213ed0939ad6e0d0a1c9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initReferences</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ab7dda6520875a8b2cb3f255fb492a8e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6811e536c0304699a61cfc1024f2ba8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adb5e4547cc2288c3a2eb3ff527550b7e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a7c76ca284edd6d7ac17b90ec0f0367f1</anchor>
      <arglist>(const MaterialProperty &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae5c6b3221d3eba4205c5301d440c00ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a23a538a0be4b131939aecfa1aa1cb5e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a4282b8d8bcefbadcc8cad8ab756d97d6</anchor>
      <arglist>(const MaterialProperty &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u8</type>
      <name>getTextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a51db57437c970cd9a39a98fabe761e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1ec8ff2f8e2d6289361d1fe9c8838807</anchor>
      <arglist>(u8 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad19dae9ce7b39bc337be6fcaedb3c9fb</anchor>
      <arglist>(ShaderProgram *program, const char *propertyName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unBind</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a0d2c0e7d42c783cfc92777fa73ae7abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadTexImage2DInternal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9bf91c2260c96d60ee8ef7eaa491e8de</anchor>
      <arglist>(const Image &amp;img, s32 target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reLoadTexImage2DInternal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad04b3469ee0c493240c55e1294c71727</anchor>
      <arglist>(const Image &amp;img, s32 target, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadProperties</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a51eb43000fd8dac0bd677effe207e5d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1463ef92f641fc8129409d96fe2ffcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>njliLoadGPUType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_NONE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab2312f8edb2846647ff841d4a7813c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D_EMPTY</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba19facd571e661394fd10c4adc26e2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba84cee2de1a9c1bff7902327c2871a4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_CUBE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba705566d6faa4dc00bf60956035329286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_FBO</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bac5507e15f557a30a23a193db80d35b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_MAX</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab57e4f81335fbb5b1af57ef0dde78a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9952072ad753a049bf653dc55a7089b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a2279e0f7abdce078f62c121520cac369</anchor>
      <arglist>(const Image &amp;img)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa9a78f32c94e7d5e822dd328eb954ec9</anchor>
      <arglist>(const Image &amp;negativeX, const Image &amp;negativeY, const Image &amp;negativeZ, const Image &amp;positiveX, const Image &amp;positiveY, const Image &amp;positiveZ)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a0e2f5b5c25f4b11f282905cd4492c5f8</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>addReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8a5e174e424f56e516f2798876e02802</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>removeReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8b5fbdee5b942699cce02edcad013faa</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>hasReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a5dccabe38b97e49d590d21aea3ea4cca</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureID</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a54b3b51f4b0d736d316b63777ccda316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureMinificationValueType</type>
      <name>m_minVal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a13b42d54787929d981050557ac4748a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureMagnificationValueType</type>
      <name>m_magVal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a99668eb548352e3b136eff0d78bdaf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureWrapType</type>
      <name>m_sWrap</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a18842aef4fce7ec9871bcf206fc5d517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureWrapType</type>
      <name>m_tWrap</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1db9e13afa4a288eaf901c7e6726d36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_textureType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6561cf1412426aa7a0b40590ad221169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_TextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aeab9a246acdf7a58f77381addbe25af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8</type>
      <name>m_TextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>acbc4746b18b182d07313eeab1fb0a62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Width</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8e0a5e6f9f07c09905cc9bdef219486b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Height</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a51e2a105287561c4417234e5a804fa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_NumberOfComponents</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa65bd34c711ad4a992d9c0cca0408502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_2DUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a71f667dc1a2ab962ed1d014b223c6c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_CubeUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a48374b6e4a3ec749e21499e76633606e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_is2DUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6ca2655337c3335aa3188e4b0a202d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_isCubeUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a24142b6247dd361b43102f83d2d8e36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractFrameBufferObject *</type>
      <name>m_AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6d09f742e5c768571d6a240648cfc488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_hasOpacity</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adda1b2988da4117aefb2d54ff735c13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliLoadGPUType</type>
      <name>m_njliLoadGPUType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a3ad0ce3f3e483eff600e95737228c218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractFrameBufferObject *</type>
      <name>m_loadGPU_fbo</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad46878315683b289618fc02ade373381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Image **</type>
      <name>m_loadGPU_images</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1e9f5824628544430cbe914ca7e6b605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::bitset&lt; 16 &gt;</type>
      <name>s_TextureIDReferences</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a3ce7f792c0a4ab622a118832075df57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialPropertyBuilder</name>
    <filename>classnjli_1_1_material_property_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a869810583a75318968556e0dbcb3e2a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a40c2e53598a28eb07b9323f6930b20bb</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>aded8dbc064a5d6c5e46c35267b7f7759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a13c55e17b54fbd3cb2c5dc109d987869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a1d0bb98c6fc41224c277cc7775c5e5f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a24e387fda55055fe7dea9c565b630427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>af9e0c7a2a0cc5f6cdfcf3a77258a20ee</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>af08dfaeaeaa68453e43bfedd87dbad73</anchor>
      <arglist>(MaterialPropertyBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a11d674c1a7c0385a9031a96375bd000e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>aacf357e2d4b076cfe01d1a8eb4433ae7</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>ad12c13ea01ec4ecbdd65f61dc4b82b24</anchor>
      <arglist>(MaterialPropertyBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a6805ae6915e4611d011007fdbb4bde98</anchor>
      <arglist>(MaterialPropertyBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a7216b75558c4e19b72357508fc229ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a3f4b376899bfc9219577beef4cdde52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a6d852e85c5d9534c2f06807d1d452c0a</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>af946f0a4dd30181c0bfc54926473d383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a31bf11faba1c4d10f938765107826847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialPropertyBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>abd77d2da6a4ac4b936699000e22385bf</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NJLIGameEngine</name>
    <filename>classnjli_1_1_n_j_l_i_game_engine.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PlatformID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_iOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6cf2daab29241b0e763ff97c8f4f53e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Android</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6c558271f40073f76d00143d7cb6ff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Emscripten</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda4aea7a4dcf787eccd5eeb27f18a4353f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_MacOSx</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda0957148df4fb1940266bf4153d5cfa48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ad9ca8b021314d5f3812f5bd277470986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isANDROID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ae2b3c8930bdffde35608ef94ed72f688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEMSCRIPTEN</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>aed23ea1e81647296bc7cff19e5e986da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMACOSX</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a3eb8575179a63e089ae20d5fef1dad6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>aa9de685275da0e8d405253b62d52fa87</anchor>
      <arglist>(const char *deviceName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a09ac78d3e3db23e7e9a8f0ea36558037</anchor>
      <arglist>(int x, int y, int width, int height, int orientation, const char *deviceName, bool initLua=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resize</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a9a46090f258b37aa3366dc3c749639bc</anchor>
      <arglist>(int x, int y, int width, int height, int orientation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a3c198f8a4ad9aa3a9512f401ed16a43f</anchor>
      <arglist>(float step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>af5d28c6bb63329bcbcc50dedb777adb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ab101ac14e3f46a48d7eee13579fd4ba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTouch</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a6daacdf150b4cd00499e8a5e7f0dce0a</anchor>
      <arglist>(const void *touch, const int index, const unsigned long num_touches)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTouch</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a286397796c6943651801405defe9955e</anchor>
      <arglist>(const int x, const int y, const int index, const unsigned long num_touches, float scaleFactor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearNodeTouches</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a092a27b9b488d680298d4ee9fdb14e1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>aefc591817d96206430b9f33329fc77b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>abeba98d8cdd2e183907dc7d2d60acd97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a28af74aa95a6f43f02e6417701803c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a3b38d7d6b364445d8f46af514de2d6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pauseGame</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>af4cff33cd91fa299d31f368879a09e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unpauseGame</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ad4696ad18f9046c13ff0ebf049b58dd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pauseSound</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a9f9e8b36af3ec093102e6d997468bfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unpauseSound</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ae0a880cd0b82a4f71bc2363b5b9c6fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ac875df53939431d739de50ffd869d76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ace2c0b82a5a92d00ff4eccca5ad9cad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>af7a3b76e13ca4f1e05b16784fa2a8fa7</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlatformID</type>
      <name>platformID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a84194db2322fdba0ce7942f4fbb4a345</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Node</name>
    <filename>classnjli_1_1_node.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractActionable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad4914d637fdf3394b5fac8281d887029</anchor>
      <arglist>() const </arglist>
      <docanchor file="classnjli_1_1_node" title="Lua example">ex1</docanchor>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1e8e7aa692a12206175bf64d4ccc3d15</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6ad5005460344037804f13c3c167cfb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aea2a754c4688385e8e586d17b4a78266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac81050c2cde740f62e24bdeaec85b9ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0c2e59b58203b22888ff3d944051c318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7203328d83be95f052a4e146ca3adbd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a86a7e9e1fea1e47a9baad47b6c5caca3</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a309fc0e1936efa55198813c3ff881280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a16a10ec08e52af2b11258d84a243c0bd</anchor>
      <arglist>(const btVector3 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4254472727081479bc1df40b9dc9c4f4</anchor>
      <arglist>(const btVector2 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion</type>
      <name>getRotation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a54f41fe50338318891668cc7f2498440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a81bfccbe8ff15eed2fb694c018910184</anchor>
      <arglist>(const btQuaternion &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getEulerAngles</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af5a75a53965fb97e1e75fe24b61bde01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerAngles</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a13770061dcc44d37c1f2a94eb0cdddff</anchor>
      <arglist>(const btVector3 &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>const btQuaternion &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae315bfca15d114334a9af6c4710cef17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a176cf31ddc96051576f3c2357b8c5db4</anchor>
      <arglist>(const btQuaternion &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>abae7c1a6137402c39b9972a6c1c171d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a765aaabc294a7c30171b86d22fe31a43</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a82b119a67be08f51cb55e2488abc8eb9</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getPivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a43ca48fc1daa0abfb4a1d35c4decf224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a84a2fde3b93ec048a3ccfa7a993307cf</anchor>
      <arglist>(const btTransform &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac61c06f12dc9129c1c575515343c9a5c</anchor>
      <arglist>(ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae08c22d2d4b832972e97072b4b7ae140</anchor>
      <arglist>(ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a444e78b0de3fa1072ac008331ec18457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afdab35eedbe003d7e3ff4d8a66783de8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a82033c440b48976d0341fccc5f43f304</anchor>
      <arglist>(std::vector&lt; ParticleEmitter * &gt; &amp;particleEmitters) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getParticleEmitterIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aba5b605bc3a4b40285b73ff723d0a4c0</anchor>
      <arglist>(ParticleEmitter *object) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleEmitter *</type>
      <name>getParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1faf5086ed044e77681815a833c31681</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleEmitter *</type>
      <name>getParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a617130c2be0b57ecbe97ff14243ad599</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa5c68d703bcaaa1939985d550e9e6d71</anchor>
      <arglist>(PhysicsBody *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab7fb4316393dd9eaf00ac7caf65ef339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsBody *</type>
      <name>getPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a54722d104f4e4b81908ab21369aba611</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsBody *</type>
      <name>getPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5d508b3b342474e82e1cd7b67ad10967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a30226ed8d4d126bae2e1cfb6b51f4fdc</anchor>
      <arglist>(Light *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a08a26531ce5304da2b57592c8c2ba5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Light *</type>
      <name>getLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a523f55a736262d9353eb923744581bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Light *</type>
      <name>getLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4d0c32f3731e76894ee68d674fac601b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afe766628db46e0e6ea0fb8c8d7abf6dd</anchor>
      <arglist>(Camera *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a48c8ac87c02260fe2cc64db3bb7f208b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a38b2ef3ea4521c277f978c89541b19c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa2312d627addb3918745f6557cae4522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab11a69ae1260d7add0ed7bb4ebdecc3c</anchor>
      <arglist>(Geometry *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aecc02091c34df61214802b8da38031a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>getGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae1e1e86b29cb9c86558ed60a3818f17c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac2eb434ca2e34f7a43bf01f0521912f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aea3711505f1564a71366e7057b4fdba2</anchor>
      <arglist>(PhysicsField *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a569a6ccc606bcc819c0f6a0be830a23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsField *</type>
      <name>getPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a43df0da398c744dc9db4dbd4e1168ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsField *</type>
      <name>getPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a33b77966dc1cfb7d6fcad633b192a2e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a60e79f386f3d1e3843050a843b4c8a82</anchor>
      <arglist>(Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac0a3bb1dd9fb0ccd2f53ff426d4f9309</anchor>
      <arglist>(Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllSounds</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8b1a04170a07e378a7972dcc8f7671ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSounds</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a24f3717243c41130b7a4126dfa660550</anchor>
      <arglist>(std::vector&lt; Sound * &gt; &amp;sounds) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getSoundIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a593f1bbbd5d0acf7937d044576cbe466</anchor>
      <arglist>(Sound *object) const </arglist>
    </member>
    <member kind="function">
      <type>Sound *</type>
      <name>getSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8678ec9108e16c9e1714419dd75a05a0</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Sound *</type>
      <name>getSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acec8a4a7475eb660152d816d93e87f32</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6ce7d73fab5d4d42fe3be0edb00898f0</anchor>
      <arglist>(f32 opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa46eb060cb1055d933b0b0908b8c416d</anchor>
      <arglist>(const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afac33e777f9b0c7ad816e646258750af</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2ff7b1e0ec98a5ca99fb2633a7a936aa</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2b0c2ca06d82805cff198edab42545bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a06d920bbc04bae1c42e0d1c5efc8600b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acf8e0b415e5b6e1c753ec9f0de5ec61d</anchor>
      <arglist>(Camera *camera=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a53575c84555fe0884f9c8a1db69415f5</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ade4a67c87d72506d3d4c0b79995bca8d</anchor>
      <arglist>(Camera *camera) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a62df3bc99a3cb060be7532b6c265eb4b</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>NodeStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a68b899562f5f138b1e70fd95d61486c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a213b78ccec77f648454aa02a8dd39a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab3c28554c6727257099723089739f1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTouched</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a444d6387a9f5cf36b7895197159f373b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableTouched</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3a62a2eed74823ed7e420beaa16f8c6f</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7e3c07165fdb50af5cef3e3bd7e4cc3d</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acc1a4f5b3922c3edce73b0ace29547b6</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, btAlignedObjectArray&lt; PhysicsRayContact * &gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6c64865ecf41cecc984fed1a735f449d</anchor>
      <arglist>(const btVector2 &amp;screenPosition, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a92c032622388ec26e269408c4a74e9bb</anchor>
      <arglist>(const btVector2 &amp;screenPosition, btAlignedObjectArray&lt; PhysicsRayContact * &gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a39032af457e76ea7121332a4d3ce63a3</anchor>
      <arglist>(Action *action, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a66eab09b1b7abdf92653ba60dcad6e46</anchor>
      <arglist>(Action *action, const char *key, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a555087d31d3756bdae7dd85f1042c145</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0e1da463c8453dc1086a473cff4f9830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aea392f65f7c7235f969c8d53e0f3c7ca</anchor>
      <arglist>(btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad5e398b5c8dfeaf81fd43c919da1cfa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acfc876942f3beb51c6306b4282e7ac4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>abf6240552e3f9398a22f61d07c6a487a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adb9348e3765aacbabc94297e39a0ce16</anchor>
      <arglist>(Node *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac2ea52a338582bd41fef29230107049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeFromParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a100119ca086dab1c33416fad1d885e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>findChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>abb677c663a2269839eda04ede2bde6c5</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>findChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6afb4066b8c996093b15b5049e77c4a6</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4e6edeb57c0ab10f0dff3200395dd5c1</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a10b260b028d91fddcfa26f9244fd9a76</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9deee36059cf094dcabab36b55163eec</anchor>
      <arglist>(std::vector&lt; Node * &gt; &amp;children) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getChildNodeIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8b7ae2c484e4fd9b0d0089996f281b82</anchor>
      <arglist>(Node *object) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af20aecf80b70e0e403281feb503a8b40</anchor>
      <arglist>(Node *object) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5683ba0e2e2a924a1fd22b7592e84765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a616d8f89896918a2bc402f3c0d06aecd</anchor>
      <arglist>(Node *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae82a40147b291452e191899dbad90a42</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4901fc620d589b160ac7017ed671a1e1</anchor>
      <arglist>(Node *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac78a32efc2fd1e3b57a5cd036a26350c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>numberOfChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae58f362c2d3e378009d37890ddd1ce28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9cfbf971553e8c11548701deaa28a4a5</anchor>
      <arglist>(Node *oldChild, Node *newChild)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0c2b80c77f538fb6f291be62ed734740</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0201a5cc1e01fcb21836950a75639dce</anchor>
      <arglist>(Node **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7d274b68605677f77b74b73fbfc7927c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab7e652e283d50906ed508be1aa790fef</anchor>
      <arglist>(const NodeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a17a9bfec826251f6b0f75e9f33b58f16</anchor>
      <arglist>(const Node &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4223f78840ed9ca8e08d817d0c1ddf79</anchor>
      <arglist>(const Node &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5abc283c812d45404556c6e5264b6aff</anchor>
      <arglist>(Node *object, bool destroyChildrenNodes=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a937bb1ad746539878b3bfdd7c1d36f1d</anchor>
      <arglist>(Node &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a547927299a5d46632a0b675a9048e607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a91aae9499658e92fc326ea9f9e1678f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5d925e98c91ec97042a0c91e9602edff</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a97a94f2f5f107c86d284238cc95602bf</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8b08e4f3293dea50b2cf7ea54d217fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a82f3a80494a7b7d90f22dfa50ef2a3a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8571c68a49a88036bc79411afa172626</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aafd87adc70ed57be9d7f045a1be3412c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canDelete</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae9289bb4088bd17a4d68fbcee1c227a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3eb1db3aa2681e4acaf3e9e95fd01e69</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyPhysicsBodyTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>affbb98fea9966349be743de38256e355</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab3dd16a4322896c94bc1a398e3466163</anchor>
      <arglist>(s64 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8201088e1ae59ed674762efca1556138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0a07c5e7c436ed50072c78f4e7ed6d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>updateActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac8087d2a9f884f212d80d9af9e0a8bd4</anchor>
      <arglist>(void *_ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PhysicsConstraint * &gt;</type>
      <name>m_PhysicsConstraintList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adf6b3dcaa5073b5f7747fb6e4f3b768f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ParticleEmitter * &gt;</type>
      <name>m_ParticleEmitterList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a61a2eea1ed1dc91b1ade45a7a008d59d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Sound * &gt;</type>
      <name>m_SoundList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9f388091d2645c59778ff4a9b76aa233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsBody *</type>
      <name>m_PhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acb3dd8658ad0f052d0afff42c5257367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Light *</type>
      <name>m_Light</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3bd3dfc6fc7857a16b591198fc9de860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a943cf43bef4f74a93f967842f9e8a348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Geometry *</type>
      <name>m_Geometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6f79b7a2b199147e83dfc3460c4b7481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsField *</type>
      <name>m_PhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af9deeb8e605b08425cf8076a51b4936a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Opacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a367e50aad4d7657d62f0ec39115a70e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_RenderCategory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab01d7fb7fdf191957e526d32ddf7a6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeStateMachine *</type>
      <name>m_NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab74c5f3135cff558ae020a1bcc0339fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_Children</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5ae2628d22bd6b10a2a4466337d6ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_pParent</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab91a76d7fdcb69284175eaf51ae5694b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>m_GeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae1aaf55ff1ea611b3d4d1adf0fcbf1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isTouchedByRay</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac89e94627bb4bb5e418f15f36f936245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_ApplyPhysicsShape</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2726038bdf3f819598ca659e80f9c54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Transform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8ec7076cfda5578b99c9f582a0beb4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btQuaternion *</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a443a5fd1ec25ed12ac6bd0c219a70201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Scale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab0b2ca986d3881d4ccd5404097b6c0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Pivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa2f2d5836c6cf6c99937e50bf2603c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a726223aef7972f289c4a01ccfd23d5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aae6efa51fde36cf2c0759009ba7b19c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeBuilder</name>
    <filename>classnjli_1_1_node_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ab883b51f9ad11d11fd57bec5f641b030</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>af3551f8429e9c379d4ea2a478d2ff58b</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>aeb11cb503eb87b34d9ab5c8859c5d539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a752a46fbe379152dc461f24f7562267b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ab6fce4da9bb3b0c52ca7057743a6e8ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a40ec97d8c093e44911fea5fe8d9259d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a30d717768cad6be8a229acfc93c28471</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ad829c06004d4a33b89b6ae92393290b3</anchor>
      <arglist>(NodeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ab7e79c1aa6faae9f9c427ce0219c4339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a5f919e567e8dfdb852f9a4801793c53c</anchor>
      <arglist>(const NodeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a9bf50f84befacb72f2aab5377ff6b326</anchor>
      <arglist>(NodeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a205bbf3d7521a20a219d4a66900d5cfd</anchor>
      <arglist>(NodeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a8566b7065de61124451feb1b87951ce4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ab75203c2f9b4fd4627f09ae95850ad44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a542b69de918f40fbab7d6033ed8bccf7</anchor>
      <arglist>(const NodeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a6f4f999e27919f671c9c68c6dd57f46f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a5ed9319826ce1d5f4b0395617b68c377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a4f69c49ecad99c6e3ff898ea51f3418b</anchor>
      <arglist>(const NodeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeState</name>
    <filename>classnjli_1_1_node_state.html</filename>
    <base>AbstractState&lt; Node &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ab17b1b7ec5dc20cbed5400925a10ef60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>aa76688814f4ae0d5397072d0fec32009</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a05ffad3621567e0bab14384d2c40c358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ad10d688df4f28d7eff85ef1f876a2dc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ab0a526f3c0d0166dbdd6bf9e8037b7cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a626bdd39e02dcac4d9d5826868bb88bd</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ac29294f7769b72afcff4950d0b583ee1</anchor>
      <arglist>(Node *node, f32 timestep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>acf994009b146f216ab61ec5ee4e9f48a</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a451d3e30bd27bae262fd43b5738982cc</anchor>
      <arglist>(Node *node, const Telegram &amp;telegram) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a5239f69d1a31bce640fe838e15e638f0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a627f9b972ecbbd7281a9d9c19f73a329</anchor>
      <arglist>(NodeState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a0ce483c84524c5b0af561a21a60847bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a503725bd4bff70892ee8fd7965e80b6c</anchor>
      <arglist>(const NodeStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a24f7ff092c6e8c60cb728c644e5eb5f0</anchor>
      <arglist>(const NodeState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a7e8b70d1ad7e848b15b3b27a43062a6f</anchor>
      <arglist>(const NodeState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ac9d5b43ee2e39a9a87a05a1d41212f81</anchor>
      <arglist>(NodeState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a9ddc06a5edfc2dd557fac26b6f6ab35a</anchor>
      <arglist>(NodeState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a7218fc07b81198cc8375db8c2fa1ef09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a1ad92560b4057809dcf0a658d576cd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a1cd1d39f5b5e14e5466d4bcb75adc568</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a102adf95d05a404dc6b564ea7a18c723</anchor>
      <arglist>(const NodeState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a30ad1be81dbbe9614a951859c319447b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>aef2b6e90d0ae0a7c5b1986fca7cf36a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a3787662990c9f26ea143b8773f68f4f1</anchor>
      <arglist>(const NodeState &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateBuilder</name>
    <filename>classnjli_1_1_node_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a8ff7fe997524ba6077e8beda160d23b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ab8a6173937822999d4556ecb2affd9d9</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a8ef151ebefee26f21271865a48352928</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>adf69b2d7de972506f1cdebd897c755cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a04367ec94347d95926db3726f7305ac8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a59b9cee72bdcf663ca55a3cec1a90012</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a671dbb6cea1828e66eb8d3a3da9c7866</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a0e332888d592089ea41f04a344359d9f</anchor>
      <arglist>(NodeStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ac9838ed2c0b45246eb73cae1d34511d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a4c7d8dcd9d32b2ac523ba25a357aaad2</anchor>
      <arglist>(const NodeStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ab19ad974256fa4305a8dfa434adcbc97</anchor>
      <arglist>(NodeStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>aa07c78ce51f4aa92ce3c812fe5c5397d</anchor>
      <arglist>(NodeStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ae1201f551350e5e2bbb4dba30a2a0e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a7e43b6eebf0448e71cae5a4112d15082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>aa5bb9e667cc9f77e4c947ae1bede3c18</anchor>
      <arglist>(const NodeStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ad972d6a38875b7ad117fdd38d38c80d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>acdc3d0f34afa8420e17b1d5d08739a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>afac4979e5aec767db399cf684fcdd72e</anchor>
      <arglist>(const NodeStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateMachine</name>
    <filename>classnjli_1_1_node_state_machine.html</filename>
    <base>AbstractStateMachine&lt; Node &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a63986c0442936d5195d080f150b7b76e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a3cb9305953b2efcfbf41b3547d282a5e</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a88c3b2f939524a16cfc11080075811c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a81ff35831dabfe9dd4bf8b23406bfef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ab7499c81a03853208ab8027bedaa47b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a72e2a43030f73c5bd56b1e5195bf3efa</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>abfc6574f80db8b8e52a59fc41a425979</anchor>
      <arglist>(NodeStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a9ba95a9dcdc381358d3a596581aa2e81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>adcf79af8c39d657c4c9eb3780e06d942</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ada25cdf346ebe8edc1d42fa7e9ab5c3f</anchor>
      <arglist>(const NodeStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a33b6255ba244c93707fb49fe97b01ca3</anchor>
      <arglist>(const NodeStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a8a51798d9ab15c25841a7b83c503b6f7</anchor>
      <arglist>(NodeStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a5577f34d7f7be3dbb1199434639fd4b3</anchor>
      <arglist>(NodeStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a2d6a1098c5b3dc89baa3d8261548491c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a4b3f0fdd16f333096457a4c149e05a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a189477bb794538aa3c6fb1acd30cb643</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ae70ef8a7140aeebc2e9d6a0ac5c5176f</anchor>
      <arglist>(const NodeStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a42407b76ce190e23fe72d76fda485e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>aec7ef5d968413ba0e0fa8b216ef75bc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a24014c78cdd6c9cca50bcf7fec9db5dd</anchor>
      <arglist>(const NodeStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateMachineBuilder</name>
    <filename>classnjli_1_1_node_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>af93727cdd63ee542a767fc35d8a5f182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ab3fc74e109418f697b8bd37bad1cade8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ae78e85187390ac876baaf63709989b28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>af1ca77d254348bccaa2e81b0a0ec6550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a93aeedd2f2de88bcd541823d12a9c817</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a750d2e874fa14e144f8a328700eabdf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ae8df565d4b6b2a5296ac3c86f0548316</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ac334d9ee1038c1bdfc0711b9b95c77de</anchor>
      <arglist>(NodeStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a7406c068a84551180b2ea8aaf1ac5ef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a8e656bc85563ed9abc8e0d72cfe85570</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a87bdf417111ea059cd3ef0df3f9ced3f</anchor>
      <arglist>(NodeStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a48d484b40b00bc4336eb9661802192f0</anchor>
      <arglist>(NodeStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>aae57b6cec1969ea7ebe371f4275e95f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a90fbd3f716fa6adfceeb1e71adf75026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a918bae0356a70a1c815ee00f7c4589a2</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a87fab3b6587a3aa00408b655b65d64da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a24e459078dfd6483185b2f0b7bfb8a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a31fb4a4695bb3f109ffacc1d1aedbe62</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::OcclusionBuffer</name>
    <filename>structnjli_1_1_occlusion_buffer.html</filename>
    <class kind="struct">njli::OcclusionBuffer::QueryOCL</class>
    <class kind="struct">njli::OcclusionBuffer::WriteOCL</class>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a170bb1b85f0c4fb657937ef350ddfa84</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcclusionBuffer</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>adc6f298fe68f57412b3e65e0e6913e08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a931f89dd74da1dab476ec4a7ab4e3fe7</anchor>
      <arglist>(s32 w, s32 h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>abc49c9937ac6b244543ceaeda5fadeb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a8d4767aec8d1f2415643f661c146c9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>transform</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a30511465775b6465cff5f6009fe02ebd</anchor>
      <arglist>(const btVector3 &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>draw</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a135f9a5caf62f225a3777c34b915dd90</anchor>
      <arglist>(const btVector4 &amp;a, const btVector4 &amp;b, const btVector4 &amp;c, const btScalar minarea)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipDraw</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>ab31154dadf4a0d72674e0fa381fccf40</anchor>
      <arglist>(const btVector4 *p, btScalar minarea)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a4d7e112ac0b84a59a44b167f90098275</anchor>
      <arglist>(const btVector3 &amp;a, const btVector3 &amp;b, const btVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>ad964dc40d8638b46e7241617af9b4fc2</anchor>
      <arglist>(const btVector3 &amp;a, const btVector3 &amp;b, const btVector3 &amp;c, const btVector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a731287246bbbe3593a76c92d1ab47b44</anchor>
      <arglist>(const btVector3 &amp;c, const btVector3 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a965ff058968e517244baba6594d47c8c</anchor>
      <arglist>(const btVector3 &amp;occluderInnerBoxCollisionShapeHalfExtent, const btTransform &amp;collisionObjectWorldTransform)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>queryOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a2854e6d1a4cd88e7c7a2d7bb3aa5352a</anchor>
      <arglist>(const btVector3 &amp;a, const btVector3 &amp;b, const btVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>queryOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a8aef5d2db01a73bc492f394f31ff53f5</anchor>
      <arglist>(const btVector3 &amp;a, const btVector3 &amp;b, const btVector3 &amp;c, const btVector3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>queryOccluder</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a6d75072407aab547560fb4118d4fcaf6</anchor>
      <arglist>(const btVector3 &amp;c, const btVector3 &amp;e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>project</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>aeeb65fa2cf1af158214fa72c0b3fab60</anchor>
      <arglist>(btVector4 *p, s32 n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>clip</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a0ddff9ee16d2fd2e8c7732887242df2b</anchor>
      <arglist>(const btVector4 *pi, btVector4 *po)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>initialized</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a192a9715d6ef9dd8a4ddd55e1d0ed564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btAlignedObjectArray&lt; btScalar &gt;</type>
      <name>buffer</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a428eb582ed4be5fe850351fe5c2c14c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>sizes</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a5a6e5183f8636fcbb3ef0449d5a43860</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>scales</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>afd1f26c34a1424cfa03c5248b24c814f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>offsets</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a9d82d976e09ed8aa7a0807f3d6be6b34</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>wtrs</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a80974fee2f24b000a5a64a713f7b47f7</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>eye</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>ab10ac684ab2b0f68b1a0f202a10a51ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>neardist</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>ac4de00259981e2c422b1fc43bd089f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>ocarea</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>a4ecd2b4e006dda08d06e57687593521c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>qrarea</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>accda56d326ca223fcb669384b48d2a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>structnjli_1_1_occlusion_buffer.html</anchorfile>
      <anchor>aca6d3c4c3850b0761557365018d04339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::ParticleEmitter::Particle</name>
    <filename>structnjli_1_1_particle_emitter_1_1_particle.html</filename>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a8c71e163c93619d9dcfdc4314147c3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Particle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ab6cd7e2320832f8eae9de75bc1d9b05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>position</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ade20643990ed017988bb56da41ac9b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>direction</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a7341ccc03a0fc0909657a8baafd75ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>startPos</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ac5f2a37aa0bd9f7773f1cb9d80775cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4 *</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a8e83d0d110ba59784a450572edbe24e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4 *</type>
      <name>deltaColor</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a015a874fc4ee8a2dd5280acd33f8aacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>rotation</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a89050138b57e930631d32587dcb00062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>rotationDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>afe5bb0f5b6aab6c4373c4f2ec27e329f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radialAcceleration</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>aa79c47a3e1e8a52adfce87a78b69cd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>tangentialAcceleration</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a73fa55041d6053507c905776f4ef8992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radius</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a7e9ed4b209202e2cc5e9cb253bb95803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radiusDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a4bc83c34b133aeb2861b865ec096a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>angle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>acf3f091271c341e4dbbe65c51caa3e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>degreesPerSecond</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>adad3c449c06bc60ac72721d008274228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>particleSize</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a3acb5624501e87e35969f30d01b83073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>particleSizeDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a2220049218ea0743249374e7024d2205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>timeToLive</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>aa099f2fa9eaa5aa5f63e4b8110bd34f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>node</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a1d239187f6bfa8e36db1e387c79feb47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>used</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a223d0b5f5ad07c8dede4f7f354ddd9c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ParticleEmitter</name>
    <filename>classnjli_1_1_particle_emitter.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::ParticleEmitter::Particle</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a82fd5c6fe3160e4a97ba5c757a299b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a63d39362c0bb4bcc3a977b5ddba94155</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5b973c3aff79e46b2793bb604c1b95ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8f8dc93d66fde4e38623b46ee3670477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a596966521886aec9f8f90051b9e7c7d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aed77fee123512b6c75b019defbdcaacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a45a3c77c2299042082d3dfd0d69a8bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa4d2915815495c85fb349da5e33dd1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFileData</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad64b84036b876f4d16a9f431d5644d90</anchor>
      <arglist>(const char *source, const f32 z=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0c4d0379f8b2827b74a5f62cb8755a6b</anchor>
      <arglist>(Node *particlesRootNode, Geometry *geometry, PhysicsBody *body=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5d61a83ff61163e9c6bfa79d7c49b76e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7a45de160ef69c8d5b00d002b4e812b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9e6d450c702bfe80b4d08077a16d6b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afbbbc3cf4498abdeffa91905e7d50b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getSourcePosition</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afc6f37654f0b7f2f34b4c2be0436db52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac4ff6614ac3f378e2c5f03f0b6b787a4</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aeb29d8b2bb7de8cb003c70b822216bba</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getSourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a33f672665df5e84f9fc48cdebd5a0959</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a26ca2463d9cc86ffcab132a54e86a930</anchor>
      <arglist>(const btVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getAngle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a855c50bcee9bb295df88165965f929d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3f3072237c7afe532c31abb83db0cb81</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getAngleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac91d61515591903a97b33550a4c332b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a2b3137d3f6b7008bec04a21dbda09d11</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a44422ddb9a8154cf5b83c7e42743fa1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af58d78f577c600e69bba07e11f8d07ff</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getSpeedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a66647afd8b8c6c9e31b8f93d5f81eff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8a15a3aff8d7f264512e364e3387bc22</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRadialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a47d74b71131b92ace5989fe0086f964c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4199bf8b709d0f6bce526afabb2a0803</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getTangentialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a713c21357798a631d88f928c4899bebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTangentialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0a95851c167af70c9b696d4e2ff34df2</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRadialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afac34d6519e336f53371629017645cbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a36a8d257bb331e40001575edda7a1564</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getTangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af66f5f97435377bf3dcab255885cc7e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a350b5d3c77cacf23fa7297414d215d0e</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae43737fb0aa0a461167586be5702ac85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a88b3e1c1cac582fc31076c1a13663db8</anchor>
      <arglist>(const btVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getParticleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af6041a11a160d9b6b411ec2b5ce9d804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae66b02e5fb5fa80f2e314a6013e7059d</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getParticleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab1317fb12d4438a44e14a94182d85303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab925d397a4ad73aa3177dda3ccf2174f</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getStartColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afd4a775b9dddb0f6885b3125eff5db45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3705b6113fafe520361e0bce816ce11a</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getStartColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a57134c0d465f3e9039b7177e734e09e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa99b66eb5a2744af773ef016f86e8ad9</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFinishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac2e7c99104559df06fd0450afdfc37b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aaadaa67989345435f0f91135bd20659f</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFinishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5d79f93610da79d7c02fcb01aa6e9f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a85cd1f4e3a66a351a1fd0918667cedf7</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getStartParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab8fb58517963282fde2995aa66780c99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4ff68f5c5491dc8409ae91d452f423fe</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getStartParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afa437d092118ccab0bceba54dddbf467</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acab2d66b1b889b9c3159207bb6d17a9d</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getFinishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a796121f9e7df38f0c5c3f33f5fc79125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abc00f8ad722fcb0e694db302e6942ec6</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getFinishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7b0d7631ebeb790a1bede25d02e0dea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad882ca8fc381b8e06adfe34ee0b41515</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const u32 &amp;</type>
      <name>getMaxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad5268f3aa78e4a3b9e659965f0cf0c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5029ab3ba29b3f6e52059c12ca40ebdf</anchor>
      <arglist>(const u32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getDuration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>adf72d3492d403a8505f21e0c470ffc81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8bfdce6e6589f4bc5974c7a8339c3e41</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afd907cbdaf687157e6b1f552c2b53b94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae8be818dc4b9f989420d38d00d5c53ba</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7aa44321b9e3d83e16ba263cadd38c86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a06b9db945d2562c5878574cd594e79f8</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aecec7606d509364be111bb1031b4535b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a65f0ce3c56d6dab81959a00f38c7a93f</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a50581d3723c2a2faa16e983a2ee85f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7aa82ae5e07ac56cce53bdc07334fdb7</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMaxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aba6b5ea0e5d31d6696d0fea82b202cc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af5c7ab6d53dfb95e9d40ebfa0200a5a5</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMaxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c84b1303d2944e924a3e03e912766e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acaebc8c8b81d8cf62ad30463c68f4a8c</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMinRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afcd6a972388be0a8c0cce331db2cb115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af2524c76c57fa8b5f6246199ad8fa927</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMinRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aac11d4bc126f584cb900760d3281543e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3d582b35d0c86cf39c81b1b0db876fc9</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a714d30e3cb5dca0077437ec36be04b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ada1ff06356979eb4c7f51ec6e6e00c35</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a2523303b1f2d941a3dab59f0087c39be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a92f25b187a1c76822558cd65a8cf27b4</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTextureFilename</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af79d4bb50df115d4166f5c0ac1d21433</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abd571b843a3c08a6869c1bfe5caa433a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a2d0b06266142fb29685f1c10a796d073</anchor>
      <arglist>(ParticleEmitter **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aced6eb3196fc0a8b76852570a9112b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac5d33390965f049802bd73f5dac0dbcd</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa82e087e588dd48e34fc42cb870d653a</anchor>
      <arglist>(const ParticleEmitter &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acf5edd9846805737fd5fd3496a869d19</anchor>
      <arglist>(const ParticleEmitter &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a05825f30a1dffcae1391091636a342a2</anchor>
      <arglist>(ParticleEmitter *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abe53773e4d2b1c842b9cbfe6ad51271f</anchor>
      <arglist>(ParticleEmitter &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1f8a84835c851cdbda834898686d02a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a76afac4a484ded180177002f6e91144a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa92c6745c9063ae9598fe22bf3aeea4f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abd233b1c624f6337ef6f58a090aa2a25</anchor>
      <arglist>(const ParticleEmitter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a47324e105e9271076815f77f86290534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac2c48b7139d14837bc2494af0a91c27a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParticleEmitter &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aca83509c6d59c1414aee88fdc39948d6</anchor>
      <arglist>(const ParticleEmitter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a725f9fc883364849ab9d69ded574328f</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addParticle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9d8b00c1c98fcf2ece111e7b4f432d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a91475183e7ad0eeb9b5a409f1d8103a2</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>kParticleTypes</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097a9f4b6e16f6f9761111705e45bf2f7ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeRadial</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097abd1df11f6454842ff49cb74f706f5306</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Particle *</type>
      <name>findUnusedParticle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6886994190d81c2bf14331932be8ac19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>emitterType</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad5e5baf0ac026383a9867b3363cc2739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>sourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3bdafb8ef4016ae934405c9c4c8bcfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>speed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae9e09600c828636113e5d61eaa75b4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>speedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad1bf01d3cca0b18cd035c128e63847f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>particleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6b1eecd9579c8c6c3cbe2385e184bbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>angle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa727070cd45bb3c6f3452e54b131d48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>angleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9fd84a1995712fafed4a6620a34ce597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>gravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0b93b2b2a3066c4796a3dd17a7003bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>radialAcceleration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a24cf0fb59a04493a9d2207eefa0e5fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>tangentialAcceleration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0f3d3256f2a7eb69dc3aa1733b17424b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>startColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a632b7b08db08c63e8434d706a81785e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>particleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4901804fbe7510c678d30ef646048323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>radialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad977f4d9241aa0b02b121707f84ae901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>tangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3f6f2c2e3c53acfc4f45aebd141d15f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>startColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa4824157a7f4f067d6e51a6a27201220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>finishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad404a98c9ababcc2f36fb91333009a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>finishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa8a3157a500764aed98e3e7c56e4ff91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>maxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad9d09c7b1715a7a8734a5e8076f94708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>startParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a221276a57bb815272db890f20649b712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>finishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>adc4727b444a16b394214ba40d6fa6f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>startParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab57ce49a97c200b47648915c0a60566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>finishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8a115e1ca5818f5e7f0d0d242aa150fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>duration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad85a65088f6700a89b69e0fc6e8c73f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>blendFuncSource</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af2a3ec3b978f8e4022362e8889add41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>blendFuncDestination</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab16e4d90539bb8eaabf0aed6282dfa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a290eaaad894a181afc5220f95a5fb9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9e5c16d986e77e3521c907be5694c2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab69fe415021a783939e0cededa11ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af34f670d96a6ae168825832d43a95a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a55689668c018e913be10568e27f4eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0e267e333e22937f79569c99090760d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a781c4dda4a9d5898f721290de5b7f6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab79f0e60f1b15054432ce3ef93d1f000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0b1e391fbe3b8a12379096e3055ac2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3dee0bb7b8e995da5aa84638dfa95f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>textureFilename</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abcf96d8ca5dff9419dc52a4641e485e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>emissionRate</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa0e025068c468db0c7ab07aeeefc9339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>emitCounter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae3e31b529fa8649e94b6a88a5b869598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>particleCount</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad183b3502dc1030b90a251ed6c1e68c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>elapsedTime</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1ff6d5612c496bfbaadeb8ee443936c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a905024b9c36077de686cdf193729821e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>particleIndex</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a85626d66e4f909bb841b80d0c5ba7a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node **</type>
      <name>m_Nodes</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1e7b14808dedeb9a8729c7b841a7f8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle *</type>
      <name>m_ParticleArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a46aac8923bcce6d1c12476f219578ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_particlesRootNode</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab42b939953c9056096190d640bf393a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Geometry *</type>
      <name>m_geometry</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac2d3c693bbd8ea55439070800b89b215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsBody *</type>
      <name>m_body</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5cde7769e5298dd82098e0bd83d89808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Particle * &gt;</type>
      <name>m_ActiveParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aba30a6d103d4b2648e32923b15762537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Scale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aec08a338a0ff997d54a591dcf20e5db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ParticleEmitterBuilder</name>
    <filename>classnjli_1_1_particle_emitter_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a99d06c6ceff56a1a86118ed913ba7658</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ac22350adb6aae5731c31f9e161c42d41</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>acde4113bfec07e6f84caf9ee735f6bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>afe74500ed09d7cb603761a1629738e25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ae82e6fa5c2fac19adce4d2c258a182a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a36123d9ab213f9d61356aaf9e510d90d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ad81804b7ebf351f6b2370d71ae4a6cbe</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a7b372c8723bfe4cfe4c2d277192a22f7</anchor>
      <arglist>(ParticleEmitterBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a13c82761716d48c0a55f5e5d064f92f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a07f634857fa87ac7cd0dc21662e67516</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ae6074c507123dfe4bda62f055bb32d33</anchor>
      <arglist>(ParticleEmitterBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a05365b6b605f5fa22730886ccaecdf2e</anchor>
      <arglist>(ParticleEmitterBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a1b0f7ad43b79369d683fa6615ba13c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a5cd2dd72ac6d8e3a1cbe305e30c6a76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a74774e50507001d37a9cfbd9c95fe23f</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a4c80a1c4a4b476508a5ed08ccb066cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a2517d19192150cc63a70798d92b45577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParticleEmitterBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a2425f79492584cfa42a79cf4d57435be</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBody</name>
    <filename>classnjli_1_1_physics_body.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad68e3bd30ca09693f5b03855d020923b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a58cbc549412fc623f35276d2f18b8785</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae72cb51b910158466d481481e1042a2e</anchor>
      <arglist>(const PhysicsBody &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aecae8b7ddd0550b4f685326bf2a723da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9abcecd3f34f0b4c2c18971f093bd770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsBody &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa2177d15a5c8dc231efefde1dc439d1d</anchor>
      <arglist>(const PhysicsBody &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a21bdbc459532f004dc4cd0e9c99a4765</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3c40378e7f3033557ec6adf9428b6a9d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9ba235d39a1b994f22a13edeff862ba3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1338648bed55e4ca2d3c50d953fd60c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0c12067445dfd7893e37052ae90a9173</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCollide</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5e3c626da8fdf32375e0f16f6187934d</anchor>
      <arglist>(PhysicsBody *body, const btManifoldPoint &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCollisionNear</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae317118b0cad6699ce9d7c1aa27db7fa</anchor>
      <arglist>(PhysicsBody *body, const btDispatcherInfo &amp;dispatchInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a83de0044a031a18ac9618b86c8d539ce</anchor>
      <arglist>(PhysicsShape *shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5ecb49baeaa8c38937ee5fc566702148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsShape *</type>
      <name>getPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a24b7094de88e83499741dbe4e9f289dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsShape *</type>
      <name>getPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aba6ce88973cdbf3075c1bbbce3359406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a570891a03ea4f8243ccec9202b3dc965</anchor>
      <arglist>(const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ab92a433d0ae2b714e1c3b5556893d029</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6b71ecd5df9868f35b8365bf70455f6b</anchor>
      <arglist>(f32 friction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a7902144cadcc96623647f197ea06e26c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad3c3a9a335bbbe8144c488673037abae</anchor>
      <arglist>(f32 friction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getAngularFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa9e3550a04ab2f1d1fab46f3fe195f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRestitution</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a67ebcf753e1bc5c5e228d4f18c7534a4</anchor>
      <arglist>(f32 restitution)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getRestitution</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a2bf874a1820d5d8fd511bd6eb54f30e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicsType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a24a8fe4c7fd12b3435c264fb8feab6d4</anchor>
      <arglist>(njliPhysicsType type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliPhysicsType</type>
      <name>getPhysicsType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>af8bde28f4eb63e577c7302765594e680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionGroup</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>adebe9e1510c2301cc0178072f6849359</anchor>
      <arglist>(njliBitCategories categoryBitMask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliBitCategories</type>
      <name>getCollisionGroup</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5f9302be3234d9559887d0dc01920b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1318143d3ea839d34ee51dea4bf1cb28</anchor>
      <arglist>(njliBitCategories categoryBitMask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliBitCategories</type>
      <name>getCollisionMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0b03710f75ecab07d31089d3e3204990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStaticPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a8a3699741bc55ef2f292307c8bca316a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKinematicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>abbf7115e5b57161da8e3c56ccc433e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDynamicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ac24d4f1971e9a936f32f7bfcd06d8ee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableContactResponse</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9202636b997a1ab1155dc827581a94ab</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableHandleCollideCallback</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3ab49264b605d3a261cdfb6db36389aa</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStaticPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>adf0cd3ea74d1f5ad91069f67d22b5c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKinematicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3cdf426ac3cb39cd4f58072c65837b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a8fab0b666e3bbbea022c0b1e13aa3e76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a378060d96bdc1412e41fc02e8e81111e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa1d4897b6b751610ce1470dac2679eb9</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>add437a6d229dfbf74a838d0de7229867</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a598de298accae3b59c821ab8e640d464</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9f98398ebd273f305ffb8316908d8088</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPhysicsConstraints</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ab26cf8febd1d0358688e217c66fcc39e</anchor>
      <arglist>(std::vector&lt; PhysicsConstraint * &gt; &amp;physicsConstraints) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getPhysicsConstraintIndex</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad34d7a223ace5d09b0a5a975e99ff289</anchor>
      <arglist>(PhysicsConstraint *object) const </arglist>
    </member>
    <member kind="function">
      <type>PhysicsConstraint *</type>
      <name>getPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0ba90aaf5e9990cc92a1e4e8b6d594db</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsConstraint *</type>
      <name>getPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a80e0ef46d50bafd597fbc6bfa9e77c90</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a678f6ddc6e6c2c020444f4523375d563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0387ce41605f311b4cf24046e6f9e36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4aa29d0693b62447efeaa40fc6f58b61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getCollisionFlags</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aead9ed1157f369c6f310fbb5f4d0017b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getActivationState</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a2dfd5a660b3f3aba42aebe8e0c6d32ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBody *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a07ea5401f330fbde1eb2f080e079c8bf</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a142b27ce8c2b903fc9de3b3e52fb5b35</anchor>
      <arglist>(PhysicsBody *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ade2c057b6bf5cdba1228cad45b97d294</anchor>
      <arglist>(PhysicsBody &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a33b10792b9a2411a360638db4888dba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a48031c76bbe2bd9c4540d6d27b8b42bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad3edabf71cfde91351bb428c9f06931e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a674974f0df3db645620c7156177659ee</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>addPhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>abeb1a0e956743d810b6e35329dbf599f</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a832ed4f79a2b52b334d63d094364f86a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>addPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aada3ab35adecd8cb382411356bf6fb3e</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removePhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a45058a03979e89b0b0fc4dceb07d8b4d</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeAllPhysicsConstraints</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae4a8cca611e33c624b287613eac4d72c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PhysicsConstraint * &gt;</type>
      <name>m_PhysicsConstraintList</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1f9dcb4ea6c3105da907b84082929110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsShape *</type>
      <name>m_PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a00c2b8d2e86534be769c4984956c00c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_CategoryBitMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa474bfee45457dc90f521b1fcc47b4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_CollisionBitMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad54b0614806637ab666fd9a779e55d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_RestingAllowed</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae0f4e419f8e05558232170246fe7ad83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a313bb39a706c42bc97c86cff4bd0f309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_CollisionFlags</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aafbdd7a8a90737acd399b56961cbd16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_ActivationState</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a63352ab7615e4537f30479062ffb6a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae9fdb8cf9943dbfd76910301cb0ac1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa594c185e502e1b87c998e01dd17a50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa59c958a66870f0d251ec0dd477d2eff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyGhost</name>
    <filename>classnjli_1_1_physics_body_ghost.html</filename>
    <base>njli::PhysicsBody</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a4dbee681db3d31f396022e459da825f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a1db4d7ab6a172ae2e6d4d18a627357ce</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a1ac3ded76a85874bc17b985e586ff8f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a6c6224d4a72051758a61b10c1d6757de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a140d38afd4b525629e7b307439d15dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a5fe1096974f5112e9f4d18a3dc0009c4</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a96d80fb3c1d0f9b054ec9574de3b0885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ad89f8c3ee8872363bbc78df963a44555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a5767878eaedd1dcd104ea5c8296c9f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a7e9f15b2d9f46a1f39ea02bece58df97</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a371b48b6da0c38e838e2c58e13d5e3ce</anchor>
      <arglist>(PhysicsBodyGhost **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aa0b8fba3a3683a625dc5edf27b1bae67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a154ae0e1f481af56db84ca6f0c101c62</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a7d8160bcc988f25d0b55eb8a4a31e193</anchor>
      <arglist>(const PhysicsBodyGhost &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a89265842eb498aacf5246a4df46d2ad5</anchor>
      <arglist>(const PhysicsBodyGhost &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aada47be26a4000f9fdedbb2430af7e6a</anchor>
      <arglist>(PhysicsBodyGhost *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ab063f3a5c9379ae77d2a6375d61d1376</anchor>
      <arglist>(PhysicsBodyGhost &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>afcf856777e83f12e96c5d9170aa381fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a657ece9b7062ed0d514b9d62cf88c110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>acac7f2029377a783c65257451331b472</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a41018c93aba8e1698a65da7813419d4c</anchor>
      <arglist>(const PhysicsBodyGhost &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a039b603e81b9f24508901ff3da80cc25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a8022b9b8ae47adbb3954300cab4150ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyGhost &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a6a80ca7e924d2213220390fa390bee19</anchor>
      <arglist>(const PhysicsBodyGhost &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a139149a47a52956db56d1de5793dbe63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>af52dc10e3f80305cd772b2168b307825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a57bc835624a03136142cfc943109639b</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addPhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a01d8bb7372896e4f11db6f836d6b6c17</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a10500df0cea81ae054e65565bbd9a174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btPairCachingGhostObject *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ae61fff9a5dd36dbf8a211e199e0bcf4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btPairCachingGhostObject *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a0406f8f276df0d7af753fecb7d7c135b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btPairCachingGhostObject *</type>
      <name>m_btPairCachingGhostObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a460197cbf7ec698c64ac6b7a95cb1418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyGhostBuilder</name>
    <filename>classnjli_1_1_physics_body_ghost_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a4a7aea2b99544a458c9643d700281b37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a981e0b0b5ebc65db6e472b94c4cae845</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aa5ecced15ba6ab7704f9d25090145e77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a2c87f0d86bffb10752e34d640d2b5f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aec4850f8fde06a2320f786e54ffc01ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a443c042cfcd72c60e4b4ca6a1eaa714f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a62618f1a5c2c9349913f46797fae35ed</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a2bbbb971ebcae2ee325d51812247ea2c</anchor>
      <arglist>(PhysicsBodyGhostBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>ac24f5f2a928a0cedd67450c46d4a50e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a8fb45cbcdc5127e69746df73b42c05a6</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>adfb04aa403964dde9cdffa15eeab57d6</anchor>
      <arglist>(PhysicsBodyGhostBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a2594a087aa9a039716ad813aa410bb24</anchor>
      <arglist>(PhysicsBodyGhostBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a3f9f5f4bd6109410414d7787764ccd17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a15cf1ce6427ba30588ea31feab7dc61c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>ad16190ff46c4cf7cae5b92837e0f4c9a</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a2ddac8155aa2c1329fd94501496d16ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a1c36387b0a4b8234235d1cf193e9e623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyGhostBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>abc36b96963248f704e08840f15506f14</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigid</name>
    <filename>classnjli_1_1_physics_body_rigid.html</filename>
    <base>njli::PhysicsBody</base>
    <class kind="class">njli::PhysicsBodyRigid::ForceAndPosition</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a9e2fbefdf9b0034b0dbcaea14fdc9e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a0bf6d72cd5cce0255ac709ac44aed222</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ad1e368f6c6e20df60dcf232513377f06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>af4956c9f6d462ccc607040aa0becf0e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa16c15d5b0a0b68a0f681405749f976f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aec5e27c58637e735d53023f6377dc99b</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a208a18db0b76231b3d990458941cc4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinearFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a60d3f3db059fd5743b976d022b70e2e6</anchor>
      <arglist>(const btVector3 &amp;factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getLinearFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac4c948fcbe0cec506d8ecabf79468692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae54d6cad518071e6ce7d682c0a8412f8</anchor>
      <arglist>(const btVector3 &amp;factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aee7d2e5064dd3b33c354ca12d6a26891</anchor>
      <arglist>(f32 factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a0aa2b8c01df68a89b625ee5d0edf993d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a5db2713e1e970961b3f6472c241162bf</anchor>
      <arglist>(f32 mass)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getMass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a4f5ff3dbc370582028d41c87784d2cf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCharge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a72a6db923f7801d667eb78eeddd538ba</anchor>
      <arglist>(f32 charge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getCharge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a3ce423dfd1a57ddaa138de1e0c8eb47d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a3bc01a54565f640221e4c02a57ecead4</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a75fc30ce8afdf9dc7b6071f89f699eb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a6dfe7fff8b1bfbb80218624eea3c031b</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getAngularDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a0bbf9f66b08134bb508f3e908d415845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a94a664dfd16c8d1ed696295d0af690be</anchor>
      <arglist>(const btVector3 &amp;direction, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac7876c6df6bd4b6a97a33dfc512b71e0</anchor>
      <arglist>(const btVector3 &amp;direction, const btVector3 &amp;position, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAngularForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a3a3c2d0b171a8a58a4d9480e09d346eb</anchor>
      <arglist>(const btVector3 &amp;direction, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearAllForces</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab522bb4c1f5bf294d7aeb4b8b93337ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a16df0cbb3bcf7ca36881f223586ce5f6</anchor>
      <arglist>(const btVector3 &amp;velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a1351f569c1d46b3c458c2856646c3eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>afc2738912bcf01612d54460e588738f9</anchor>
      <arglist>(const btVector3 &amp;velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae7090f6f043ee7589e9b08ad2c663e3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a013b6e79239be26af021c281118a4a3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a5d1a78ef91c99345a2139eb7db086fd7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2ba56539607736d6b2408a18e7acf965</anchor>
      <arglist>(PhysicsBodyRigid **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>af791917afe4b7f624d92b98f88a8c3e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a380286c96bfa40a9ce9f2a823629ee08</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae7704fb17f0f71949f9eaeb18bc5b471</anchor>
      <arglist>(const PhysicsBodyRigid &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a63a1e08f608ea7ac4bdf734f5b8b8a8b</anchor>
      <arglist>(const PhysicsBodyRigid &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a41d5b26f0473b56328d373274c009e52</anchor>
      <arglist>(PhysicsBodyRigid *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a634525a5db6b0bb60f0282dd66ee97bf</anchor>
      <arglist>(PhysicsBodyRigid &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a41fed4c4942e0fb0e0e447ee06789598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae94e7b3c64a48854e5e35a8e1d298afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a43b90ad880516b3b0c007b598cccfb21</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a448ff60fc10c6608e182165535c73bd7</anchor>
      <arglist>(const PhysicsBodyRigid &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2c023043cbc9f56703704cb4f822f963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>adad091d018e520da9e60087ff4168f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyRigid &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae7e4dbf89727eda09165ea7c0e771fd3</anchor>
      <arglist>(const PhysicsBodyRigid &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab306967c170aaca30a81d9bd8b88c0f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>af00094e15c9d968b199f637132cfb339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa2d77ea96599e418576e02ea86817330</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btRigidBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac267bebf8ca5fead40ac16a71ece274a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btRigidBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2725bc29160af7a44c76841cf76b6920</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyFinalForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a67889f8863452ee3c1e3c83ca7659ee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyFinalAngularForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a7be53374ee8e320f1973e80a7a30c357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addPhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a079a455c5bded132f22da746f5ea6851</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aaa69fd24a7715093394a55bea6e7d943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Mass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac62838462af7ad59f3763646a3062496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDefaultMotionState *</type>
      <name>m_btDefaultMotionState</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>afd22b7559363849aaa342867380a6eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btRigidBody *</type>
      <name>m_btRigidBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ad0c3d067b9532e7670182595df270d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ForceAndPosition * &gt;</type>
      <name>m_LinearForceAndPositionArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>adc4b8999e49b7b5277fa018c9de2ba0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_LinearForceAndPositionArrayIndex</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab2c6509114dbd98b54082105ed189c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ForceAndPosition * &gt;</type>
      <name>m_AngularForceAndPositionArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a13066e9090fd37f4774e18c845f3ac65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_AngularForceAndPositionArrayIndex</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aaefaed500ce6efd686be0bd8eee056f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_btTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac3048306f34e8a0be2551b99303216d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Charge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a1bbc2a7a02bedcc65adb61e37d742eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigidBuilder</name>
    <filename>classnjli_1_1_physics_body_rigid_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ab9883fa17b097652223f31ac78245ca3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a79b7691a80ea05b92929ac39ace83638</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a4aa08238a1d7b36a37c9c94cc1cb1229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ac11bb1affad2bd244f81010294131719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a478ab1e5e9f7c6f206a1011b537add9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>aad958aeb08f3a9e7b6d4801dd0b02b36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ab8f14a52adc76e905f44a4747eccaf74</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a02fa72ca7563865373bb45a5a11de3da</anchor>
      <arglist>(PhysicsBodyRigidBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ad580793d9f6c95a2c015ed9968db4bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ab28add67540fa92b3db1d214a9070256</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a9cd3cf75bff8055c2cb677508ea652c2</anchor>
      <arglist>(PhysicsBodyRigidBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>af2569aad0de5f888ee402f5b4feb90ff</anchor>
      <arglist>(PhysicsBodyRigidBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a8a33b6d7e63753c530206b5d0cf8fe7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>afcce4270b4b17007a8525cbf2b8902b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a57b327f86208d2b18dfe8001a284fbbf</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a637cda99de6fe43af45f10c75bbfdd6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>af618032dd09945c5f6dcc107f24ecd86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyRigidBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>aca12ae7db28a2fc5acea6d1e01256e79</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodySoft</name>
    <filename>classnjli_1_1_physics_body_soft.html</filename>
    <base>njli::PhysicsBody</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a0219eb7f997180d19fbbd5223956d610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a1474ecdeff160922912c7699dd1b9331</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a1379451d46cec99b1efa672a924be432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>afdf8fc497ab94254804286d0dac1a0f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a5e0e5c08950cc3512c0243fa4f0bca40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a4c6a5f18d7b04e7613ae06321ec18c58</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac3e43068ae871f5fea1139255e1d1c4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a08e8ad16ada2a5a80e7ea16319055d0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a732e991030dcf0f1bdc9281329a102fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac0e47c55dc57b429679fdb69a8f66073</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a07bfe19db444626f925faacc9d49dd84</anchor>
      <arglist>(PhysicsBodySoft **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a5fd086438f62b4fd8dc045bdf3692439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac7c918544acc7fbb138a0576a79dc8d8</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a46378e4d7269a67fc3fedb1915f07db2</anchor>
      <arglist>(const PhysicsBodySoft &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a2c0c06f3ef2d81a8ae83dae450be76aa</anchor>
      <arglist>(const PhysicsBodySoft &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a466506546370e272f2f6b4a07375a51e</anchor>
      <arglist>(PhysicsBodySoft *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a1d427fc9cde67c908943a1646c2764cf</anchor>
      <arglist>(PhysicsBodySoft &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a77f1c0596ee8a0e43f9d16fb836692cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ad1a57cd27522290455d696bcf9a797d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a00848efd4496fe05e9dc05340eef2fc2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a6545d7e6a7706d93266e6fe5299978d4</anchor>
      <arglist>(const PhysicsBodySoft &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a0d39f39abc7a807e9ef68e2a44a8d1af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a9ebf45057d7aba42e8ef2f5d568eb45a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodySoft &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac430659453eb940e833df9bf06c41a99</anchor>
      <arglist>(const PhysicsBodySoft &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>acc09fa9a6bf5132bf5c901e664589321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>abb9ce90a2d536afcd22b1d84ef1881c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a65236be10459d5990a854f84ca5b2e4c</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>addPhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a005a5ef2e48156c908eb0cb3ca40f9a8</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>acab6d13f4bd544ea66fe1957765c9fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btSoftBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a2ae8bc28bbdc5cadfad911de788ce394</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btSoftBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a31c39467b13c6e2f928cf8339848bbad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSoftBodyWorldInfo *</type>
      <name>m_btSoftBodyWorldInfo</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a3a3770a0489d8629de7b88de0c79fad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSoftBody *</type>
      <name>m_btSoftBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a5cc839e65a947ce67d81141aceffff53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodySoftBuilder</name>
    <filename>classnjli_1_1_physics_body_soft_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>af5cb00019f66fc7db4c99da1eb3d6b79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a602a5d124fb1704d45827dbeb5737f18</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a03a202189927461885c8f83a2a1533bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a2ea97e5337d600315cbee723e6728f80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a18709de9173e926a83aa6cc62ebbd06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ad9e3db5523e8290c938443b858256c0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a304108cca27b2c1122f1097672fbd0fd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a1462165b083720148bc8f3cdfe07c3a8</anchor>
      <arglist>(PhysicsBodySoftBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a799596fa218e30410baade4e56bd67ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a5d0ab1d846d64d7f9eae1ac659fce6cc</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a7d9dcfe9e276d5f980c48debb2c400b5</anchor>
      <arglist>(PhysicsBodySoftBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a54111b92a1d7d50f023942015f8b831d</anchor>
      <arglist>(PhysicsBodySoftBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ace4fd6f976adf9071eb8561f1bd30dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a236eaa31424b4c13346922855bc0935f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>aaef6b31296d9d22591a7d753467585db</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>adac7505e498438c51e3d6b0e66807d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a889850082f91d85422db85b62504fca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodySoftBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a3c1d6c265049b53840f77d503fc9ac79</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsCloseContact</name>
    <filename>classnjli_1_1_physics_close_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a8ff23cc674643badc43214afcf172bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a246a8e9dd9743523701b9aad1115d051</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ac48f362833ffe4b1c5d90209ce16b836</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a2718e5cacaec1eb53ea5dcc62df2672f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a883d6d8f909f34c94551ffa080496c36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a4b66a49b43dbddd117c5c2df0abb3c9c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ac3231b6152f9642d8cf650116d8c2180</anchor>
      <arglist>(PhysicsCloseContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a67e6d5003b9bf498b71b282319e4a904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a544b9504fb6febcf79005b1abf683c48</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a429d8b2b164e968d5f714d4c8c34e8e6</anchor>
      <arglist>(const PhysicsCloseContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a8194dd4e2d3b51ca385d35a527dacd2b</anchor>
      <arglist>(const PhysicsCloseContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ad5e4266a5a32f76f69ed289a0db8092a</anchor>
      <arglist>(PhysicsCloseContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a2b2c8497dba28fe4f28ae1d56f39b4f2</anchor>
      <arglist>(PhysicsCloseContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a9158fd941c1e518f099ac6ca3b324161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a3fe40ee1f14897d01cf22425d845f8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a458752337dd7bee43ba3fdc8d355dfcd</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a50033f6c1da215d908b2265ce0148b20</anchor>
      <arglist>(const PhysicsCloseContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a092b76aa7ae7386952c1bb6b59830c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a05ff5c442008ca096709addeb70c459a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsCloseContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a0881ccd55d66d2f31ebc669f12e231a2</anchor>
      <arglist>(const PhysicsCloseContact &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsCloseContactBuilder</name>
    <filename>classnjli_1_1_physics_close_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a5af5fa23d3133958b68e0c4104e139ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>ad97be4863fbfec112da69abf4eae6eb1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>ab79f8aace1886a5a6decac00d3360768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a7056fea19f38012df2644e0e4148c269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a17ae98f137a2a2720c3bbd0b6bfb40a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a63b7ef6e767a20d5073a81847493f15d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>aae3419f5c269cec400b1ff353b7fd06d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a4f42d607cc11a251b953a0868024f585</anchor>
      <arglist>(PhysicsCloseContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>ab1ed94323fe9a3d088936a130c53a6eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>afc67e20b17af314edeedbfafe683b1a4</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a22d86e78238d4b13d68c5f26a4a6753f</anchor>
      <arglist>(PhysicsCloseContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a01cbfa34d3ad411f911191a4b70e000c</anchor>
      <arglist>(PhysicsCloseContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a3c6dcb42e945a448a4ee50bfdb850569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a8a48cc12d8fb8bb524b33a43c087639d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a5edb032228c085e5977c6617a4500737</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a7210fc81b1aaa792fe84a01377b05d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>aeacb59534d5cd7b21843b350f7305a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsCloseContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a89c769ef52db1ca8542b5333f7fe2642</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraint</name>
    <filename>classnjli_1_1_physics_constraint.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ada6aec1d946691aa037faa999f4eec65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a316b7cdb68cae42d7bdef1e7468c9f04</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ab07d63141dfecf44f356eca21ae64ad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a3d839a60794bcbdc6ef50d33bc9a7ec6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acc4f24f5c91eaf997179925caab8a094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a5323b343249efcc5d28f295c737318aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getNodeA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a2516245dec0894763e264f9e72209d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a84ad4667ddcece00d901d074985bcf40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getNodeB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ab1f831be4411d4370a2221e1cacd5b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getBreakingImpulseThreshold</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a8f9fc48f6a7ec6e4b5bb54ad5928bf47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBreakingImpulseThreshold</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aff159cbeea66d0f2598172e7cecf2269</anchor>
      <arglist>(f32 impulse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintEnabled</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a033debe4579d456026cdd5e0619780a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a2c3b06804d8447485c9170bca568b244</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedForceA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a5a83a589d09ed631fb0217604f9fc7ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedTorqueA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a39d68bc3075111ab61d9e6913b65dfdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedForceB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aa4f3e849094be99b88593b763ea169f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedTorqueB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acca4ff171fb7f5cfcb01b84b62ceb30a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a907ce131cfb27f0fa8ecf3cf6b52e23b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>af547da72997e38043381a8274bb468a4</anchor>
      <arglist>(PhysicsConstraint **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a9b3f90274a63fe5a2771faf7656c92cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a8bdd101885af51ecb547754ed753f410</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a92ecb32e55b3cc52255cc979fb55d6cf</anchor>
      <arglist>(const PhysicsConstraint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aa25d19b09fe8f26d37f848960a9fc956</anchor>
      <arglist>(const PhysicsConstraint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a34a3d2c60eb15fce3fa061a156b690a1</anchor>
      <arglist>(PhysicsConstraint *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ab3fda2521c8dc7c9316869e5d447343b</anchor>
      <arglist>(PhysicsConstraint &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ae94e834a6874639d84fedfc3f813f05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a7b3e8cf84cbb22fc6a9e238c56404a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a7b711432de531a357b0b49e446d224bf</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ae70f2363020b35433e46fa34fba42752</anchor>
      <arglist>(const PhysicsConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acea9f53b2ec41266be66764bf000e603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a50070b3d83851888aa3875eeb5bc4575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a21cd7b90ca58637622b9256766fb4d2c</anchor>
      <arglist>(const PhysicsConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a0a22d54c2c896af49fa57db9be76a5da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>af4cb8c0158a044f75fe61f89cc278338</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>af8acfcb3256012a036dc5ae78820f740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintBuilder</name>
    <filename>classnjli_1_1_physics_constraint_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a0a34c4d5446393c20b0b3cb544d46dc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a5d784834716f345f8152eae10fbd6a3d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a7fc4a8de2c41bd974af07ac25f6869e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ad9dbc38f3bc998019f5ef84110819b1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a5253411a7071a729ebb04a653de8e073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ab7178567cbb7cde0d75049bf5358d757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>acc1ee89738986bb309810edb98858d80</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ae0e12595f235680775649807ae4207f5</anchor>
      <arglist>(PhysicsConstraintBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a3916aa3d29a34905c6d3d10e86fbcf7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a51b97f854735cb43b3bf8955f68db994</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a0d0307d3d7ca4e912fafff1e4bd676d4</anchor>
      <arglist>(PhysicsConstraintBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a02f8394fb02d8b94bd1f9daa0b42fbe1</anchor>
      <arglist>(PhysicsConstraintBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a09f6e52f2ac370effb87bc6107c046d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ab2f4a2dd4f1a69ee31e83fe8d7b4cde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ad5e809bc48fbed105ab1646d28373406</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>af62b5d1bcbafb7009285a67a923123f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a47afcdf8368bd4e65948d00374720468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ad4197fb432acec719b75092ffb964449</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintConeTwist</name>
    <filename>classnjli_1_1_physics_constraint_cone_twist.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a0d7823f6a24df0245a7374b1397cfdce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a481d849af80292c04c6d08f35ab6a5b6</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a5e3fbdab01224dcc5704d073a585a19e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a71bc12b928b4dcf8fb545f3f0c7f0592</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ab226e9b5cb52f927f3c4007964d43a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a62ccb09aa4eb5e21fa325888b619b434</anchor>
      <arglist>(Node *nodeA, const btTransform &amp;rbAFrame=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ade9557985d29d2dbef78d0dc232ed367</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;rbAFrame=btTransform::getIdentity(), const btTransform &amp;rbBFrame=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6c8c071ebac0a8b00d66a17044c9d62a</anchor>
      <arglist>(bool angularOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aeed1b0161940309464c6f5f56de1dd22</anchor>
      <arglist>(int limitIndex, f32 limitValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a708e02ef79f7e67c13eb5bfb82a76115</anchor>
      <arglist>(f32 _swingSpan1, f32 _swingSpan2, f32 _twistSpan, f32 _softness=1.f, f32 _biasFactor=0.3f, f32 _relaxationFactor=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a776bead995531c3a0b8742b1a73db8a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6ba9325b0af4611520e9fcf78eaec0e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveTwistLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa9a5bdf9fcbebce5686c4fc630597dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveSwingLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>abe8033d8ead97feb20871704c0ac81a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistLimitSign</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>acee80e920f51081de9354094379f7b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSwingSpan1</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a027923af16628517d65094297cb3a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSwingSpan2</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a08296e8ff84c002fda396b348ec622de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistSpan</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a38d2f9a65c88de728a2a1f5d3255ae24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a456096ba5a6602c65e1cfdacd2e155ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPastSwingLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa88ef9a706160dba1e9805171bfcbd43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9552eedd807cd2833d584d0ccbf74f91</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a7903e56124cef31df66e81467f4fd597</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ad80eeca857c3ba2977181a2db59ea185</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulseNormalized</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6c0ffec35cf8e2d669f7333c1d889a21</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFixThresh</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a86bb590a043c9e7604e144081a86ee0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixThresh</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a0bfeee1933ef308fc523f58421dcb9a2</anchor>
      <arglist>(f32 fixThresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa9330c775b1d77026c0b3b23d8750bab</anchor>
      <arglist>(const btQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTargetInConstraintSpace</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a8e8f494383a0db257761c61924481232</anchor>
      <arglist>(const btQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getPointForAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a681bcd999ffed5134c998dc568d6c67c</anchor>
      <arglist>(f32 fAngleInRadians, f32 fLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a8bbcee31a07d672830c0079e8559fde4</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a47eee4ef52dcc389766ab89a76206abe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a66dfb2a3a35461b49e0f44068e781d9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a401a75f359b2221446f5f3220d42a6f5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa248cf2302349c7a54bd75e4c103528d</anchor>
      <arglist>(PhysicsConstraintConeTwist **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a21d0e8f2ac429579de20dbe3d12d7fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6353785dde0b1fb515fa6799976b14fe</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9a2c00c56e5348e1d87551590ca52b66</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9d06037db8e44827196f78aef37f2f36</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>af3c33b12f22a0875ca592158c95cb72a</anchor>
      <arglist>(PhysicsConstraintConeTwist *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a94b877afc36d4815fc1541e463b5d0be</anchor>
      <arglist>(PhysicsConstraintConeTwist &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ae4a36ebf24e097f5a93d80b5ccf1fd0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a947d157eba75740eb5ef4cd2a2d84fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6f984ff219ec12b993910004831aa06f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a691aaa4b2f4ea930445a8ee05d50f66b</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a3c54783fbe28ac8b26ab032bc34a8418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>adb60c008973ada2d2732a14b5151180a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintConeTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a10c64d1e4905f1e0d93719156a099c9e</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a429b3e1380fd6b8d61428d9e39e5e5e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aed77794f676c905074b5a224c139c25a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a7af1e9aaa2f6aadb05b4a378c316f0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConeTwistConstraint *</type>
      <name>m_btConeTwistConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9a2b6ba85104cb0aacc840dfa28625cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintConeTwistBuilder</name>
    <filename>classnjli_1_1_physics_constraint_cone_twist_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a33c250d6e144d5ecf76e91f390be4428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aadef1f3088b069f3482bfdc343aa6125</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>afdd411b1ec26df8392c56eb2b823cf7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>acf8eff112fd449c9b9ad52f3337a7e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a58c365009c6a22adfda4b7a713ec93d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a3303618ff00a28b233146444182c2ed6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a8d381b14cecfdb82996022e1159a0d30</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a4ca79df8b5e5a4e67231bccb7fc1d081</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ad59060bcea3a5f140b3c49b5d39223c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a71546034d35dbe92629998acffa121e6</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aa31cfc002680ed26166cc44d00726e33</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a69dba3298c2b5c98fa99c0d8082b70c2</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a86e1170b64b55b9aa6e09b80172c06a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>af16141b2bedca7a585957ddc7d48e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>afab8a85fb10dc345be8773da4aed2e55</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a9911d604a6e4c1962c4140b64ba5fd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a5c1c928a524973ba90babe820806d00c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintConeTwistBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aeb062d2b1e46d70bf6281c585332017d</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintFixed</name>
    <filename>classnjli_1_1_physics_constraint_fixed.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a6007bffcfa4818fccd300606a879e5fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a136a339896795f610341fcb037631307</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a943d5599412b285710a29d6750959338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ac9b72f04debad9ffab25c9e708378a90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a96b37ed6288a0daf3bd2adc2e042f24a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a9c2e500b265b2e050ff26183ac739224</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a268f6806d30a56b6a27f07f9ed5a5383</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a21ff21821befc99ec5d4865bdb1e93d3</anchor>
      <arglist>(PhysicsConstraintFixed **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a9d6a356eff35009e3c92bea492218e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>af7a4fdd421b1d37ebffdc21e70698c16</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a899f8bc6e79fd4ac2b772dbf6258183f</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a265a5cbf0ad4e0d25f1f83a3a8f3e0ec</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aa4225e8e81e9e812fd86e3111a17124f</anchor>
      <arglist>(PhysicsConstraintFixed *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a945e643b4b640577c65104d6b60b6b07</anchor>
      <arglist>(PhysicsConstraintFixed &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ac9507465a3960b9822373ceb7c95009d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ad7c29d1fbe102ef0df39b23e83b3a0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>addab0e380c07beb28bd5eda9169af956</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aede93ff52f7972a0ccf6bb0825c6345b</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a6fc29984577d1ac55a0c9c7d975c80b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ad60005df9c9139a3f28b39e4ef317fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintFixed &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a18b9582ce36fbff5790d09ed45c6cc77</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a2acb2a113376eea51b2f04150d68e14c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a9a429f154f0f0e312ce9fc0e2edbc313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ad1650704cfe08611b143655d0b6954d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btFixedConstraint *</type>
      <name>m_btFixedConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aa84989fdbd81cb13f6d09150cc22dd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintFixedBuilder</name>
    <filename>classnjli_1_1_physics_constraint_fixed_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a9117b058a12e0cef532360f7d04223c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a362dc344568983411c03526e7ef2457e</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>aeebf09583cfaa7c4eca650766eedd66c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a70a3d3d09d6ea0fb8b76959fd9bc0262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>ab00e3ba58a46aa88c95b9dd960f73464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a4ca7506e89e7f154c7e6c6c062b7b03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>ab28a4bd75f0f5f8a9f5c19cb2dde60df</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a8b9cb14a680cdeb1e6b4b6fe1258d2f3</anchor>
      <arglist>(PhysicsConstraintFixedBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a9bc500ec1e55d5521d9ac2e60ea396d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a042ceb703d0486c4d59a65cdc167f641</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a1e4b9c21438521104dfdb125ad1bdc69</anchor>
      <arglist>(PhysicsConstraintFixedBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>aab5a2a1d6554e26269255d088182d76a</anchor>
      <arglist>(PhysicsConstraintFixedBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a4a31592454f10d78e60dd3954ebad712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a099814f08a682c800facd7272f74e36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a27a735d0f935892d35beb1cda81508da</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a7a030903bdabc4d48aed1a62b24eea9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a13a32efaf70cdf60d4d857019471b4b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintFixedBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a82c41a7c665c098de4ddcc2184e573b9</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6Dof</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac179bc02abd73c98a2cb71cc4e22fb32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a248dcb551972e6c96bffe5b29877ea1b</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac35c24706e25b05c5c9fb3be1e6b6d76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a0fb84802778d3f252a335b97d7eee329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ada9b7e6bcdecd676020141df02163aac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a906e4dd9d37dfce908cbae90e58f3dbf</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a52d5136abf9b7cac2d0ad0200745d30d</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameB=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateTransforms</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a120abacab53cf4dcf4b97241dc8a59b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac07406023183e740c83fd2496d7925bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a1087b28580bb83bb78971fe51fb13e33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a7176773536b82ddcc72436723c511b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9c812e88a5cacb1bc25a8cfcff1ef2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae3db527792dfe26ef27a9e06f6d90215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a1dc836713b773f511ab12f550c3e0d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a4e623a380e57cc52b8b6c4a0752c1acd</anchor>
      <arglist>(int axis_index) const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac939bb21243ef0822d60cd8a12c8aec5</anchor>
      <arglist>(int axis_index) const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRelativePivotPosition</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a586de3bb264061f744dcca3ae00352a2</anchor>
      <arglist>(int axis_index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ad0fd838dfb528aa5d473236951452a93</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testAngularLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a510f7c50e1db34da7587e29be21cd95c</anchor>
      <arglist>(int axis_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac2635d4d1f732dbaa0607a39c42c1fb2</anchor>
      <arglist>(const btVector3 &amp;linearLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLinearLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a985b84a9bf3dcdf319d5bf246785359f</anchor>
      <arglist>(btVector3 &amp;linearLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a36ecbb880f9b8d1e47295a8cb4d38ac2</anchor>
      <arglist>(const btVector3 &amp;linearUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLinearUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ab5b34b9f7c16ab4d92c4c5d87836eb75</anchor>
      <arglist>(btVector3 &amp;linearUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae30482945c39ae7b4fff65eb1e11c804</anchor>
      <arglist>(const btVector3 &amp;angularLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngularLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8bcad5d1bb5a9a207b69197f2a9f3b17</anchor>
      <arglist>(btVector3 &amp;angularLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a09328e27ff0e4f5bf3c5f4fc399b5176</anchor>
      <arglist>(const btVector3 &amp;angularUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngularUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac2d82f1fc8c0e094c62eaac8c46fae8e</anchor>
      <arglist>(btVector3 &amp;angularUpper)</arglist>
    </member>
    <member kind="function">
      <type>btRotationalLimitMotor *</type>
      <name>getRotationalLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac6a76e51f39374b052905e9e6f1a2022</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>btTranslationalLimitMotor *</type>
      <name>getTranslationalLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a555b6ae5c5235623a83f28e28c718235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8492ffdcfe56852bfc3cf940d955fed5</anchor>
      <arglist>(int axis, f32 lo, f32 hi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLimited</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a4b7ccf539945ec18862d03459cc7af4d</anchor>
      <arglist>(int limitIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseFrameOffset</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5e88bda1b6f298611499a60e0a431587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseFrameOffset</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a7f85647f957150c306f7086e6a36fc0b</anchor>
      <arglist>(bool frameOffsetOnOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a476bea05db9265b4efacc503b6693615</anchor>
      <arglist>(const btVector3 &amp;axis1, const btVector3 &amp;axis2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a3b050c4ddab9b226623135ecb9dec512</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac1f4221ed69f3f6df33348cf2123b927</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>af660cdb3155d3a23b7e394b630820c4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>aff7fc613100a3eb894ffe4902686fc34</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a79f6a9c86e5f8b1bfa62d10408fdc1f8</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8bd02fee540096217a59434f204b3791</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a54b36cf8a877dccd1b831c4e70d3b213</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9b8c9c2f9f8cd61378a30b4cf8dc4c73</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a2c58e8af3812ea44ac47395f1b147461</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5c2718defc17ccb5f247cd5151cd8a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9cc10b347756198caf3d519bc4a73acd</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a7b9691c73edd82ba0d12d2e8d5c0a02f</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae50cbc7db6e709453f0cefc167a12ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>aac1093596db0e6f80bc4e055a3ea87b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6Dof &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a80440d213cb2df256a7b0afed3278cd1</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a80adbb02f8ee839af9f5a897982ac7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>aef7026b4db8c6ed579e7366401a88233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a3773c6e71979f95c34b5d76f63d57e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGeneric6DofConstraint *</type>
      <name>m_btGeneric6DofConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a621259b5a4a7a54505a5c73e30772c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofBuilder</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>aecafa957a0d40d3380402ca7c43b254a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>af3f90a8f596de035be413b0861388485</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>af8a20aeb5d50fffe198972150dd4c3db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a6baacd12c74ea7835c403f435351f9b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a3d2be074130ecc138572cc76b75a0413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ac919e92b2e196f98760ad6c38972615b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a3c823d391d725273075a18c3caed3ad1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a955e027fd3a29bdbff31f04a40fb7e50</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a70d1d51b08b84248a08f747d848e10c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a0d6fdb9735a2131346060a1d0a752f3c</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ab15055ba044d2610c9b6becabe9d11fb</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ae1d6f94af8ea0b98baafc35d531b7666</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a7609190091b67ed5d603e292f6a857a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a9873aa55e683d5d7695ec0e0348a4f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ae3cf05f6e1f05f3257695e60f02bb4ff</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>abf75fdddeaad061b3540fc62da0d809a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ae9ec24cb96ab297f675edcecb1d95d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a02e9f2aa7d77468fe1be789353ad45a1</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofSpring</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_spring.html</filename>
    <base>njli::PhysicsConstraintGeneric6Dof</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a131a9d6cf090bbe38eb6b03b9590bb65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a92b6361d3b8560008e0f84f1f7ff390a</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a7e714b2e49d4614bbeb5148de5121db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a1e10f31d8472a1137f0146f95efb643b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a5bc5bf70e7695adb20faa1c68b277d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>afe3cd6485847535d9f02c35f289113fd</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a48675ca9439612df9cfb029216ec1e6f</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameB=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ac9ee86dda7ea98b3e06130e5cc07a1d9</anchor>
      <arglist>(int index, bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStiffness</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a21ba981d8b8c8a7ea383e99c94ecf2e0</anchor>
      <arglist>(int index, f32 stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>afd76f8cca3ad0d36b0426c2ee8ed2842</anchor>
      <arglist>(int index, f32 damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a40d2ff0ac7576828303e9865f720454c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a15198ee1c2433da2bee647c18b06b891</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ad29953e4752e238af691d92da16673d1</anchor>
      <arglist>(int index, f32 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a0760beeaa44d4a2fe12232df8eec682e</anchor>
      <arglist>(const btVector3 &amp;axis1, const btVector3 &amp;axis2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a2a886fd1f0af915ec896c236b1921c2f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a7f2534bfa41962c26fc08141f588828d</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a24a6bac7b80acd309541f83db28b667d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>abd833489c75faa60dd17c938415ac341</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a2c6dd18f95504384e287457db8b62b5b</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>abebd4ba412abd7cbb92142dbdab03e02</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a4525b121f40803f6fca5bc145c984fc4</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a6c56b8d4ac48a54d778e4961c29abe78</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ae0523078617dc139e8b86374ce4c0b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a3477772fafe8745a8963235b7eddad65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a9debc78b7868e3d1af4a5e3876f50a19</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a7520f002b92a424ddb5fd19e52c7a47e</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a916ae50f81fd16538e0700f883a84302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a7472e932dbdcae7725799a995e150112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofSpring &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a12e77cd3746f26e1cc0d2e819484fa0e</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a4275b8c7c3fc79ca628bf2b800a003c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ab1dbc79cde6f5ffa8dd12da01df4dc46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ac6cbcb76a8f92321ae18df3b7de4e4a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGeneric6DofSpringConstraint *</type>
      <name>m_btGeneric6DofSpringConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a493a869835cd8138ecf3b347b9aa7373</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofSpringBuilder</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a5468aa6ab6d768e655a373c43990f6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a46557b6cce7d900460e7af8b6f5dc1c6</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a6d06ce150529a38282bb0050243a75ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ada1af7c1114fcdb462a31f8bb49f764a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a5eae2949a4ca699ae82e23c415564371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>aac5575ec2c409c35a7558a4ee4e2106d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a24ed4481c7c6a1072123f66126b83027</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a370dc0856ec62bd3d8a3f17af0fdf240</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a2b74b57cc7c6f402986e4c43ad1cd4ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a5a07673c19e66df75385a3b8c8d68d8f</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>af0a4738dd8df20bd6092bc983e18f17c</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a3c03c18388a61a03055945a4af69376a</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a711e3c6621642992a4e86952b60ddb7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a96e7fd9eab29846c27862aadd2c244b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a0d7ee2c28da321f0eb592911ae6a4e01</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ae304eb3d0766c52d3d4896faa6865567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ab52463188c51427a2c1f3d2a1613290f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofSpringBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a3014e6564e6d1753b0381598b136d4e1</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintHinge</name>
    <filename>classnjli_1_1_physics_constraint_hinge.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aac3361f987acd0721ecc2ddf4f9351f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a6370a93b9ee0c355846197972d03dc55</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a36b3e0c89d7fb88214abaaffe7432de8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a45d8fd81c6bb33fbd1ed7c7fc5f02c1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>af9766c9dc1a770cea6713bcf30e9ae98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a5c4c4f472b136fadfa394109a8ae9e49</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btVector3 &amp;pivotInA, const btVector3 &amp;pivotInB, const btVector3 &amp;axisInA, const btVector3 &amp;axisInB, bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a388cc9189f0c78a9587b706ea6b8ae78</anchor>
      <arglist>(Node *nodeA, const btVector3 &amp;pivotInA, const btVector3 &amp;axisInA, bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>af0950830b79cb1999d47bf8185c72e34</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;rbAFrame=btTransform::getIdentity(), const btTransform &amp;rbBFrame=btTransform::getIdentity(), bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a26455b3460d3cd8581359bab0f4fcc94</anchor>
      <arglist>(Node *nodeA, const btTransform &amp;rbAFrame=btTransform::getIdentity(), bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a41879aeb65c2309db2e1bc91b8b30c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a4843c9a99ba7f78e08ed5f15b460283d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ad4be215d7284b01d8122f0bf770c391f</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a29156cea121d2887e74204e3bbb79adf</anchor>
      <arglist>(bool angularOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAngularMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3fb601299961f642b0b26ace87759e5d</anchor>
      <arglist>(bool enableMotor, f32 targetVelocity, f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab51a1cffbd35fd20709566467fa22bd7</anchor>
      <arglist>(bool enableMotor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ae923a5eb9ea4e2d19471b448e61ebfa8</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>adf853f9c76676b2f6bc13f8f8196ce4b</anchor>
      <arglist>(const btQuaternion &amp;qAinB, f32 dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3d60c1cf68fb85d408d20bfcd49e5df5</anchor>
      <arglist>(f32 targetAngle, f32 dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a658f010e5decd6e9dea4f239333c46de</anchor>
      <arglist>(f32 low, f32 high, f32 _softness=0.9f, f32 _biasFactor=0.3f, f32 _relaxationFactor=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ac29154620819b36709e15be9e11275db</anchor>
      <arglist>(btVector3 &amp;axisInA)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0b94725d347514cd460cf34458be1def</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a698674e5348daa0fe9e6b159affa3a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHingeAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a25fd1c88775b227aeda9b5f6aeae2a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHingeAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a1cd6383e545ad3a933f4be9a2ffc7507</anchor>
      <arglist>(const btTransform &amp;transA, const btTransform &amp;transB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a76aa725a1ea8033ca1ddd45ec1e30143</anchor>
      <arglist>(const btTransform &amp;transA, const btTransform &amp;transB)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a2178de239bd2f7a76cd6f3aa8cc6cef4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a91d1c1de10805ca228bc1cd1bb82cde5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a70d0272a7245e8e33d873f0af84e3744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>af2570fb96a51b3deb0692e9e0e99b954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ac579e32bc5bb6a7d1f3ac9dfc3f94d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLimitSign</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a4e4531b90a04163f97716276d0bb0c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a703a002e1683957b19e4623299ff414f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEnableAngularMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3bb7a607cc9fb96b1a56093aac70731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMotorTargetVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aefd276bcb6fd0e6152b6f5e102350ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a03960cf6d81fc9496f662e537e379d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a6cf3621c03f63512a8c9b26fac1587d0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a94bfe98ed6d9c38951075e41d1282a1e</anchor>
      <arglist>(PhysicsConstraintHinge **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0618f3e0c236cfafb85a050fbb2c1188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ae922cc582558d8dccbca9d378b80a8e2</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>adee20be1239babb898dfd54c337746cd</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a5dc766123cfa5bd167c861d20240473b</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab2e2b116755296eaf2a01b3fa3f0f45e</anchor>
      <arglist>(PhysicsConstraintHinge *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a8a5d2d3e17b29e1f4d7e90b945ffb884</anchor>
      <arglist>(PhysicsConstraintHinge &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab9662299c8c38a273c968d3e05ea5990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a98b095bfe21e5fd303130f8991f39552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a560929857ec13439f35c459bc326e583</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0487d3ff017819816839de83fa450ad3</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a54cc154675629f9c1fefb2caa925cc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a54306ca36a99e733d32aa30d9e7831b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintHinge &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aedfd144f8ed9d61ba8c466a8a1452e54</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3a111206356776c6310fc0b5577b706d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a312b00ae94165d9a5216d20eb6329862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3687082a76b02314253e47e4c0f43e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btHingeConstraint *</type>
      <name>m_btHingeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aeb5449d17ea4a80fa37ac059e3fba661</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintHingeBuilder</name>
    <filename>classnjli_1_1_physics_constraint_hinge_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>ada9ced590d113d177e2cd01167c0282b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a30127457ca74f08311a33b3c26a307c8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a6501e1753e41827b148e5b0e73a3e87f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a1fbdc83f13494c40ee52b892f0cf1ca8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a9f3386c463a9dea271b332efb0f86ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a44293b3af174637ad2a41a988cc0cbce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>aaaf5f53d8da5733f189e3b73a3dd5132</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a07639530b4968f8bf4d6ee1f8dbe2df9</anchor>
      <arglist>(PhysicsConstraintHingeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a4bf2ac352b78813a82f0a7a396795bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>af60f343fbe2a2905b179043cb66de969</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>aa76568482ae974696f403f5d5fc53ed4</anchor>
      <arglist>(PhysicsConstraintHingeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a6d3ca2da464fbc2b9be5969796bca24a</anchor>
      <arglist>(PhysicsConstraintHingeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a32b846af5fbe0a42c3b2bfc58213473b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a97d48d59e59a383e0a0bf0c50f01851b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>ad35c2cdc791f1704662d5feeeb4edd4e</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a53d617c2c8f9e304d9590d9f69375653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>afbb64e74687f5639cfe3049d7410040e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintHingeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a38a1bd52c8b4779ac1c816216483c3d1</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintPointToPoint</name>
    <filename>classnjli_1_1_physics_constraint_point_to_point.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aa3aa6fec119b3c037126333c834cbd2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>af64b3c95fcb47c28834492619a58359b</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ab7ff148a5839e7ceb4cef82a360b234c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>afee75c880fdd5fef409dbb74806f10f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aeaa2b89e8dce62b5d8f55f1acfd2e239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>af5f949ec6492fd8c96d5ae03a3aa6436</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btVector3 &amp;pivotInA=btVector3(0, 0, 0), const btVector3 &amp;pivotInB=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>acbf07690cbef3072ee6b5c141a4d21c5</anchor>
      <arglist>(Node *nodeA, const btVector3 &amp;pivotInA=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotInA</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a22513468676e92e523caea9e7c0e5ae7</anchor>
      <arglist>(const btVector3 &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotInB</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aab12a17b9530cd91700860c6e8e1fc3e</anchor>
      <arglist>(const btVector3 &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPivotInA</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a5c8d149faa6e7fbbc0822d88c88a6958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPivotInB</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>af114b052bcbcc8487dc9a88f12b7bf51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aeaef58384c9b06ff4898aa4b76bcd2b5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a87e9a731123d0691c0d282b125079745</anchor>
      <arglist>(PhysicsConstraintPointToPoint **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ac9a36e0ca648bff222841a9fbaba4603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a1483f8bdf075eedab308f270c2e9139d</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a2a5783aab87171d8c38a70e3a6fc15ad</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a90128200f523d807c39d569b47cc8a16</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ada8f691b6621b4f2fd3320f9a805e444</anchor>
      <arglist>(PhysicsConstraintPointToPoint *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ade89274d4fbde980add05a4f36aa8563</anchor>
      <arglist>(PhysicsConstraintPointToPoint &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ab8c849ce13f9de7f7ebb2ff5a864efc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a6fe4d9bb07a35df5e54e96762f305905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a2d1e3de4759eff8e43b414401a4508e9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a6809b9b60c90768e4677b9b398963073</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a07981bdbee82db7870f1fb69fbf190d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a128118ea45fec8623119660813798778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintPointToPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a5544834564e4330505cab92dc95c579d</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a3aa69c0d4f5c97e9f8ce320f57513ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>afceddf312da4cc1472572fc61a0d5d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a99d3fb0291ae4c95be0ac90e657d7cb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btPoint2PointConstraint *</type>
      <name>m_btPoint2PointConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a54d76a95cd5fd595cc8c71715479cccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintPointToPointBuilder</name>
    <filename>classnjli_1_1_physics_constraint_point_to_point_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a1a5a754f512a001ccad0b1c8e341f9c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a02f2103234e8a554f7a95806f0606487</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a22c10bf0abad85548e17c22d43599789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>ae7ee74b5241adaa1711ee1ff8e3069f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>aa2f27f7efc1da0fa6fbac0d6618642e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a06ab55808c1573294da2ba7d69a8aa5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>afce20b88566170cd4a32a33a88ac0410</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a61f280a29e4a9327dc91c733e7379dd4</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a4df74dc35474d49c5df0601c1066bcf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a400336a8f425ac133fd36b5ddecb2336</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>ab4aac6f9b6050c567089532220441a48</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a1f23d3d6daa5c3512cb94a02e3583d63</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a799b4988d901c75dab3edb4c54ff3d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a636b1167ea436b1dd497e0072a60a81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a8eff4e6df18c657ef2ff1d4d28b4631d</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a684ae02356a40345b8ac6c981ffdae7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>ad62059bcff46b4d248710cad2f34573e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintPointToPointBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a2de38d23c0ce793253a2bf778797684b</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintSlider</name>
    <filename>classnjli_1_1_physics_constraint_slider.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adb1fffea09213fbc9387d12cc73d7108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae560842deb31201f2c5dbf2312d896f7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6317bc6756539b533aa1712b81c75c68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a47f9ce95b9ea5b97760bbf5623af0d8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aed1d740ea47733a651ac869443ab31c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a57013fed17878085a66adbe06df33545</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7e83353e02b081ac6b1a42ca52239455</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae0cd9c2ec5041a0c01330a283d93bcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a50877636ae7a7ace94bef3cb6ad13f49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af05508b407296be50007ef8e8d728410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ac4f8efe00193bb26d5dc5077d97376f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a14401e190a0b8b974bf03fc57820fd7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aa47e6e4ec6a280f30a57f3d73bae1fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a2f84890f5c02e1c5ca7caa2c930562b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8ce84b863a5f45630d74285509a5f72e</anchor>
      <arglist>(f32 lowerLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab3f5c8fdee3a5425050e672ce7cd51d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3ff24369c4200448e7854b3b64943656</anchor>
      <arglist>(f32 upperLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a236211fb9108e12d05d70996c77f9b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aea8072c63719f2d3be84a02b1cabb9cb</anchor>
      <arglist>(f32 lowerLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9a5f4200038f730b6258fb192747821b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a01abc657d56a32e5eb36acc2733a7178</anchor>
      <arglist>(f32 upperLimit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLinearReferenceFrameA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3c2943c9560065c56e41b14ef38d9060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9d871722b5c2e1b81bcf64a1ad418061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>afd4c73d7f0752743917d974340fb6c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a732ef9c25c7b514691e56e1bc73e5aa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a31f607f773c5b6f827d27f5cbd43610f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4869457f8a4a2cfc71f66606ccd942d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae8c4b265141b12546818c7896867f5a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ac93374ab5758d4e78bb38a1d42962642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7b7d150cda0db00189ecc492373486f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a711a6208ab0d7de999c4db1a46c5320e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6462fac6e59d92dd741b200973b9dfbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4745cf240bce575b18b79d874a39e6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6e763888cee48794371c15a6fd811925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad408d1f551357257116871c118fa2f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a11920f6e958b1591cb1faff980aaeb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adf3ced5f93349660f8a34231b1fc03c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a5357f2567ce7644b56c42215aecbabe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0c4a8ac866dc4d7f487d2eb6ea00116c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad03b7dd2c7a81e7096bd813ea39b95a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3aba80e223b149a32c93de1ecbdc7fba</anchor>
      <arglist>(f32 softnessDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6d4b746ba8c203158d7cc30a00b138b2</anchor>
      <arglist>(f32 restitutionDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a51eddef7955b5089ff178c5c06c7bbe0</anchor>
      <arglist>(f32 dampingDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a38119f35a3296c2cb3d296b216d9fad5</anchor>
      <arglist>(f32 softnessDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad61cced921c56be733113123f8cdc701</anchor>
      <arglist>(f32 restitutionDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1db5431eae25f429aef438a3968cb6c8</anchor>
      <arglist>(f32 dampingDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af8944672819807ff34698dd9ca71fa8c</anchor>
      <arglist>(f32 softnessLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a70acf1aa88472c443e002d4153f39fc8</anchor>
      <arglist>(f32 restitutionLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8da4bf74177a1ccf1c783e2292f24008</anchor>
      <arglist>(f32 dampingLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acd70aaf79937089b08b6ef30c8560761</anchor>
      <arglist>(f32 softnessLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a72b12ab4f85f816949b59ba75385abf7</anchor>
      <arglist>(f32 restitutionLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adfa0e530b168847156b10884457039db</anchor>
      <arglist>(f32 dampingLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af6d2ad8ed10a4634f2e0c9e15a43cf75</anchor>
      <arglist>(f32 softnessOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a46d8a90d1a17e728e2836d020204968d</anchor>
      <arglist>(f32 restitutionOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acd555aededdf9800e83c513603005a40</anchor>
      <arglist>(f32 dampingOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3eccd87e8fb25f41b0668cf4275f484c</anchor>
      <arglist>(f32 softnessOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4fd93409b01a00f7307a3483155d1a8f</anchor>
      <arglist>(f32 restitutionOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a08c148b76585f4d2abe9f8569db6e311</anchor>
      <arglist>(f32 dampingOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoweredLinMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a442e22e2e620cd3aa19451c239bf7fe5</anchor>
      <arglist>(bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPoweredLinMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7516538fdd1c4defda6def5290e93eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetLinMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adb621e16230cb8e01b05738667e9944b</anchor>
      <arglist>(f32 targetLinMotorVelocity)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTargetLinMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab66ac3f4e1e63a699a3ebadf275b6437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLinMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab8528b7eba6a82b9dfaed9d246ba784f</anchor>
      <arglist>(f32 maxLinMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxLinMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae4a60d9f5ce61a7a9ab432573ebadc2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoweredAngMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3485779b1dbe5d3d7922d71df253cb9e</anchor>
      <arglist>(bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPoweredAngMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6ad2fb16e03ebf5f93a83f762de206d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetAngMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0c5c5803511412299e72f8ab147b6c9e</anchor>
      <arglist>(f32 targetAngMotorVelocity)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTargetAngMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9f765345742e2ca1fd00a8bac20bc364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAngMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3bc3e5a8ed7d5d139f826f80baf8a4e5</anchor>
      <arglist>(f32 maxAngMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxAngMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3431f4ad0d98ae77b47c94c20afdf46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLinearPos</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8c4033e72d8d129468ef125c5039303a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngularPos</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1586f610b89f8fe781caf8b2901146fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolveLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a5a708d3b494cedca05791f188fd8c6e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLinDepth</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a398bd60beef995b8b39e92ea6b7565fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolveAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9bc2c78196e81aa82a7708c0ec9e0628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngDepth</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1f98662c2eec6024fb68e54031afabed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aa094607cc490eaf1edcf429267d76070</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>abbfebe75f79b16de7c1081195376a6aa</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a36655252178fc77a038605f659f698ff</anchor>
      <arglist>(PhysicsConstraintSlider **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9d100eb408c5fe3368c19a5ef8e7c0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a13656025fa31516faa29a21ea60f6df4</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a77120e1b4c79f8113a64fe317da6e48c</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adb72f35263483f9459fe8851675c9c75</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a515850d72eb6f874bd466514628ba3de</anchor>
      <arglist>(PhysicsConstraintSlider *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a29c57047fcb138caa6b1676793e3b0dc</anchor>
      <arglist>(PhysicsConstraintSlider &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a15bb7d856c217270a4ec4f68a0691b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a616ab8c83dfe01a481394ff21db39fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3ce0e8d15d15fa8e39503be30a9aade9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a836a6d7a6b5fe8ff58631b750d867d4f</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acb06c17a06f8ae0163d564df18f9a05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad1203c1a908efecb780c3b7a531729ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintSlider &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1fcdb2921330945369e7fa004394dcaf</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1e8e6c6404360ad11065c950a5f4e158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a694023b6aea7cfef3f629a2ab513b4bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8573637607b49ded72708c33e886b581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSliderConstraint *</type>
      <name>m_btSliderConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>abeac39c96abf6541fba28c9630f3edd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintSliderBuilder</name>
    <filename>classnjli_1_1_physics_constraint_slider_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>aa8da19d67d23ec885441eb22bcbb2ac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a485aee6ad4c028ad34cac1021f08876d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ad4d863ac8c005cb6061ca27f9e6d15ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a94a7356c029e048e55ffdbcb1f4838de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a34c9c509f8897b81a014ec5c114d8434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a4763fbb07cc98c6072055c6229146041</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a17d0f4b823be0acd731ee7e8b0b5347e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>aa481c744f76fe339a7f5a2c6cdf81be8</anchor>
      <arglist>(PhysicsConstraintSliderBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a86222b453e685f6431b16f8356d1f5dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>abdb944b1ab008a6467c411f86605b699</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>adbd9dd286d1fcdfcf6fc9982276e708a</anchor>
      <arglist>(PhysicsConstraintSliderBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a59d1ccadfe9b3effce39e5329b9bae3d</anchor>
      <arglist>(PhysicsConstraintSliderBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a4f31345a28ca112340dfabb30b17996d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a16177681a967d5d1252b283a5a730452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a5f2070b8a634fdc49a3c8ac1f6e3abbb</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a7493730f0cfc648a7ba4e1220aece78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a84f2da580e574a54f99e6623f8db3483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintSliderBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ab6fe74eb75047bdf92560dfddfc5604f</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsContact</name>
    <filename>classnjli_1_1_physics_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ab705e72f7d883de64d7cdae8014e0d8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a15e18faa54c37dd27323e2956aa89b97</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a6307e23488ef043b39e314394d4cf3bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ae15c47f7a9adcfa4f68f8a0ccdca2b84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a954bb5f88bd59a9a634b75f8665cd4a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>aea2b5348ab2ead29e0d0adf8aa55ffdb</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>aac5fd060b375a86599d0bac0b0ef2adf</anchor>
      <arglist>(PhysicsContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a68856836bd650c8929874f688f8e0d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a9a5a9b6aae765356251531e50a0c6b4b</anchor>
      <arglist>(const PhysicsContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ac08b3fd72c5fab52d0f7a5e7a799e9eb</anchor>
      <arglist>(const PhysicsContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>abb188a9f3873a1bcb74210a59b73b686</anchor>
      <arglist>(const PhysicsContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a107201a172f22eaddad5b1c3b6fdacc0</anchor>
      <arglist>(PhysicsContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ab95a869c5ae738f93669c6317550d7eb</anchor>
      <arglist>(PhysicsContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a2ccd9d58c86ba5f8c6cdd3fea08e8b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a53734d054c26b23065f2b994e9f8153f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a31d3673b8451cfe4ea8c0c2e3436a593</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a1bb94f2e84e93ae7060f5d0d6edc20c8</anchor>
      <arglist>(const PhysicsContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a0a658bc8a36f2dca0cf9db21627b9d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a1e56aea61285e17103fef941ce605d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a26ebb4395a78da1e9adb32e23d5e8401</anchor>
      <arglist>(const PhysicsContact &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsContactBuilder</name>
    <filename>classnjli_1_1_physics_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a2a02dc05fa53015014531953eb2f8b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a6ed5085fd6a8abe3b662bcd649213c0c</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a87bed092f8d866b5ff1e69710eed86e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a8c31ec0db9711bfd63c753cbe94654dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ad7cff57d9bbe7b7a60b4a9375b38a532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a292b5082e0718ac7185a424656c16019</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a234f8e62bfda34b2c6b6b7c9fcb1b914</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aa50619373f51c9aed0ff2dd0e8fbbcb0</anchor>
      <arglist>(PhysicsContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ac0f0bab916ee1f7876ecd8c0bab32326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>af21130d51412efa203fc8c06a59e5dcd</anchor>
      <arglist>(const PhysicsContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aa8f75b8ea270481cdf3ba9e6e3e0d40c</anchor>
      <arglist>(PhysicsContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ab69430b276c0193bb14e6b8beb685400</anchor>
      <arglist>(PhysicsContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a90c7c9dd3b26f7a6a710674ac47aa942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ad209941717768086727443fd39968c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aa3d78f8ae98c34f524193dd22699bc47</anchor>
      <arglist>(const PhysicsContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a95e94b2fd50cbd2ae7fdea2c617a57a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a3ec5df5bd687f01cc5b837dfa1bfa3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aa9f8a039e172303ef6a335eca65b3931</anchor>
      <arglist>(const PhysicsContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsField</name>
    <filename>classnjli_1_1_physics_field.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a1bc3320c890689bfcd1c5950ebc9169a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a21072975305b1ee5a43a47781397d421</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a07e3e967ea762a5e3df7d9470974d2ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a4640b79f7a596befc244367dc1d56222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a204a9f5976013d8cbb40247096f09af5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a23cc1330dcef58e656c516f4bf79bad2</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a0933b3035670cf38da1bfa22d338a313</anchor>
      <arglist>(PhysicsField **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a42caa064b08c82aa74b1c3026a5d9b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a32b55274fa3c7c26d1b2acd1e8d8db0c</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a9e9ea44a86d5290a53407290a642de9e</anchor>
      <arglist>(const PhysicsField &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a8dd0e36c82f223ab34226fcd2b28f915</anchor>
      <arglist>(const PhysicsField &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a78c02784c89ce72a248a3f2ae52e1b91</anchor>
      <arglist>(PhysicsField *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a3a1453acfdb7ec71eda956f1fd861d37</anchor>
      <arglist>(PhysicsField &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ad253dc3ab8bdb352dac6fc1a68638fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a32d6673e4cb636cf54a03d50dc68fc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a44e9f7757b2ebcda987938a0abea31b3</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a927f25e2cfa6e4dded2c44b4b15600a0</anchor>
      <arglist>(const PhysicsField &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a8fe55cbe1f75e559d88ae147b2da3ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ac89479428b03c980bfccfb08db297141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsField &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a8da6682085f6bf2077ef9bcfc09ce52c</anchor>
      <arglist>(const PhysicsField &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsFieldBuilder</name>
    <filename>classnjli_1_1_physics_field_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a20abadb127a3916aed64f413fbcea4a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ab041158a6d4356e3f9f774b2ce85fbe2</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a39414a230ecf44531e2997d6a3913962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>af418a41636f3c04fc8ed416a1e421700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ae6988c83ce7daf8f1d22bee81e0116a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a919e962a843e1deae904a14591b94de1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a1a063105cee8c1a3c1a0d9c1d61785db</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ae9049866435071f74baad8e82f4d7c0e</anchor>
      <arglist>(PhysicsFieldBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a72eeb644cd2f24d4b3b3c8bb8962aafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a3ce06add0cdc49fd70b79440056df053</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>aae9b0e1283bac78f386f36ae794c1fd5</anchor>
      <arglist>(PhysicsFieldBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a3be0d7cf0c39f6c132a1ee7f4c609657</anchor>
      <arglist>(PhysicsFieldBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ace0c03a3bb1cdace7c68ab173789ff34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a95423d081d494102a825469955b93731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a3a79f5d4bfdf77e2c41cdfad8ce61f66</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a61855181b09fba8e1f01c3626d55abe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ac7ec8ac9c1feb0941d551394ae0414f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsFieldBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a06ad2e7b287ee6c1060c01f873f2d0a0</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsRayContact</name>
    <filename>classnjli_1_1_physics_ray_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae3016059de8f00570bde0482e2ee6f38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a0145afe364fd8ab6f42f5180d7bd07cc</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ab09becd3893ac48b3c0f3c93689a6e11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a3b7efb67bb8d17acf6d567fb2b32d0c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a97df8964fff2dcfb91bc2535f3a71494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getClosestHitFraction</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ad7bf47e0248a17b27a701917c37c6c62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHitNormalWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a8df150c702029fbfbff1567bf4ed12a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHitPointWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a15027f23e05c48900b94564d9fcf5810</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getHitNode</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a4b49cc8af6f377ae85b475aac9dac80b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getTouchPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>af1d84cd9f384da53303838328836c3b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ace260da43b4ea946bf88ac7877b0a959</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a2ac1247bd1e30abbdd229def7d01c0d9</anchor>
      <arglist>(PhysicsRayContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ac38f6f5f2e8466ec62891cdc4277932c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a4df09376a9841d7d8e14f7a4f8459653</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ac6cc45d477b16fadeb3edb929b2f7e2b</anchor>
      <arglist>(const PhysicsRayContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a96a3c1af257f77e3b6871b9ba2de8ddd</anchor>
      <arglist>(const PhysicsRayContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a74cdb13079d22f5576e32980f40fe4b0</anchor>
      <arglist>(PhysicsRayContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a666bebc24aac5161f10d5fc92dc10683</anchor>
      <arglist>(PhysicsRayContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a6faed93b6f2a3d94b0a8a435425a8cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aaf35d126b209d8f09270fad928faa51a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>adf6960ca7a232ee4d2d58afc105c1883</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a158613e1edba5d0175a8a0cdddde1109</anchor>
      <arglist>(const PhysicsRayContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a55b296d9dbe3cf8aa8e886a75fc8c0a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aa15e6a928f87f47d29484c83b2f515cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsRayContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a17ec4a2ed6d658702cc4ce4ba5cf9319</anchor>
      <arglist>(const PhysicsRayContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>screenPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae44f643d72f6feff01536b0514ea2cf9</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ab8995b347efdd2ad6d096dd0a0359977</anchor>
      <arglist>(f32 m_closestHitFraction, const btVector3 &amp;m_hitNormalWorld, const btVector3 &amp;m_hitPointWorld, Node *m_node)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_closestHitFraction</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ab45c460f290a435ea879528f4dd5b372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_hitNormalWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a3cc7540d9aff7dad7860e6910aad7b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_hitPointWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a8bb6d7b4281cb7a5f36e28f87d1a2d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_node</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae315ed84ad9ab0f019a7a515f5a30f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_touchPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ad676d79b15af074e79631759e42f59aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsRayContactBuilder</name>
    <filename>classnjli_1_1_physics_ray_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ad08a90c7326568674cec639372364b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a407b99a6d3ba2b4f80d22e307262bb49</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a9fb6f384d014212e1643b906b61c18c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a8fa9045fc1278eb982d7970a553e4859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aab730f7f348ffc037bb535fe5adee793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a56f867d6c5d870351dcd8cf1057ed8b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ab5c6ba0d7fc1cd4daeeb8dc5c314b647</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a8830f392e9a482553373d8163a36ff74</anchor>
      <arglist>(PhysicsRayContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a03199cdb43fbf8fd850a626cf9849d70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>abc4aa42c67d025b0095f6788c80c2d37</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a3296c6421cba078b952785c9e0439c4c</anchor>
      <arglist>(PhysicsRayContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a626cf6366380ec9d8d7758d02f28796a</anchor>
      <arglist>(PhysicsRayContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a7b794a6f1cda9e60bc242730f69e37af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a25c1c5ae3477bfde44b1faf6c3bbb837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aeb1ccf771870bce935fb22296535b9a1</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a84ad29c8600360cc0739cd7715045dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aef265dc45eb7e9ff5ad69029b1e70e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsRayContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a28d207699d5ef0232c9223752ed15160</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShape</name>
    <filename>classnjli_1_1_physics_shape.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a0612a1c8c3f4520d78cb7f5838f03074</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a2ac8a109a5ad67ee79f40ce8f28337cf</anchor>
      <arglist>(void *, btSerializer *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a72cb98a55614a3e264b8e4a157b45c64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ac7c6b2ac373892095f8220d56f8ad6de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a890d915f88af06dcf1ac1fa4f5943dc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>btRigidBody *</type>
      <name>createRigidBodyWithShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a34c1ba7fde5cf7b3a3a1668afe4362f3</anchor>
      <arglist>(f32 mass, btMotionState *motionState, const btVector3 &amp;localInertia=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>aeac0fcfb3b02dcff4d0ffd93c263e530</anchor>
      <arglist>(f32 mass) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ac3f7cc28341fd58ace164bf8666480f0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a24df999ba2b7ac0d9abda09c4f17c2fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a657e98309a2a171ccb02a054a04c9b57</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>acb05a16bdbfa5cee6dcbab5c253eb78e</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a11cb80220393bfce177b8bdc34f7f359</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ad5418af48c1210d6d5119244826cacbb</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a346a118ddc9e6b446ae7a8586fee76fa</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a1aad0eb543d07cd8e8bbab13ca223224</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a802fc3b997d91363589f4c2261ccef14</anchor>
      <arglist>(const btTransform &amp;t, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShape *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a7865ac4279eafcb395613a2c4b8ebe42</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a8b1225c00377ceb09302140431a5ba50</anchor>
      <arglist>(PhysicsShape *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>abf307f3ee9b2e49ea7550565b3514e3f</anchor>
      <arglist>(PhysicsShape &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a9f194ce127098fc6add0a4f481ce2a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a23c941342461cf9b8ea3a00f96e4b166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ab15fa64eb27e24f04baa5ba707a9a030</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a16a9abace510dc1886f82c09782d2976</anchor>
      <arglist>(const PhysicsShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a60e97b3ea2073db45dde247fd1c7d379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ae30b96cc4b222db769ad914836c0bfc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a55b6355b6554cb1edbabd588fc034581</anchor>
      <arglist>(const PhysicsShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a527e956caca24bf16ed0d47f69ff14e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a2910f0362035c971f245349a55378b01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a441e82a42f3b588a409c3b6c41288abd</anchor>
      <arglist>(const btCollisionShape &amp;shape)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ab897653d978148c447f711c52e3b4151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a109db2ba649b4f5298288f8d35bfc3d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox</name>
    <filename>classnjli_1_1_physics_shape_box.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0f4fadb6794e5366041b7f29a16930f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a5ce79fc6e0b6f39f284d41ff68e6aeaa</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a6f5260370dd815c241adeb39eafd6f65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ac2afbca662cb4140296174556b17a982</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>aa9de0f5850c2d8ae0c89f04d4824795c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtends</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a25c10d3f2ecac19728eb1696f566bd91</anchor>
      <arglist>(const btVector3 &amp;extends)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getHalfExtentsWithMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a4c827ad846e7d8fda41b186653e6a474</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHalfExtentsWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acd1d5cbe06191b94961fcc6d57b677af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>localGetSupportingVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a324ac1decb688915ff5300183efd4b67</anchor>
      <arglist>(const btVector3 &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>localGetSupportingVertexWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>aaa214115692f0e381b810c08ecf09b61</anchor>
      <arglist>(const btVector3 &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>batchedUnitVectorGetSupportingVertexWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a50e5c2a1368b9e6cb4cce7e8f67481bd</anchor>
      <arglist>(const btVector3 *vectors, btVector3 *supportVerticesOut, int numVectors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a44141f2092a02d14d8b3d1036c53b709</anchor>
      <arglist>(btScalar collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a40da14b27fa8393ff1773df4291f2103</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acfb18bc2f20f94ed88af1503b7bc8634</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a39e472b94b3cb8a583a5f6b43751695d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0d2afa637d60213fa2d492bb6f443aa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a4189d4bb046b5c8947fba9f21f1e19f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ac3aa29854bbb045354a3f83bf082c219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acce2a7f7e2604e8d163352d3432ca037</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlaneEquation</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a258b6f41212088663bb1d28257ef6193</anchor>
      <arglist>(btVector4 &amp;plane, int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ac988976b246a11ba7a6151d8c642c23d</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a2f1c54644a508c92527143d547d5b668</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae913449f0a84c6fc3db5ecc8e1aa6b06</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0b06c4997998600c6d5cab3e6d9f5cd2</anchor>
      <arglist>(PhysicsShapeBox **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae1b1fe4bffa0a53e2f4297f75e1c4138</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0b136deaeef7f34e834bddd662475d11</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a80d12238dfca158f308e23277754e923</anchor>
      <arglist>(const PhysicsShapeBox &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a57a158d1d7075952ae5b153b70811e67</anchor>
      <arglist>(const PhysicsShapeBox &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a3424af0560aab94cbcc113e21c503ea1</anchor>
      <arglist>(PhysicsShapeBox *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ac66e181e496ced940ab41f4afc5ac334</anchor>
      <arglist>(PhysicsShapeBox &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a56652688c3ee05a2e8fd37db8e5c7da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a42baebdb0053634644acf4df9ca2562c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae80dda3b86c951c04dfb339621159843</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a9e8d8253b125c22fdaa2bc56b48bdf56</anchor>
      <arglist>(const PhysicsShapeBox &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a2c6aac0c51045c17a0d364fb9fdb151e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a16d669ed6e7caee109116e12455a2aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a210719eeb20fb1715d649ecf97840428</anchor>
      <arglist>(const PhysicsShapeBox &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a640d77dcad07662761973f39ebd4d6b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a69f1c58f5c3fe722f2a4794dc795c82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>aa9965b1851b2fc22a54d684c7b956a3b</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btBoxShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a4d472ddb71fb73dc0223490135ba4159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btBoxShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a7b451c5b2b3f65865f710565dc45d76f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBoxShape *</type>
      <name>m_btBoxShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a2e9169aa7d91d43890ac1e231ebd52a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox2D</name>
    <filename>classnjli_1_1_physics_shape_box2_d.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a3a08e0f15ac755ede59d0c705b6778bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>affc32f0d81f5312843af73beb3912930</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a1c7e4e3983d113149d2388514a782d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a448d35f5705d1b2a78ac1d0ac093d84e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad3ca14c400cc2e059a300bf66cf50ff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtends</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aabb6127836224df169241021262fd609</anchor>
      <arglist>(const btVector2 &amp;extends)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a6f50a4bea4ae85f1669ccffce62db491</anchor>
      <arglist>(btScalar collisionMargin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a7881e15d4d86931797ef224927ee8922</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVertexCount</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a927e6217c4c279a4bc03751cf4760393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ae03c177de56b066a5bbddd0fe0c8a53b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a1b59c7862d4e618e3da3123cd441b674</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getCentroid</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a10bbc2db9f52de2ba98a275e03b3ac54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a08568cb424ae4aa115508f54f92f3260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>accdd1a9478598572b8ae6d777fc30bde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5b9d2810a8208c9d3a9040f5b2d270ab</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlaneEquation</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a6d258bed140ab026a0af6e85d1a934a7</anchor>
      <arglist>(btVector4 &amp;plane, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a43130794c45ced63f0e3b3bf7bf7c792</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a8412b2a7c517b23e9c92990ac0b02a4a</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPreferredPenetrationDirections</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a0d08a6bc4c9639d70b13766e59fe8840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPreferredPenetrationDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad78010e989e4480ffd1b8656c4364686</anchor>
      <arglist>(int index, btVector3 &amp;penetrationVector) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5aacc4da06c160bcd05ab30972b68fa1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aa216c09e1ac91cedfe3332d661273a05</anchor>
      <arglist>(PhysicsShapeBox2D **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a82b02da26ebf9db5261e502ff4514d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a254bede5e34f2266870e8653e01fb894</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a7e5d8d44122128bbcc6d1774a72259fd</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5bccadc65e67c19232c900fcd3a3dcbd</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a8a9f88971a0b860dc23b14e57de5b4fa</anchor>
      <arglist>(PhysicsShapeBox2D *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a96afa5b94873260a04cca49346bc9d9f</anchor>
      <arglist>(PhysicsShapeBox2D &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a1cf3e4688554df00999da9c9b113a352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a10a881d6e9951bd920eb1ebc53dbe2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a4e3a1ee2fa643fa7e1d0e75760eef068</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ae279a61f007c074ff282ab5eda19c084</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aa4b846ab673bd8610370008c78f3ab10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a99f7dbeef08625eb6373b13cbd64694e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5a5a9d3b056c7e89b4b263d0fde3a73b</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>af86a91a25a6a1ac9f061521812c707ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5e3bea01892452321d7a290593a91451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ae221ea0462d3514dd8eca034463b3ec8</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btBox2dShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a2bca86a6fe8d1e532b557120376b945c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btBox2dShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a26f663ac0e12935696ec6ab960bafe08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBox2dShape *</type>
      <name>m_btBox2dShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a3e946790bb7d72f91faf88224d88ca72</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox2DBuilder</name>
    <filename>classnjli_1_1_physics_shape_box2_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a044598f2d550645ad2a0fb398a7bc58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a3b104cc9679d775b9bd3867aa5b7a0c7</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a8eb8c61f9234ed3569253c2166e7b584</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a57ef8c9c0e26021ee55ddd56f935f68c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a9d652e696387879bfa0105ddec06b534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a73c4ce3137067dea4a01fabb35c6994f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a6867ce938e923afa1f3ee61a7847b186</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a5bb9389012d0aba99fc40a106a80f59d</anchor>
      <arglist>(PhysicsShapeBox2DBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a69183679dbfc417c4bf2f44cfcc9fa18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a11aba1ae7e43f1b802756ca37c011bd9</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>aae5a7a1b076b98f34cae172de978830a</anchor>
      <arglist>(PhysicsShapeBox2DBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>ac9e6d992f0cf428c0433ae42adab9cea</anchor>
      <arglist>(PhysicsShapeBox2DBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a0fb303bb0f785290fc973a45ef656948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a8a59e68653b3237ad1afd4915ed9bef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>ae62021092f97a31992324274c7cfb3dc</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a92cf42c5f99d27be559a4b9cb4b05acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a884d92506e994f1f5eac3990aa102d47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox2DBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>af40bd9103dccd75838e5f84066e5fa53</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBoxBuilder</name>
    <filename>classnjli_1_1_physics_shape_box_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a90bfe649c160ed937d09b6c97a14cd02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a713d3fd79b529284c5ab6fc47edc0033</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>aef0c56b62e9793ee16746b6693079731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a8413be0617bf7733fbd4a6cff41054c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>acaf7034e9c6f7bfce28d465bab53b0b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>ae09d42b25fedb83ad6b2ca59d47e5130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a8bb882e305b034177a4a0cc1e7e06632</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a5a99d93b9742a4e19efff4cfe9068489</anchor>
      <arglist>(PhysicsShapeBoxBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>ac4493ef567c3fb462aeadbccbf04d7a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a71a00e1316837570cc075948fa7fbcee</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a9b7fbd4ca73f67bdc32c841cdbf347d9</anchor>
      <arglist>(PhysicsShapeBoxBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>afc0892ab2c2fd35b70bd6e39124bd249</anchor>
      <arglist>(PhysicsShapeBoxBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a01480b79bc731b52ed914360dae7163b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>aad1b89364fd342f213ffa722cc014073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a66153c085bf838cfcb4587cdae29dc80</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a302bcf9a9f1df9753cbc4308e8212409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>ada944587263e574c0376d5b952c86d23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBoxBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>afbc7621d39d8b79bb172760946dac395</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBvhTriangleMesh</name>
    <filename>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a5818d9fd7fee28109d553a6164afb2a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a336cf8ff04379e0cfd994b232dacc327</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a7d132ff905ae1491f098e546e2dbb1ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>abcee986b72cc94c0b8a55286ec5cf539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a266d984e41c846297dd695ca5c19ab5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a2ddddd510968ee5a00a104b3bd02508c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a503cc2d79a596178c860bf245a1f798d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>aebe39d5ec8727f140d49b758dd53460c</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a287dd276052a0be992e7ae801f614796</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a994819112002b7fd68e9c2dbca66dbdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a3f18b9c7c3e9d71c439c4db68f3214f1</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>acca9dfeab6787d594ca27351c568fe00</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a38e5bf3373f07df9125b3ce50a3a24a3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a21f83756b7dd0416d7b1909a9790f0a1</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a89015712004da4607842e85ebb53ab04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>af6bfde0804148167c5a502423fa212c8</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ada0bc1eeffa3785d74e62f56cf72675b</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a800a10a4a69cc1d26ac84832d791fd96</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ac7e2d5466e5258cf6ccc71a8da7c0320</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a4f4ac5a0b41aecb1edb4d70651053c24</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>af56b5e02151709ac5951061e6dff8f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ad8459c8e754640e092b27ebf0af6d380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a83dc8a1b69e35a4fae6861b8de200fd0</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ac6e8748f394f19877a8c3344cf6c5b7f</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a364ae47a05022af3495fb4dc2432f275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a5dfa2d87a3ef9a7b3a53b0940fd0dde3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBvhTriangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a0ad17b98af48bf09afbc8297a3fc965e</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a5281052ed21675196f8068abff2e83e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a11981106be42b1ae911dd9df9d3b4f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>aa2f7f44cf6b32bd8cf9504bd02fc2eca</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBvhTriangleMeshShape *</type>
      <name>m_btBvhTriangleMeshShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a3e9723a04a224603d3349a898bf6746b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBvhTriangleMeshBuilder</name>
    <filename>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a0e7e031e5851df149fab3e5f4c600470</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>abe00fdb540232f3aa057bbcf42635ca7</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ab1afe3102b9f76e813df1b49d0195ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>acab9ba6b6c2aed5af277e387509ba799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a9eef7aca7946f22cc78dc514bb1abe4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ad599bdf65c89e2ef56642b4ae8eb7451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a7de5a9bee240609e5a62ae2cea63d3bd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ab17faf548567eb40173ec9c7fde213aa</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a49082395357f2780ae9cdc41be8b5a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ad3c89a15b75b1ef368bbdb7c7948071c</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a7e330362701696448d20c6e357d7b932</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a77d56e2f148b94de8f9288110896f537</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a7f62e8a47881686b0d34f4f0193560bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a31a08f20298fb972cafa73efe7ca9eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ac86f9bfd4a49a18b3f41c4199e9058ab</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a01af1bc430fbb5b7b13e0e54e7d099e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a0d7bf56bae696b9d8c121a28f70fb7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBvhTriangleMeshBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a11562bab469fafd1a39452465c57d788</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCapsule</name>
    <filename>classnjli_1_1_physics_shape_capsule.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a51ca432f1d6e59a4e33884fb71945661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a546cd1410dc22e0f1f8393d733b788d3</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab2a1aedabdb0eb9062a9efcaa8a8a7ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3660709d9d9f772da882de090741b923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a48c80c4d77c0aa2f9d82b19794503e4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a91d2c828abe3bc3e6ba770dfa95ca3a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a72fbcbb75cbfe3167e82f534e4381cb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a93a85eebd143fff32b365a7fe9a60b3c</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a186d4fb3989d595ef7c8efc8faebb06f</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aba60017c8e06115e75bba4bc4c24c26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab40c825543aa6d57b49dc55535f9f5d2</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a498e83f889d8afa497efc9cb5887d4ef</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusX</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a17194d0ea8151feb0b6faf0b39842bdb</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightX</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a1983fb785ef1314f92027dd209d96774</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusY</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a5799e459af37db7465c58103738070a4</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightY</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3352f7dee2c3f947f8f71ad1c4d9b46e</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusZ</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a93ecc81a4a9f71c82e6968b10d7decf8</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightZ</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a076f5e3be196237e9854d9ae2ceadfe5</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3bb1e41760a86455b9b4e37876f6a778</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a376aed4ab15cbc18e30b4ebd65c6f864</anchor>
      <arglist>(f32 collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a66242db62d89c439344abaa7dfd396b4</anchor>
      <arglist>(const btTransform &amp;t, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpAxis</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aaef606b497eaebe4658f96da1026fef6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a0b773b7339f40ccb70efcc00ccc819e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHalfHeight</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ae3757f4c4996a3d9786575c94018742b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aced243d46142c8680d87e2cf4fbfc5f7</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a11bb036bf821c81ee76da57d6a9d592f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a02a29418255a5e455f4ca7324fe2ca20</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a20867bb1ba0baab500bbb93d652900e0</anchor>
      <arglist>(PhysicsShapeCapsule **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa2d0c115713e968c836ada13a17cbe19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a36b969236f9a3e326f966036216d2343</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a84e130e40b880148238bd8a60b20f83b</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a7f8d090fb1364d85c743b199e5c21268</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a8e3e4a65899934c6b5fc8789a16e6d0f</anchor>
      <arglist>(PhysicsShapeCapsule *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa9449e789cb3f6e0adc1f0160843f11e</anchor>
      <arglist>(PhysicsShapeCapsule &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab6f107b0272f399ccc3f251e4b09e9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa5faa50ab0e935dc91f7000b0c36d8b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aaca36e4f925aee078532dbccdee02eee</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa8fc0e2d8af232c76a7b6295157717b4</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa5938a5c85d0908c108190e0dbf35f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a551826629c3a2bbd9928eb1fa11ae6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCapsule &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>af8babacc434ef297e20f86aa4c6eef22</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a79ce0a5240cca241a36ac43d1b3fc4a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab18f5341285fb3aea333c0512ffcfe8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>acfae08401cdebe3adaf772881fde8ddb</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCapsuleShape *</type>
      <name>m_btCapsuleShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a5f0db680ed20e467ade57cb3c40b96a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCapsuleBuilder</name>
    <filename>classnjli_1_1_physics_shape_capsule_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a37aa687fcbe6b8987ccc4a13572a30ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a522089305c2e08532fbb4cc98858ea19</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a22e47bc469d93295fbc9365d6642cb5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a50c7e028cd2c5748fc3615484ebde735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a4afb662f9af4cadab829f909f5f55008</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a8b7e048691078c8a32b52cb4dab71d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a35f1d7951bd01c2e6c3dd011dd9c2280</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>aac151a9e7c58f537652084532b8813e9</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a335ab0a730c79962fa08ffaeeca9cbc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>adfaa82f79672eb784783f15476c712a5</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ab1b0977624403034d284171e49e1923c</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a783719eab2b909902370d095c2a6b8b9</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ae98388dc69fd0b015354cd84b45358de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>aeae40b9de6a3a4630b4f23b9b114d493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a9829b03b427a586ca796e915ccd55172</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a168171c081b41c47c831398a75902743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>aa64b13d6e1d4e9494b1e8febf22cdafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCapsuleBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a6af126d3f6ade0ee733521413bdf56e6</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCone</name>
    <filename>classnjli_1_1_physics_shape_cone.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>af4ce7b8248ad9eabf49dbd11bcc5279a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ab3f595bb2a593547e3f2301726626b99</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a94a7e90e0ac5e29698ee4572f2efca92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a3351acc299a43e51265b98d4c1963c30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ab5763288091f3b07f62fbfc5fba4dbd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a5f6b657f690f9d7da7d89e6f616d1d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a53dab8a056488d66972fed13ded1172e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>abc94bb030e2aa55b89908cdb998d5eb3</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a0de4ae62a282b34b6649588e9f11a713</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a3d14be386dad944fb95e7beeb23f5f4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a1502f9922b5daff9b00a4e22b750cdaa</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>adf566198c46accd3d4b85f9c7926ffd7</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusX</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8a67974576e194c97ee8106135d94c65</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightX</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a28c6c8539b9756348191fd0504512993</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusY</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>add9d625b2039fa0689e410cf86f2df88</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightY</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a6b504b0f28f39e21cf5ef9c07314b4ef</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a67f210be934ad9f9ce06d5edbfa0ee53</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a7a900e59ca5b55008a85011a14bb6f85</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>afa4db8100bf53a6812bf1aacfd7b27aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a4fe762780657da4bf374eb2d3d05ce66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a5f9b38c919961b837fa6d4bfc32fb800</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConeUpIndex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a411e6e50e05af10e3d4c71e8240775b5</anchor>
      <arglist>(int upIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConeUpIndex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a50db8b3cd977aa4740c5c17a4b7dc22d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a33b48dea864721a316675ea83edb4a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ab7ba07fb56860452d698255fe389f3eb</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>afc99ee9e9f51d24ab4d928e10f17ff4f</anchor>
      <arglist>(PhysicsShapeCone **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a6532192ea2c85a5f10b6f92bf59d7527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a1a82d7156fb9c729c9a0784c9a3194c7</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>aab753a2a4103406243d87b63667a4839</anchor>
      <arglist>(const PhysicsShapeCone &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8ff42bc542eed113d13f4339e3734f07</anchor>
      <arglist>(const PhysicsShapeCone &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a2417d60dad3de577becdabfef5894db5</anchor>
      <arglist>(PhysicsShapeCone *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a5abc4a3cab41fd34e23eb2ccdc1ad4a9</anchor>
      <arglist>(PhysicsShapeCone &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a85e5a38216e79ce7fcd66ebc31f1423c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ac6a158806b78bae84ee7cc425d246ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a4e3d15653670e4817d297dbfc777abb9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a99e81748a3195479cd0dac23217450a1</anchor>
      <arglist>(const PhysicsShapeCone &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ae1ef881259006695699643498812b147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a7961d899b0ed2d3d81a2e2085a33964e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCone &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a5866c5d94cf239a1bc94bbcc32ed2cef</anchor>
      <arglist>(const PhysicsShapeCone &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a863fdaf139c5e65a9816e3830a25db5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a9cb31e0d32d1e324d837bf798de85c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a1ef1045b93824e31c2d70e0974125c4a</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConeShape *</type>
      <name>m_btConeShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a650023829d4961897114be23b7123c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConeBuilder</name>
    <filename>classnjli_1_1_physics_shape_cone_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a12bd2d4999e288dea2d61e0e67e20e74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>acab7ec13c81ad0683271fb752ca70882</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>af0940873f17a7fb8c57477bac4b13500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a80ee4c238496443370b3e47b75722930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a04b955ab0af08d3d26d7b6612deec16d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>ae480888c37db8ce05ecdb9dff027b32a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a8970e3d7fd6bfd5eb0bc91cdfddfb01d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a003720f2a99a8cd9b68635dd4efc103c</anchor>
      <arglist>(PhysicsShapeConeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a27dde38cdab3660063c717d03e474405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a5fedcce515722a119ac380c8f7b39609</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a846e85c3d38c18617112ad67b415cfd1</anchor>
      <arglist>(PhysicsShapeConeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>aae03b285014d30859b2ff48a61047356</anchor>
      <arglist>(PhysicsShapeConeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a0fac9086cd2792c317f584869343f6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a4bc0201417bffd77b88719ee19f20327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a6287d989772e35f6970a09f5675cd11d</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>ae94f4900d22701a09a607fea8af8747d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a42642711a6b1f03d08407f59dc035df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a387c2940bef981fdb0bee483ed8a629f</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexHull</name>
    <filename>classnjli_1_1_physics_shape_convex_hull.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a1eba30dd3745fbd4c0048fb5fdf6dcb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a814b41a9336adea57ad0d5a2a6aa39c6</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a5fe3fadb21fbd275d76720d6d28e6aec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a90c691674614feed280cc77db99c31a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a48ba74162262e7d5d067e50a4f9c6cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>abee5b436abe41d9a8879a56f7ef67e69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a312aa0e4fc28734819d82a1e7f06de9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a984ad7279c20e58b6858652ac9037d3a</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a5cb8f6c85b264b5d3b25a46abf86ff33</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a5068958fabcc637b2ce15a98b02ec39b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a008d03da898f93fd4c4b089eb2be6a4e</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>abf9fdcbc7d8d61f223c933fce29820de</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a4d739444321a865b367a2094686ce14d</anchor>
      <arglist>(const btVector3 &amp;point, bool recalculateLocalAabb=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnscaledPoints</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a2c0342df4f2033559d51d9b5ebf73963</anchor>
      <arglist>(std::vector&lt; btVector3 &gt; &amp;points) const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getScaledPoint</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>acf46603f8780d76e96b4e75f88659f4f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPoints</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>add482e656068d5d11deb9f781a208e57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a62a2f9eee33fb72c82633eb6df2a5c73</anchor>
      <arglist>(const btTransform &amp;trans, const btVector3 &amp;dir, btScalar &amp;minProj, btScalar &amp;maxProj, btVector3 &amp;witnesPtMin, btVector3 &amp;witnesPtMax) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aa1ae6730c491257bffe12d3ab1bf038a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ad2aa46e6289f757507f2db6599f8fbe9</anchor>
      <arglist>(PhysicsShapeConvexHull **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aeac645e231051a58b66de87ef7a645c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ae52458c97872c7c9cc6e843396977a7f</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a0e7794b97da09fdc6955e72c0b4b839b</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ac1866ad333fbf45b4615f5b635395f45</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a80885fec6037e78f81b1676865997649</anchor>
      <arglist>(PhysicsShapeConvexHull *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a7259a4885c6b5b71f252799b2bba6b78</anchor>
      <arglist>(PhysicsShapeConvexHull &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ae1bee5097afe0ae2e46953109cfbd59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a363b041662a8c81f4e27ad2d3e56c5bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a6da6fd77ce73c59de118b71a9a3c1519</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a860d30a92c8d7bc8b3718880c4e9768c</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ada4b577fed72fdf40be9454d92c34ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>af42caaf1d82900d9880828649de5f8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexHull &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a16198f726cfc099ac9f861db3e3009e3</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a7e87ba6d21b9f02885cb4027ed6a119e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a44f500f33f09602fee643d2b7ca23f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ab9d7cb01ac98928573ad1a25e0865a6f</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConvexHullShape *</type>
      <name>m_btConvexHullShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>adf9e91ee0f43ffa85eb61ba6237c233d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexHullBuilder</name>
    <filename>classnjli_1_1_physics_shape_convex_hull_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a1f8c0863182f05f6a220485121a57769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a7c23c982f1fdc2075df7cbbb6b6e72bc</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a2b44d8569f3ffa951ef159e5dff5f69b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a46800d76e9bc84b176ce7163044edd6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>ac0352c524608cf7342a547282c0a8ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a28e90d531e01ab5ed249f71927637895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a47d08e509a1a944c13bb0b8323f42cf6</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a738d3493a0200817fce5807499116fb4</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a9ae4adf7ad5c6782ddbcbd6a7e858bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>aea112930500ae5e1eafb4c54ad2f3443</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a9e526badd2a2979d4a47c2da7610d516</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>aed1700750f74353840ef2b45bdde6088</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>adf99052eb9aa6be3ddded28c25ff6161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a9119532f39d13cf420723d9e6312a8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>aa754e19f449577cb65927645cc4fedac</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>acf566e62ddaef7659b11a27e273b8858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a044f4c4463c96af61f93e207f09155cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexHullBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>ac2be3a16f3f88148321640c9b3eaae16</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexTriangleMesh</name>
    <filename>classnjli_1_1_physics_shape_convex_triangle_mesh.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aaaa98e4491bda2203b9e8d302194f988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aeb702fb3a6f3967316f513bff332deb7</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a21db5439c4b948924e91478efadb8b0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ad7a65bf4ab14ba32640f4016a2ddffdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>adb9afca22ca22701e9efdfeabcb469c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ac22d453352c3bde31c06ed5f52529ecd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a3aa280a8ca1d91166daec7e2ec8f06bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a01f5b7730d4d77e1ac14073b381fcc35</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a68fc12292637b65500a0a9a4432b3539</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>add6a0c62bde2905d86e5d65f1e212d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ac227a51b965d61c78c490ef87db2f8c5</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a8247911d4b2951620a8d723a9962387b</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a7207a36e01a4219eeb6f346373c5983c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a947dfc6bc94f1947ce20019030dc20f7</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a07573739f5fd09283ae847ab2098abcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a290e1ec92efec07b80b9681cf4122fc3</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a3e84a25d3e8d5d6f0593d1aee7b385f6</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af835fd8ee05dd1d083e8f3e9e0eb8bc0</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af9409cabc0c784f1c2baf432afadbcbe</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aeda6f2a15e7626b163e8b4061c7a9be2</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a492bc476bb73eb0f8e43533a320c9cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ab5f351b3bf15c7bcb636031dbe8914b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af3a35d1c8c12749848c19e9aa72b966e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ad01fa32852ca4102a072a287e19e31de</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a205939fd6060adbe495dbaf58e036324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a3b1424f630f01d02c2b0e60c4d95c76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexTriangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a2537eba2160ff87367582ff09b57f68a</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a7ba69b61086d996d6680576d47a1a4ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ad2ed9497a068155af5fdbef3be09b7f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aed9ab54bc3b1ffa6d2a44676b4158da8</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConvexTriangleMeshShape *</type>
      <name>m_btConvexTriangleMeshShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a3ec48ca0d0ac09d99c17e13b7fb61e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexTriangleMeshBuilder</name>
    <filename>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a24486e9018fef252642a83d622ccb3bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a6304782e5fe9fde65c1ab20168bbc13a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a38d5110d1cbf557133ef2e11ad987aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a0965c06798691e7c6366c89ef64dc80f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a92c4ee210a4e7c716bb42419fe743eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>aba26742ecc9168f5aea202625bf89f90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>aaf31709ead4a9cb4ed9c30bdcaff28cc</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a205a5cb0fe8c8a2f70d92ff9a742d46b</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a7c8ebee34e457f4573be5b9b801a8189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ad829fd34e48562d3d2780631c96ac802</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ac19d1b87a80fe74e638bc06ba0b80563</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ae87826614b279256c3f979cacf423822</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a2124b47f02e3df7c29bf3fc106a8c52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>abbaf4a5c66782c2c50622ca5f30cd565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a1ba186e194b042276128c8f8577df588</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a1f3db8693ea32f7d3c00dbbc95854a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a372873da6ac0caf806b36efacfb401bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexTriangleMeshBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ad26dd1a638530ca9de94e2d00f261aa4</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCylinder</name>
    <filename>classnjli_1_1_physics_shape_cylinder.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a68a5d701069104a02193826de7100279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a1ab2ae487b269c8598c758dedd175301</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ad4e2de07f7e800f4e1a0b2ec2c445fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aad43b1fbb7c2bdad086bcf89e065b5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a27535b5843d41261e95d715d7e1e6615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a807dd6a087898b77afa7edf84015e191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aefcae8a7ca7ea6eb6f9260061ddd3b04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a599d7429de67581afed9e38e5afd6ed7</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a4a63e7b19f578177673dcfc7af8c8067</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a24ec2d897d7834cb72c4be9944bd50f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a998cfcdaeb1658434f47cd2f18a56543</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a8a61f34a7dcbf6d45c3e66719f786605</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getHalfExtentsWithMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afe1208d1bba477b52f1e984f8e9d012f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHalfExtentsWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a4c513ecb538d3c0e3ae9407236d4a73a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsX</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a685026badc2ed6c9bd64ec4784fbfd15</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsY</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afac940ffcb588c11962642b4d0329d10</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ab11198a4980fc34eed9c4c4d53bb41e1</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>abf87c633c0b43df403207cba5c02c08f</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ab264eaa033bd9f0d19030290c12b58b4</anchor>
      <arglist>(f32 collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpAxis</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a9146d75d27a1d198ca208a14b06207ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aa16fde7b30ed397585ec73ff72fb7f7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aca97fdd2b886bf7c3dc99b3b949cb716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a23b52180073e85c3522667189eb460cb</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a876c074213ae4732edefd6525bd40bd7</anchor>
      <arglist>(PhysicsShapeCylinder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a9b1375b4464f0cb4346304360a915be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a8c25cdc02eede67ded92a0ee93634747</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a4533bbac62df65adbc7a6f5a1f6df5b0</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ac70e62094d72e5577e24f5bcb6b171ab</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a982891aab31ef8b2dfff304d45500437</anchor>
      <arglist>(PhysicsShapeCylinder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a0b974553801bff7f1fd087cd501f33c1</anchor>
      <arglist>(PhysicsShapeCylinder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a81087df8cf95f20857cac4f91fd47217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a7e9b42a5baf9eab31f6d3f447eae56f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afe635fca063da9463ced31e09d241745</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a6faad4aa97c6275c9dae35313e3f8b66</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ae2dc8177ccf121405a2d3aeaa5a5c513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ae8f7ba38adf0adf0aa362375c0bee34b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCylinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afae4b99e70170631c6779bd5cba382fe</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a86095cf3abb6016f5ee01ee3e2b4be17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a55e20737f074aabca941834d0f02be8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aa46fd98accd23d7f6b6d60080e530831</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCylinderShape *</type>
      <name>m_btCylinderShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a59ebaac81520be5fee6e86ff8b937737</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCylinderBuilder</name>
    <filename>classnjli_1_1_physics_shape_cylinder_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aace60baf70b29a06b8273f779445c3e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>af731f25b14039b85c9085b93572b5965</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a613cc000b355e811f92cb639857e7835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aa2c18c0c2bb57551dd1c3575bfb8163a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a66b75d3ba79ce870d1c63f665527ad3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a71bd57ab5567b3e3453caf85ab19d347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a67f0ebc31c411849f60d9b37b8585aa8</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a66e09cf1f481b3cc0fe4dabe24ebc81d</anchor>
      <arglist>(PhysicsShapeCylinderBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a62340c588bc8753a63b181e23b31677e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aa70cb797b24cc6f06342e337bb7343f1</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>afe992c91a992b53a37fa713df81d9dc8</anchor>
      <arglist>(PhysicsShapeCylinderBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>afbf561feb98ffa7eb2a53e5acccd8946</anchor>
      <arglist>(PhysicsShapeCylinderBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a2574169c1c94e9e72edda94e813b5c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ab9ca148d4bf3d6c9f98ad3326e299bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ac76b3bf33173f1947e0eedb98639da8c</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a901b23092dc351ca0a3908a7e09559a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a032176fc3e6d1c3e7cb39f86ee0c8382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCylinderBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a7455c379073ce273452575a464df1c4a</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeHeightfieldTerrain</name>
    <filename>classnjli_1_1_physics_shape_heightfield_terrain.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>afa57bd6584a89eab9e8b7245eb89acb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a158411ca1d8a5b90bbc90b9e5740654a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a5022dff108e66d6c07ff15046814f5ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a8d16a919c7edd593792937ac5827f174</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a9d74f46d93ebfb05fe41162192a53ddf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a4360934ba9427142e209842787ab5884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a8442110ef615d1feebe2a4a0ce6aba21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a68a6e59a134dea9c968887cee617b359</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ac88d2d69b921b3c8fff8ff7bceb2965f</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a6790539b19c0b6158f92a1136e7fd14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ab7d014003c883333fd78a9b13131136d</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a15f7f659eabdcedf2eeb8a615e71a929</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a70d3de7e97e98a2922045b294be7a490</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ad30c578ce3528f4d54320ce1ca2d9166</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ad52c4cffcc68c034a7e1f8f32d3e8ab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a6e47cc12f8db3fd361ee0d2f9e59d8e7</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a41daf9a2f886d9c26ff11e777385244c</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a1e5ac5556f98d5d3de964d6c9a9d5c54</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a939df55d74b30fefcc2ed8f92cd4418f</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aa3e5bca2464d689068546432147a84a7</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae19ba8503a54296b0657d6f20575e9c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a86dc8ee8ab41a62c6520cc7a33064fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a0f108ebf1e1d7344189da6f5ac1853c7</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a1f04a12e54baaab4644b1eb1a7a03c93</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a406a8216e9feed043e83c3414672c741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae29c49ae8bbd29138749d91ce52f50e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeHeightfieldTerrain &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a370da4b7df5dc7fa7b829c7700019dba</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a466aa6051bd8140424fbe0d0c0b3ff50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aac0ec50bf5b0558fc2869df7e04a76ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a737223cc6e28bc6f71d0874b834b3542</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btHeightfieldTerrainShape *</type>
      <name>m_btHeightfieldTerrainShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aea1853b1ab3d6cfab816b4e8a70827d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeHeightfieldTerrainBuilder</name>
    <filename>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a6076296d996f7bcee6637aea2fc5dee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a2a052b4d0b20a346bd756cb7f9b9631e</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>aa909e9ea3883ea59ba6e4943efbdf0c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a6af921b7ca32edc55607f7a111484d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a9be5b8065168573bc48bd64a8f317e3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ad12926ce9350cd274d571fd37be9b915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ac6d415a198f2fc2ef2c8d36ed1704eff</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ac6bd7addfd95c818fbc5d954af7f3d0c</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a06d8499fa40f32687c9810810dde0fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a200731bbea3928d076b443bbcae130db</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ad0fd0243cd71d6414998a89df8270194</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ae0b0473b702cfa792474e68242968431</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a0944bab45db11ff7ff1c35849d0794bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>aa8df995b53a3d9c26b810589bf77e935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>aaf84975d20884430868df0fbca54e912</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a5168b2b46aafcc3687bfca6f57022ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a8dc9453136de79687fa8a3bd66fcc224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeHeightfieldTerrainBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a3f2f3118e09a273ad4aeba0899bad138</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeMultiSphere</name>
    <filename>classnjli_1_1_physics_shape_multi_sphere.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a7c8371af653a141ad559b2769e0846a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3463dcfecd8fda119372d072217b0075</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a94af95b92dbdbca61dcfc2eaa216b627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a0ea77d8283826d515cf2668aa89d99c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a171e6891c0a9ebd5fc109da99cc939d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a105b934ae7936d06d56b8bb0f0ae11a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ad406efb7328d9787f7e79554c3798be1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a19f1b9972f265b8731ee164b127fcdb0</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a7abff39d235b3079cb743f0be73dace1</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>aba1a4134c1ff7752824c17368bd6e9d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>acf113f95e1b2f20093bd19931c8a407c</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a14b1399d1965335fce1f27c7b15a6237</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9f72bb39a016aa5115af51a9e62638e1</anchor>
      <arglist>(const btVector3 &amp;position, const f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3bb2481f06e880597dafdb8c9da1a54b</anchor>
      <arglist>(const btVector3 &amp;position, const f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9c02237f6df330b7dd0a3e9124b4bae4</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSphereCount</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3cc0c797fb1277192dd97d31b60a6095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getSpherePosition</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a5a3e5536164c5a8ff9b114afb79aa4f6</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>btScalar</type>
      <name>getSphereRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>affb410466b9623c9ea27e8bdae25c810</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>aa544c10e9b41e0b8548c2f6e3e2ae75b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9390f240439e4f46d93796b97beaab28</anchor>
      <arglist>(PhysicsShapeMultiSphere **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>aa8467a77544f3f7b14a41790f609973f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a90c55e16f861a8c77293181d6201b9d3</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a2d4a3e5970d18a45fffc1a2bb1826cc3</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a1a4074b0a62a165c416770af415bbf4d</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a55633b851d550cdfe5e324334d1690b5</anchor>
      <arglist>(PhysicsShapeMultiSphere *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a5cd3fa9b98138764dc12f83cd4152d1a</anchor>
      <arglist>(PhysicsShapeMultiSphere &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ade893ed82197a150ff8c7387f567e7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>abaccfac08f371c6f00f234abaffe5252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ae260f03b0b26e25c8491fa36cf0c6273</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ac9f725ca1a8bde780079e66a3a1d500c</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a353c1255f1e87086f2055d8abe20e490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>afd013d98fab909c7c4a22e94e27ccfc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeMultiSphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a98b0fb478ee3b19f4fa3352ca8ab68ac</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>aee989d96aba889892873070f108538ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>adf00e86a0e016223bf598d8993c725cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a03187efa226b173fab961454943c6866</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btMultiSphereShape *</type>
      <name>m_btMultiSphereShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ac43b193d22e235ea71f17d93021e0967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btVector3 &gt;</type>
      <name>m_localPositionArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a20192615e273ac465050fb139edcae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btScalar &gt;</type>
      <name>m_radiArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9a7781979e6a9f6b62e5c621b14ccc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeMultiSphereBuilder</name>
    <filename>classnjli_1_1_physics_shape_multi_sphere_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a8bba25d777b4a5e58bd1343e153dfae8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a4e48cc19e4baf5985cf0677dab55170a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>afe0f880737ade39b3ee090fad1897101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a8b8c365e5ad09f2b7de9add84d963ef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a6155936f801346b1677332b15f3d7601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a8927c7f6fa2d6feaf69faf790b367548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>ab14ac656ce90e5beb9ba0035a8dd4b3c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a0e93ac09fe9a4f7958faa0db9193d2cf</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a4a9fe8aab6f57ba7309a0e3189ba61cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>abb07d830fe963a2438981cb685b20f76</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a17a3a9b7a893da29edf5dbf3df214a9e</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a1736a7847ab2fa310224acbab6b585aa</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>af925e1dd270b6e5b82173671fcf008d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>accc16cc7fb41728d9851eb08108434a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a69a89d86308bfc5353736675aa04497c</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a45cc436914018c788a00dc31e7a0e119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a8e3d8c4a1997de39baa514580d3fb1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeMultiSphereBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>adf6fb8c0337354effc876d276475e660</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeSphere</name>
    <filename>classnjli_1_1_physics_shape_sphere.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a7fc4441d7033e5fe27c8d3470c104d06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a5c0858370ba136781686931f82bc669a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a81be8ce35c92e8378e07bb30bea0c95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a5ea0e0c8297248e3c216bac8e2aee41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a521406fece9a97727756504d25e97031</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>afd6507c0b489b124fa9a2577a2bd727a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>acf1061d9e3de5056f2ed81e4662fc880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a0eb389f352c6b7a4c08cab0fd1c14f52</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a83be693dc818969f95fb690b7e5f610a</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a45e6d3ed0752b16c0404e23300bcf656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a3f1e6d8453ecea6db425dc6aad34c1b2</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a2d127f663c3609d2cc1df98280d9476b</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ae014734c779ae780a981142cf8ae7f9d</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a378fa9bd11c006d330efb39e26218428</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a42f9e278650b9dbe338fcb4613489589</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnscaledRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>af38100684789bb68150f2b8ffb8389ff</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a0e111b3b9189d7851bce31d92405244b</anchor>
      <arglist>(f32 margin)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a27c8c3b4544cf9ec24629a5f040cb844</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aadb10a70b7065ac291c4f9695daef485</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>af9f23a9ae425689bbc8c239eedff8817</anchor>
      <arglist>(PhysicsShapeSphere **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ac6e2a0b3856f20fb670de3e57e170172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a22e3b4cc30d3f2418a574e730cbc87a2</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a9775be9747d42a093fc0ff64318ff91b</anchor>
      <arglist>(const PhysicsShapeSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ae54cbc6030c089478ba6f6a9c23b96c6</anchor>
      <arglist>(const PhysicsShapeSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aa80fad202f902b1a5e2417096daffe3d</anchor>
      <arglist>(PhysicsShapeSphere *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ab922aa9c9ba7b7f9b84b259ddce4afba</anchor>
      <arglist>(PhysicsShapeSphere &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ae60619e2090d9def822178a4f3243a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a692e7b24fc48ddbf8301c9ea47cbbda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a29f4ba9f9895e3c567f44d349a862e4c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a5aa1eb28266234195f2d4d7cf2adba12</anchor>
      <arglist>(const PhysicsShapeSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a571bd26716c2cd08198e44b370c2a8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a89902fc5862dc6a55b94c4882722566f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeSphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>abae3344cfba135e9f24084355c2286cb</anchor>
      <arglist>(const PhysicsShapeSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a96045327fab58c255cfae2b49e86cfe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a0f7c7ecd6aa7e65276c522c56eda8a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a3a12e9499efb088b7002f0bbe4db9c7a</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSphereShape *</type>
      <name>m_btSphereShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aeb4452f79c06b476a09bc23980abec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeSphereBuilder</name>
    <filename>classnjli_1_1_physics_shape_sphere_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a17ffdaba5673d70264c22816b432625e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a50f623827b7a22cafdbc5a0a14396a86</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ac1568c3f7b9dd18520b5a9ba899bddbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a1dd2730132077d77ab627a441591b4f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a97f3caf646608ba31d5b95b74d73440b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>afb1c102f2b52edb85127d863f1996bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ade15d246bcf6c2bf6b062a720f427616</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>acee398fb4ba64e5403fd1647dd88536f</anchor>
      <arglist>(PhysicsShapeSphereBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>abd4baca916f4f5ac16b87cb903c294fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ad63559fa94ac8d64144bb5b5ee77e2ff</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a8a0e1b8153f17903c93e43d9136fc0cd</anchor>
      <arglist>(PhysicsShapeSphereBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a17a26a9c2490adde8147c98eff7674dc</anchor>
      <arglist>(PhysicsShapeSphereBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a8fad9ec701d1d56babce7704d746ed89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ad86fb5aa86978d04e15b28b12ca92b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>af935e9e37ed4f4214bbafd3df47ec0ad</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a393a4aad91017156bf81d1803f13193f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a1f399d3d7445f9d19d245f08e79575d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeSphereBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a79f3e2a67b26a35ac235e8ac6f90fc6d</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeStaticPlane</name>
    <filename>classnjli_1_1_physics_shape_static_plane.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ac4ecd71b089a505c9f32f6ef77ed110d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a0472514aba8b899d32e2c407eda027a9</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ac17a1c82803a29e2834020fb607571d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a04355018c5f0340d8e7b178f9a2903d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a94b3b93cdf38fc039d4f8a320b983754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ad01ac8924580a8e98870f65bf81df976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a376a309599b863d0bc8292310a545e95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ae4414b22b4ced8a8c57f55c1e09d1e4a</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a6141ded6f1d7cb4ee1cedfa2e48a1ae9</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>adbf422ce5cb08ea2e65e264ca7608309</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a0ca69f0b62dcc82097956ce9642d6027</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>af9167fd829d49b965bcb7cad272e3dfd</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneNormal</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a351f9c4734b51edef978bea4598d1c16</anchor>
      <arglist>(const btVector3 &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneConstant</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a046e8fdb529ee0d0ec14c81cba9c58bc</anchor>
      <arglist>(f32 planeConstant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a60ca3157bf53412cede8fcf2b9ad9262</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a2f6934822e6cfe1e4653809231fb4218</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPlaneNormal</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ae462a2fe62e552e200864ccb080ab2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btScalar &amp;</type>
      <name>getPlaneConstant</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a617ae308eb5ecfb53d4b56bcb6cfaf0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>abe68f37e000359a07aa81b93868edc63</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a22f1076bbf42af97e7af03323ee4681a</anchor>
      <arglist>(PhysicsShapeStaticPlane **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>aca9b44770a79a5e24c77601ac66b66ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a2a9efe9dff92835b63d48ae4bfcfca91</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a1c36b21eab25928d5218b0651934c5a1</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a36d666d658c438b53e9ccfc80a61c85a</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>adfcd876455b7c323c22eba6da64ca3e4</anchor>
      <arglist>(PhysicsShapeStaticPlane *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a58ed10fec3b35de5e994c116d8c75d37</anchor>
      <arglist>(PhysicsShapeStaticPlane &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a8cbdd27eedf54a88ddd39d43212ccb50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a8ed62d505376e5dbba222757423ba84b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a95a9c5270ae2e9e29154332a8dc93860</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a75169e547ba98dff8be05aeda01b2fda</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>aa2b1b0428a56aaadba2ba7ed240c8f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a604843aa9ff1833d37ad89356ddce97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeStaticPlane &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a7473332f3805246aaaa5710b899d1033</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a47d96b3ce4122500053365d3a891cf95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ac1ccd291b8ec131d26f1bc43218a2331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ae57bb01dbb2f1f729c07ee082d2fb075</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btStaticPlaneShape *</type>
      <name>m_btStaticPlaneShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ab6d17e2865a59caf1bd6022df162b258</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeStaticPlaneBuilder</name>
    <filename>classnjli_1_1_physics_shape_static_plane_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a400c75380b108af46e43cebae7a12682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a38edeb70bf2cca8fbdb0d2e5af464fc7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a18612170bd2d145d45467bd979f7dd4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a7b7154c3c5e946a102b277892e6cf3fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>abe4c05bea7526574a370fb9e707ffebf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a355186851976919c3f0bdea1bed52a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a5ccb69222c24e85cf58f3c59f27e3db2</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a975c098ed49f501ea4c9978c766afc46</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a6470c75b6bb0e13386dae92da8244881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a26d9050c0a7364859affbec0f1a3200d</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a24c4f88cae70e104edbd6100e6ab96ae</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a86149f15e204b7f2e5c6563172902f59</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>ab91e3bda7adbcd97a963566ef5e7bdf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a5a7fa33500a4bbf8273222d57e70e245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>af4b40b5f32bbc64e6e337c76cf2a1c2d</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a84a723711e9c7fc80aae534cb2ccd1ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a75b1b573e58f585b77b557061bee0f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeStaticPlaneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a06b4af0bf8183d18cad9fc1a78a05e22</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorld</name>
    <filename>classnjli_1_1_physics_world.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="class">njli::PhysicsWorld::CustomFilterCallback</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a31c34734eb1151e104bffd02be6250fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2ff05b98cd0383bd2236ea32049ec424</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a82626198cbebe3c7bd945ba364cca841</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a98b4d6846012b3b82af05bbbb00b16ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac860f1e5bca6011c1b5c0ee3e320ff39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2d13fac3772ac6a2417cbdfb9ec65ed2</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac3fe9c56c88ef269803ee550975f0a4c</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a55433c9f9a854a45b2135d6e15423f8b</anchor>
      <arglist>(const btVector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getGravity</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a1d5aceb8401c52c942caed4aeb921724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a6349b4cedb5718009109d9614e8cc8b7</anchor>
      <arglist>(const f32 speed)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a7b42d530aa8316b6f7218feaf89f0d79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeStep</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac9d50d7a2281f1154cccfe90323084c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreTickCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a0fc4b0b757a0fa74f289a9186e26fc5d</anchor>
      <arglist>(btInternalTickCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostTickCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a727d1fa784603c527fd210a6b9950842</anchor>
      <arglist>(btInternalTickCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a5b319ead64313df03f8e293f23acdc41</anchor>
      <arglist>(const btVector3 &amp;rayFromWorld, const btVector3 &amp;rayToWorld, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aabde3413fcdb0abf3f0f5f58c71b288a</anchor>
      <arglist>(const btVector3 &amp;rayFromWorld, const btVector3 &amp;rayToWorld, btAlignedObjectArray&lt; PhysicsRayContact * &gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ad29d2afe4cb405f8217662aa07cb4a2b</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ab08c789e7832343ef32e0149b63a674e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRigidBody</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2fcb8da2f603c342ac9f72e33e3df9b7</anchor>
      <arglist>(PhysicsBodyRigid *body)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeRigidBody</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a90eadf9bf47cb07aaa058e38ffb81f2a</anchor>
      <arglist>(PhysicsBodyRigid *body)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a01043c9eab9fa91adafa957ef1e57293</anchor>
      <arglist>(PhysicsConstraint *constraint, bool disableCollisionsBetweenLinkedBodies=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aa881c299b2550503cf9b678db6eedfc8</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a80d7139deda7b3f9c809455c8cf5ecbe</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>af29a3162f4adcf203f36c222fbbed7cd</anchor>
      <arglist>(PhysicsWorld **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a25c7643cf4815f1d02f15edc71eeda53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9e54c3ea292a97e1214597948d06c257</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ab61641fb6f79e0b3a162a42876d5e766</anchor>
      <arglist>(const PhysicsWorld &amp;physics)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a792e369303b85a4b93cf2e2af6afa807</anchor>
      <arglist>(const PhysicsWorld &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a679a9e3364227f7fffc1d990f9484e09</anchor>
      <arglist>(PhysicsWorld *physicsWorld)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a027a9d2b693f91158c0df23e171f2f88</anchor>
      <arglist>(PhysicsWorld &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a09f68d5bd38573d01c7ab991bd361d2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a64f4e12a96831a18cf568fb338193379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a11c079e930dfb8d4d5e7834b22f2d3ee</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aaa5561b67b4b8ddd1e71b26e1f9e9cb7</anchor>
      <arglist>(const PhysicsWorld &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a92c908a89e5d1b8f061bf706ee3df631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a106608afa6a3d71d0c96600975b85ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsWorld &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a907c4e25ed3a4baebcc9499b38cd9633</anchor>
      <arglist>(const PhysicsWorld &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>debugDrawWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a5e3b0fcf00fc8a8151510c86088c034f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ghostObjectCollisionTest</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ae6873032c9a97589b406c69f33383fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_SimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a54627e3b1f1e890d5c9247e00f9f002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_TimeStep</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a126ce6c1394f120b6b325a175ed1f21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDefaultCollisionConfiguration *</type>
      <name>m_collisionConfiguration</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aafdda2fa604a317def17d80f314ffa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCollisionDispatcher *</type>
      <name>m_dispatcher</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ace80c5e179eb0c715b681b674812c50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBroadphaseInterface *</type>
      <name>m_overlappingPairCache</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9196ae1dcdf7af4f556bc7f0ee0f7e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSequentialImpulseConstraintSolver *</type>
      <name>m_solver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a89f04597ef21e57dd83b634062343822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDiscreteDynamicsWorld *</type>
      <name>m_dynamicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac56a66cca1fd4605a7120901be9617a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btOverlapFilterCallback *</type>
      <name>m_btOverlapFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ada03017b6b1b08439170bbefa348d787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGhostPairCallback *</type>
      <name>m_btGhostPairCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>afcd5c37a467fc854fe78ef3a0093c970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btPairCachingGhostObject * &gt; *</type>
      <name>m_GhostObjects</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a96f434e076cb213b93c168a436b392cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBroadphaseInterface *</type>
      <name>m_broadphase</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a595d7dd5dd9497891b369aecf2ad3553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; struct btBroadphaseProxy * &gt;</type>
      <name>m_proxies</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>abf48b2f5696f3de7ab98019c98747f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Node * &gt;</type>
      <name>m_collisionNodes</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9eb1521fc832cf6109eccd1dde751e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_Paused</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a1dd5d5abfae452cdacad0836b9713940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVoronoiSimplexSolver *</type>
      <name>m_simplexSolver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac17465bcb753aec34bb4ddf5faf34a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btMinkowskiPenetrationDepthSolver *</type>
      <name>m_pdSolver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a4eb1b6e28edaf8ce45facce58be6cf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorldBuilder</name>
    <filename>classnjli_1_1_physics_world_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a625eca482a094e116a1c35ef1167271f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a403ae66d0cbbf9734a6733ec263920e3</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>ab49c9599a7b4e561193248b437a32759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a2bf66cae2afc45a3a92d090ec9435d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a7e8e167425880a3161159ce60be6e722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a9393d37f2ae39053342e4335b6b36a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>aaf5e5d0e4ef9aa193a73a458c390e252</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a5d591f898c14ec9649675b76dbb696ac</anchor>
      <arglist>(PhysicsWorldBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a7a3b8ef449fdb13cf49fe31979182360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>af7cd4050e02108f5d46adf77ef5956c6</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>afaeb664b7ca5653b5b39f9bb60d7ea19</anchor>
      <arglist>(PhysicsWorldBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>ab72a6cb817a7fe31b13c22d5ff4ab58e</anchor>
      <arglist>(PhysicsWorldBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a55f38652070a7f2ffa9eaedde39a4513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a4c55892d1d68387f494f3bbd0e4cd15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a5054082270de6a969250be2c07c5e95a</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>af3418db197e13f540c19833932c6a965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a8459fe21a431115c22bf4bb007a52b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsWorldBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>aadcfc0f544a029b6b8b37ce43a91037d</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Plane</name>
    <filename>classnjli_1_1_plane.html</filename>
    <base>njli::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a2bd22a40d60690091afa0d8fd0ff0a1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a4ec8b1a2999aefa871198df3e65e51a2</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a74463b456b24592b089084ab785bc59b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a0cd52f719ec47e495c9d328140b6218a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a9b0b6988031995380f0a56510013849f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a59f90740aacbac79a000a3f5cb8af553</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a300f352efefbd6bf4a5a46f5010a47dc</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5270bdf9949e2f40cbd727cf42fa8990</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a30d7a16e1a620ddd7010c294173dc948</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a23d33456ded6b898f23a356ae4424f0b</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a45446be9a7f1d82ad2b4d1bfcc625450</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>afd7470b915fd88ce2322ed3d0f65506d</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a021d4e009b425435b9cb73743e002ec0</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a06399fe5132a69bc494359e1c668ab9c</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>acec00b130db6da3ad34e865d2a9bd960</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a9fd396237feb322fb1d657c78eb49441</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>aa4982ae433a18ec285ade001a997021e</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5293d794fce60ddd2fd3c6a4d1811320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3a9c6c399c1bb5abfdf38ed0ae3f7826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a4c081dd872302e5a26ef4f84376ba286</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a340eca7fd8be0c06cb0621d7e4359c47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ae18524758989654208d1f6a73b6a76f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3aec468abf2f43bf5b1c94caf9948967</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a8091abdef8782f719c712c92b7323508</anchor>
      <arglist>(Plane **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ab4312227021e3fd5be35dbb055fa0926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3f1a2009af3295b38cda50cd79e9afd1</anchor>
      <arglist>(const PlaneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a9f0d30cdf23f1dfec8cdb1a7ad3c94ba</anchor>
      <arglist>(const Plane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a11b99cf93cfb607d468f01b556a72637</anchor>
      <arglist>(const Plane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ae45cf5d93f7ed1dc306054771e7737d3</anchor>
      <arglist>(Plane *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a1025007e6199b6f44b1090bdec697228</anchor>
      <arglist>(Plane &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a4e95a46e9cdbaedcaa7701a72621cc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a076eefa748e73d4740b3478b8893c31d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>aae78e01991506fd8ac864ab6c707f3df</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a42dc655613f12dbe9b7285e82e43e15a</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a258b4f6236afdeb8a1fc64090853dd1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3c1219a27764ea1d314e1d934e1733d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Plane &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>afaf73e864995693a23d736acf0304d27</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a238e9b9a68bf90b6e7a90119fe852da7</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a0939e8ba48655d4de63f213f37f9c8b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a864bfdf7338c9df16efcd27912b8f2cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a56d0f21ab0bf133304b7b4160f80825b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ada11ce1d7e1eb41724ef1b39006b4101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a42fa092ceb6dc30559a5752c94678972</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a4903438b811899ef4708379760cc5c10</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a8fe5e448433bfa9a2b15de30d75f76f2</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3394026e187763e245fcf11c483bb75c</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PlaneBuilder</name>
    <filename>classnjli_1_1_plane_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>af701bc6c823bdc374ca5c6228a0f4858</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>af183aaf444f24c14fdd148fc58c2465a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a55c9196711ce103e8241b5d53fe4927c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aa87472d5907138c91e6526923528f610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a226dd2c4195bfa320ac11ef59aafeb86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>af439a423a88088abcb9ad182375c435f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ad4eb04e279918dd25779fd9516748ac2</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a4bca1e8d885480955d9c3a0bf0963887</anchor>
      <arglist>(PlaneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a9dd3f45a469c413d88ad3769b870352e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a2af3f3539e52404cdc37c8e2a97d8870</anchor>
      <arglist>(const PlaneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>afb4efca782ca6c6eb597de1381326763</anchor>
      <arglist>(PlaneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ad3934d9e678041ce82d043180b397b15</anchor>
      <arglist>(PlaneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a962100c7c8e0e22182eaeb5a5d4df12e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aa5d5ef367ad8b77b3f7d900450633fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a6a0c6795347d5cbecf83701b0954f8c3</anchor>
      <arglist>(const PlaneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aa03f4e80efac67513aa91dda3a7a4e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a3a7ffc13109b298125f29c0e28a6178b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PlaneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aec4617368fe1bc98190c33d589188651</anchor>
      <arglist>(const PlaneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::OcclusionBuffer::QueryOCL</name>
    <filename>structnjli_1_1_occlusion_buffer_1_1_query_o_c_l.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Process</name>
      <anchorfile>structnjli_1_1_occlusion_buffer_1_1_query_o_c_l.html</anchorfile>
      <anchor>a93e32b9a49ee0c600bdeba14d7abc24c</anchor>
      <arglist>(btScalar &amp;q, btScalar v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Rect</name>
    <filename>classnjli_1_1_rect.html</filename>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a2c25e6a42c5f9e1b65817767a1623551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a243933a940eb2dbb7ec885983298a909</anchor>
      <arglist>(const Rect &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>Rect &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a75194f665dcc541b4b841d4033307ddd</anchor>
      <arglist>(const Rect &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a9ad3a2661d67a072858a5740b6a5df4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a25efd75622840e4ed4c82f8f8a1e17c3</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5606d634e931e9f9c933a5f51f128f9c</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a4d2d37a28ab1395b9fa4c1074736b7a1</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a0f649ffe61c054d305651b14e6239a9e</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidthFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a793503fbc0a2568486dafe8da98c0304</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad6c24fa78959ace89e20e153e1e10c00</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aeaf093fbf6609d4c1b002b41d26af704</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ab371a8d3282ff9de7237f49ec23e77d3</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a3f348042c8ae89746202bc6b2e4ae682</anchor>
      <arglist>(const btVector2 &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ae74eca301c718c9a3f7d8443dab062d1</anchor>
      <arglist>(const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad6867e2f09fe401a4648acbd8a572bc4</anchor>
      <arglist>(const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad5edbced1c61688846d9a658673ff5e9</anchor>
      <arglist>(const btVector2 &amp;pivotPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrimmedName</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ae3d08571cf5301cb45b6aa5d1f7d0d56</anchor>
      <arglist>(const char *trimmedname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finishedPopulating</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a6b21f8bd2f04f98b989e701e2bc1e9db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPopulation</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a56aa65f48127935bc155f447ff6fa6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getOffset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad251526f577c203669dce43c57fdb78d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa37af4680cf03d3df50528cf58710b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a52d9c577604031d4e3beed9b7fc5f55c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a522898b21c47ba0f6c51945dc97ea2d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTrimmedName</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1dbdd58c5fe88ec6b6f7ec11d25bcc98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1dc9b9e157a3a2dddbbaf4f3cfc6ee5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSouceX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>af5b5c10f47874e5b82c55d81a094a881</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aad437bb2add0ea5cb17f32a51877e70e</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceWidth</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa3fd64395ce6b785b3ba5b38d11e1ee8</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceHeight</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ac47ba4c289d8439dafd653e3c403131a</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getSource</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1f26eb032b1aa268ba988bf572be47c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getSourceDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad7e29eaa3b0efaa0119d579f2db96ab2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>offset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a6f23c542bdc39901ed8fdb494f3be56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>dimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1f9f935a849b021e525e470c9b4b27aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>dimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa07d368205936a23ab9a47552b4e13c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>pivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5108b573ccf0471fe3df6d8b81409584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>trimmedname</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a2caf9b5b79ddae7f604841cfdbbbb93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>sourcePosition</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a4ea7c70282ea45aeb109a7efaaf8c979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>sourceDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1066fad026f447110bc3c4efe0ff3a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>populationCount</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a200cc3b5b916522d04e3efab3e0d81e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Scene</name>
    <filename>classnjli_1_1_scene.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a0707038e994ae3bed22babf6e776a044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a2f62aff9de100ccc100381a8961fa107</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9501100c7cb40aa14f2b404a9eb14a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a0f264baa2c26987faf1121afbc14bdb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af7e103d6bae0a80691c78ca17b649f0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a59f6db36b0f7af0f0da9fad35d489a5e</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae29659499a79266189dbed583e262873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>afbbba85f0713ce1366b2bdc838908e76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aa240923d4d9d2915578e799b283e70f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SceneStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae38e36bb5b256c846f22a2740a954a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SceneStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad2d9a121ea179363f9fcb09f42816a75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab67517186a935dae9dca439f31c5154a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a1df198e68ada8de3eb23caa2eba04f5b</anchor>
      <arglist>(Material *material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9186fa26416275bd05fdcc0357fa1745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a12ecfd14510a44dfa83274a8c12c29ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a11cb91df34a699520f0a046c71b11565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a90def3d75ecf11778a5728de8bb1d4af</anchor>
      <arglist>(PhysicsWorld *world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a967c76f1e30d1690cd5c7425f3dd2f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsWorld *</type>
      <name>getPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a122a2588d621f218327f09b6fafaead0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsWorld *</type>
      <name>getPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a43084ffbe6481515c8bd133d0e939e0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a666d9639161eaad751d3ff373325b33e</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a52ebc14871130c84d52d2db461cdd1fe</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a245ec2b188fb22f97e58d2bbca676424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a4ebd612572eb4427a0fbc6253595559b</anchor>
      <arglist>(std::vector&lt; Clock * &gt; &amp;clocks) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getClockIndex</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aa003e8d6eeddcc4a035f4660b2b22592</anchor>
      <arglist>(Clock *clock) const </arglist>
    </member>
    <member kind="function">
      <type>Clock *</type>
      <name>getClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a20db92de3bd211d7ee6ac54e224e7d59</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Clock *</type>
      <name>getClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a683151c7da5638bdbc9c0d5af4ab833c</anchor>
      <arglist>(const u32 index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad64cbb97e7e84d5d87983c0347255ddd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac2c8df0a9f3a2431616695a431d02454</anchor>
      <arglist>(Scene **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a61a4e750719d86e456fd5a4abc9a07f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7f10f9629740b036c78a63d4b0316c8c</anchor>
      <arglist>(const SceneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a293b5ea74645a774f41073830c793d88</anchor>
      <arglist>(const Scene &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adcbb1f5c0aba762c0f473f6d039311c7</anchor>
      <arglist>(const Scene &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad35fda4699c0bc0849fe2a0f8ef87d1b</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a3b7117279d96c87c6fd8b06204b58661</anchor>
      <arglist>(Scene &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adbe1acb134a946e54d85b865c5bd6193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af5b5f627027c8c24f6a9eb27c1cb1dbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab7db7cebb1627f136ea6831bb455a073</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a833d4549a6020037969b44d7dc766027</anchor>
      <arglist>(const Scene &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a04e4c63725b6fc0df8581eb71231d18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a817eeb559aaf499ed6b638ebafca1789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scene &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad99f4f5cb53d3330628071f08d7533d0</anchor>
      <arglist>(const Scene &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aad491cfead02896db73ba6271d58a298</anchor>
      <arglist>(f32 timeStep, const u32 numSubSteps=2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adc510ff6029dca669031a031d9ca0069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af8678a1d8c84d02cda6029f4afdaf484</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a27894158aebeba1a3251efa33c41aa71</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af1b996e40edb70d8eff9b3aef11f9197</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5a826df53ef02ccb6bdcd7969c186162</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveParticleEmitter</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac4345dcab380f4f28240047f684100a8</anchor>
      <arglist>(ParticleEmitter *particleEmitter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveParticleEmitter</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a09172111155b23406c7110982fbce2bc</anchor>
      <arglist>(ParticleEmitter *particleEmitter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a8ccfdf570bddfeda002ab780f14223a0</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a31e1f83511a7340324c21cb1285ed0a2</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aadb34e2132fede8f4a3dc0a9fdbb9d2c</anchor>
      <arglist>(Geometry *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af4f7c3b7b136bbf4f8aad6640814b9a3</anchor>
      <arglist>(Geometry *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearNodeTouches</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad8f34eff6d8d4fff8c293936b316f4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearAllStates</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7a3b03d4a7537c7716f88ba8e10af13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_RootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a43647a8e0be9fc885b5154c1af895afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SceneStateMachine *</type>
      <name>m_SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af74cab422e8f225410580c3094a621ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_BackgroundMaterial</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae68fc17490d0d3afc6aa5ac61cde8944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsWorld *</type>
      <name>m_PhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a987c6686913633182f6d4d71a917872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Clock * &gt;</type>
      <name>m_ClockList</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a23ab43beff4af464ec9ea551aa892a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Geometry * &gt;</type>
      <name>m_ActiveGeometries</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a41a8ee42401a0e68da0820a980b9b042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Camera * &gt; *</type>
      <name>m_ActiveCameras</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>abe73b94214ffe8887d59a09a94bd4ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Node * &gt; *</type>
      <name>m_ActiveNodes</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a076af6349b415c06d86800ded39d0880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ParticleEmitter * &gt; *</type>
      <name>m_ActiveParticleEmitters</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9e2632db11c766c01c3895648d8dc3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Clock * &gt; *</type>
      <name>m_ActiveClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a52406da635df8eccbda23477113a472d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Geometry * &gt; *</type>
      <name>m_ActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab32ba0913f59d782b2b9bbeea39be250</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5a2020205bbce2fe559331689dd5d3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneBuilder</name>
    <filename>classnjli_1_1_scene_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>abccb18d67fca8c8dc2b0bb8e691c7c40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a1f0076e0d469bc4c6e23d59679b96446</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>ab50f16b39fa66c111068d4d54c8452fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a5ca7bf189748df7319497d2191098196</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a03d9262c6bf1c6f333d084c2ecaede77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>affc310e8a67fb9d6d3f94eb9ff73cd31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a8583a21228e2dbfdd3eaa8673d9393a5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a49972474c43bccdb98d41331a77a278b</anchor>
      <arglist>(SceneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a923ced84827b27ff2a632f86a1ff2069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a8ddd4ad3c0a3d664797b8f634ad46e38</anchor>
      <arglist>(const SceneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a0c4bd96417b1b91a19fa7458e9abe22f</anchor>
      <arglist>(SceneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>ad475a0d0ae3edc9edc8b6bb0b266c049</anchor>
      <arglist>(SceneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>ad4967b2892dd6195f429cd63e4b0d759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>aefa2147c696bf2edee0274f20fbf96a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a4874af1675ba7d22de8af89a03df7a91</anchor>
      <arglist>(const SceneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a36a05627709826877824957228140eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a20f72535c60fd551d3ff693d3d5532e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a0b1525130a3d3157d71f65d3cda351af</anchor>
      <arglist>(const SceneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneRenderer</name>
    <filename>classnjli_1_1_scene_renderer.html</filename>
    <member kind="function">
      <type></type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>aa8b7633200769a68f2c95a308aa62a8e</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Descent</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a870e1c2090f107daf600d5a409bda43d</anchor>
      <arglist>(const btDbvtNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Process</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a98ffa15fc5ba2bc9ffb19a49edece5d5</anchor>
      <arglist>(const btDbvtNode *node, btScalar depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Process</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>ade1d97a0ddcd87e7136f2b39ebf22535</anchor>
      <arglist>(const btDbvtNode *leaf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SIMD_FORCE_INLINE OcclusionBuffer *</type>
      <name>getOcclusionBuffer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>af7485f1ca45d1a047db37cfc4eb5426a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SIMD_FORCE_INLINE const OcclusionBuffer *</type>
      <name>getOcclusionBuffer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a0300489b54152bdc585d337ce618ef9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SIMD_FORCE_INLINE void</type>
      <name>setOcclusionBuffer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a50263bdce686044b935ceb5a84508ee7</anchor>
      <arglist>(OcclusionBuffer *ocb)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getNumObjectsDrawn</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a7044798bb2772803b2dd1d4b3dc2620b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a886d857d64f2514f751a306b14232948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; btScalar, Node * &gt;</type>
      <name>Pair</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a3cc2885eef70f7d94df082b75067e1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::multimap&lt; btScalar, Node * &gt;</type>
      <name>MultiMap</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a913b28f6d06b3bf2dcb64da484213ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>btAlignedObjectArray&lt; Node * &gt;</type>
      <name>Array</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a8fa1cb988d3940a76d62d602bce4a768</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a6f7d2efc77dd86d0dcc14f2dfb023c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a1e9152c846d52166693856f668e140f1</anchor>
      <arglist>(const SceneRenderer &amp;copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SceneRenderer &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a4417ab5f7d2b7d4e191c4d0b8e91d2ad</anchor>
      <arglist>(const SceneRenderer &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_drawn</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>ac85fcf4508c9e328543863cedead2449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OcclusionBuffer *</type>
      <name>m_ocb</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a12b3746707e4959332deab775a118113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a0eaa363c2c013273aed8f0faf9ea0840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiMap</type>
      <name>m_TranslucentEntities</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>aa88771d764f9102c43e85562f09adf40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array</type>
      <name>m_OpaqueEntities</name>
      <anchorfile>classnjli_1_1_scene_renderer.html</anchorfile>
      <anchor>a2a4a72716946016b2e9c094771f53a27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneState</name>
    <filename>classnjli_1_1_scene_state.html</filename>
    <base>AbstractState&lt; Scene &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a5767ebcc1c80cce5cae2eff76138c1f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>aef750ad4fec1c3958cbc85abf74fd8d4</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>adec9631e81f6807383c115b17e05950d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a4086b31af0592084c3fb21c8bc8bd441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a86c4b392a3d42c4c98241f97550b059b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a73e24421764f1d96eede5c0ac0c7cba4</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>abdefc080d2a304ceef509f00868d7f48</anchor>
      <arglist>(Scene *scene, f32 timestep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a4818415baf54d4ed5fa71a55cdf190b9</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a280748e944d5fa2bc0a82d14bf549c43</anchor>
      <arglist>(Scene *scene, const Telegram &amp;telegram) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>abe6956a9d5d7681f451e0291b63e4516</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a03a8b7db153f36b6db6dae1a22a1d41e</anchor>
      <arglist>(SceneState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>afcde4c64095d671c60225c674bc1fc90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>acc3484a4af49ccfec343391daebf3068</anchor>
      <arglist>(const SceneStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ac28dcf458dbf229429cd125723765c08</anchor>
      <arglist>(const SceneState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a5d815cb00cfd27e01b0e5ed7986e1a0a</anchor>
      <arglist>(const SceneState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ac8c8cef4b6334e83c87add4d660eff43</anchor>
      <arglist>(SceneState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ac93ae48a51ffc7992685f845e5337f92</anchor>
      <arglist>(SceneState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a43370faa52b94d503dd851166ad1bc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a52f95093a613a2731c9e5af6d393d406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>af36183061e329d8bee934b0102dcca1a</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ae224c0ca2d4499a7cfdabecf50f4191a</anchor>
      <arglist>(const SceneState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a10621b814c7eb3f151d1fb2def0de843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a91f119f03c4b197f4500759fd43022f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a0846dbdb08ffd023657c645d998c932c</anchor>
      <arglist>(const SceneState &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateBuilder</name>
    <filename>classnjli_1_1_scene_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>acff2d999b1a09f5be84bb95a4d69518e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ad5b24e5d48ae38e32ac5bfa7a25907f2</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a17dbaa7a8e3b8b1660020a49ddfde208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ad76ab0ecf3294de0a08e42c31478cb0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>accdea2abcf82c4f8254d3f40f8c82d68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ac3ef8023ad78b2c35abe93f49eb5c424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a2fa60790d73f4ed82ccf024d1e058a0e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a4b8642b3297b0195b1ad89210e9f5464</anchor>
      <arglist>(SceneStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a6127a26f4aaf4059e95aa360da4d5d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a4eb14132aae1636b0bb5f06f8f3e881e</anchor>
      <arglist>(const SceneStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>af94f22826c8c2d603caf3a0de94bf46a</anchor>
      <arglist>(SceneStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a71b746748f3040c8810667d6ebc06eb7</anchor>
      <arglist>(SceneStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a2d09abc5d46cd8f1bb42a7b902ac9dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a044d81097ef875d2f0ed89ecc5041597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a83aa4a152e5afb7687cf1220f69fad78</anchor>
      <arglist>(const SceneStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a8dc264c729889a1b9d298d3723999acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ae1141fd1aa3f13f83f8a0c4f818c0bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ae201bb03e6cd4188d40633adfdb1f747</anchor>
      <arglist>(const SceneStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateMachine</name>
    <filename>classnjli_1_1_scene_state_machine.html</filename>
    <base>AbstractStateMachine&lt; Scene &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ab872b90f4fd80066576f7ac2ffdbd98d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ae267f17cda2e4334011569c86363d6bc</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a6828dc5009c1b3f81587a7cfcc0383e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ad677d52b4ad3a52bb2d748099e473ccf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a6010dd661e73e962558ffebb238b6d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a93446b0f72e2b99723d43922c396c88d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aa403d856a0b5b14931181b2f5e098eff</anchor>
      <arglist>(SceneStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a62f94a3fa70bc0a27b6b5602d4eb0bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aee0cb26189f21ff263697dd8d86b1256</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a2dc26fbeb00c941dc280458e461ec916</anchor>
      <arglist>(const SceneStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ace90543b218f3e5b1f7172ac9cf2b2b6</anchor>
      <arglist>(const SceneStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a248d99551f6eceb19bf8d0a76e24f212</anchor>
      <arglist>(SceneStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ab7f37bd69a2d5ffff4df3798500f2d2e</anchor>
      <arglist>(SceneStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a01c440498ecd83d2ad8740e19c702517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ac83cc2a4660d40ab9edd96b0c84c8582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a6b9e73f592b2b21dc20c4ad857200a55</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a2aa3ce6ee48ccf355faba089b44aa57c</anchor>
      <arglist>(const SceneStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a8d6f652887b7adf0a6627c60640a42d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a7cf8fbc1d263f18078f1c39ab1568b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a46c691c949a45d87b23364d65e64434c</anchor>
      <arglist>(const SceneStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateMachineBuilder</name>
    <filename>classnjli_1_1_scene_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a78e92aab8b0fdde3e502054861d863a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a306e553fed4c336c671baca228ddfd30</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ab2bd53f3d603e5fa85c76d3dbf6e0bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a6c6b4b29a7442808cc6e59bfbf241c1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a6036c2679b50e80628ccdde503383847</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ae8feef9d2f17f8b98e14a4625e8ab214</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a447767f853b948e2e4bc9663d313c35a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ad7bca3034cd97912ea93527beabbede9</anchor>
      <arglist>(SceneStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>accc56f3faa42b23125cbd23ad0903d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>aa7f4813ce9d5d99c24d5ee182a98ad76</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a94b076a25794ad0362a0b2950b6e6fed</anchor>
      <arglist>(SceneStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a59320e33b87d10c79ea6ee7332c7b4f0</anchor>
      <arglist>(SceneStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a289da85bb9772781fda9c28230e5c71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a71d8ef4d4414baa4b6606d4c50a44c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a0a51d5c4c70f41044dee451b1b0c39c7</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ab73b21033ac0ce8ccd949a445cc9518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>aef6e856b33606e4d75e887ae9c3b99ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ae342d44b9502fc04e99f7ccfb4ee10bb</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Action::Sequence</name>
    <filename>structnjli_1_1_action_1_1_sequence.html</filename>
    <member kind="variable">
      <type>std::queue&lt; Action * &gt; *</type>
      <name>sequenceQueue</name>
      <anchorfile>structnjli_1_1_action_1_1_sequence.html</anchorfile>
      <anchor>a5ca50a24ca873500db513b5793d60ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>numberOfActions</name>
      <anchorfile>structnjli_1_1_action_1_1_sequence.html</anchorfile>
      <anchor>aeb5ae53036c6785941c59a85c4bc9d2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ShaderProgram</name>
    <filename>classnjli_1_1_shader_program.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aae83e8f50688f4e6d995131577c6f877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a7a620016678fc921ebf0100bb4b4108d</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a16da8751fb35c0c0e5265f61abf097b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a07e2fc86c8dacc1358adae792da5a40e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ace784d5c35e4b2fdcde1cb1a6859d962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a302cf231b252535230e1eaa794c0dc3e</anchor>
      <arglist>(const std::string &amp;vertexShaderSource, const std::string &amp;fragmentShaderSource)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinked</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>acc34ddd8319df957d7a7278de58cddca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af93d37d88d0d56ae1dfe0a902ec7391e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a917fe9cc181856f037ba3c6f301cbb83</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>afebda50ee83d9c3edc51cfe05074cfe1</anchor>
      <arglist>(ShaderProgram **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ab83c3e9c3980d1634defdc1893348051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aab8cdffc694676583c5fd6d6c1fddd71</anchor>
      <arglist>(const ShaderProgramBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a523770f983514aa561c96fb1d4d41db0</anchor>
      <arglist>(const ShaderProgram &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a0e87d0f5882c1344bac847d736982737</anchor>
      <arglist>(const ShaderProgram &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ab2e2d69e0645c9b857f75207f9a39697</anchor>
      <arglist>(ShaderProgram *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a63b4edd585a0b9ef51c2578548421bf8</anchor>
      <arglist>(ShaderProgram &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aab5b5efee2af7a878bad1213aaaf1c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a5def475147030f4b08273f0dc0d8d0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a46ab4a8c88ca20c55202c9a152a57838</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a45a93b1279f11a5323e28070ccc778a8</anchor>
      <arglist>(const ShaderProgram &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a091874e0063dade5799d8061f156fe3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a1579c6785c5b66286e777362f413a158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ShaderProgram &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a5fcc9d59431056022b30003a6fe7a35d</anchor>
      <arglist>(const ShaderProgram &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>link</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>add1203b770ecde00cf3089433cdc372e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bindAttribute</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a594c725a3e03f3c287f9a806a23a21cd</anchor>
      <arglist>(const char *attributeName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getAttributeIndex</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af67434e2936da60a69561582112713b3</anchor>
      <arglist>(const char *attributeName) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getUniformIndex</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a2c808051a6d588a8df5ac7d44e308777</anchor>
      <arglist>(const char *uniformName) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>vertexShaderLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a530365b7fb3ed11afd9b6351685c93e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>fragmentShaderLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ad14638ca355f579b1671ed181e556a4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>programLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a1a8acd66f151141794f1318de54d78b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>use</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a3e6356c61c06c4cbb5b08351ef03d2a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>compile</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a5a6c623a0321cfc305b6edc6e514b049</anchor>
      <arglist>(const char *fileContent, njliShaderType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>compileShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a47e7e27178632533e9d8c805f5482812</anchor>
      <arglist>(s32 *shader, const u32 type, const char *source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>logForOpenGLObject</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a9b90e76dd8926135490c139995e0c616</anchor>
      <arglist>(u32 object, GLInfoFunction infoFunc, GLLogFunction logFunc) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>program</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a45ac2a28bfac766232066c1d8e70e993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>vertShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aba3909c715f4b21a0bd269cedbd312de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>fragShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a8d458f03143bbe222e248f936a7f7ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_VertexShaderSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a36b6891a72ec4e6f7ee89add79884282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_FragmentShaderSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aa1e64cb2fabffbafbff9f7c707672643</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ShaderProgramBuilder</name>
    <filename>classnjli_1_1_shader_program_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ae74a88885ee33f101b20c9ac68559a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>af065cc6f8d5de1e09f2be21cf8f4d20c</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a05f638f557318e10a4182a468531b678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>afeb76a47564760bf87feb828ae97acd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a358907ae1e64e01b70e291f21061b768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a61843013c4b89ddfccc1fa2bcb6b6035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>af3ee71ce0ed26f3050e28916b7cfd818</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a4e8ee561180df21b6e061c30e4f3b071</anchor>
      <arglist>(ShaderProgramBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a2d8c46e30b49bce339629c9e111b8786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ad32d1c1a359b3b79a991027517852297</anchor>
      <arglist>(const ShaderProgramBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a38ac01f896b85f92b5d0086aaab8806b</anchor>
      <arglist>(ShaderProgramBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ad7ee6d9c3e34355d98c97db110e2ce60</anchor>
      <arglist>(ShaderProgramBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>aac4a56fc360404835d50d7f3ac5564a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a4743299668f5602a53b707a34d160e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a8e2f894d4040fb68acb4d0af0cacafd8</anchor>
      <arglist>(const ShaderProgramBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>af93458672273f1de79cf909e24e57851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>aecd6662bced2cbeb8a36e07bd3fab4f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ShaderProgramBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ae60db1e24c353d0c5cfd33f1800f0dec</anchor>
      <arglist>(const ShaderProgramBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Skinner</name>
    <filename>classnjli_1_1_skinner.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a83f5c9203e1430cd6e4aa47302077c6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a106a2cc4b8209d9541bf8afef4ca052d</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>acdc3b12a7aa91e682a80567571fc74db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a14c21f370a39700031334a919d8ba133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a305831e365f3e40a877150f4cb23aa96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>af38ac402ff8298080f43896a35fd02bc</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a1d2eca547357902dc6274ae51f8fc397</anchor>
      <arglist>(Skinner **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a3f770a71ccb447881016167aa1317f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a6d7421e508e9be0aca7044183b6b4da0</anchor>
      <arglist>(const SkinnerBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>afd35c15cbdb9f131e57194b97d9ec0aa</anchor>
      <arglist>(const Skinner &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ac7c1c3d2546be43b24733de8f4f15219</anchor>
      <arglist>(const Skinner &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>add10f6e1d4a8ddf8cae610c8a4adedcd</anchor>
      <arglist>(Skinner *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ada7679ed07d74cc739c51646c7ec9a65</anchor>
      <arglist>(Skinner &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a29943e4ce992d9f7d3434b760fb6883a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a971fdfce176805ad32671fa772f355b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ab8f209901a9b9978be443c0c1d13b345</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>acae70ea7c8a5dbbcb8f8483a9fcf513c</anchor>
      <arglist>(const Skinner &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a701e75f62ec38a9c39d88abd4f782c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a9c20a50b9e01c9420d20ed4761c30347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Skinner &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a0b9ed42ffd2fb87a91c7d1e805d1b4c3</anchor>
      <arglist>(const Skinner &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SkinnerBuilder</name>
    <filename>classnjli_1_1_skinner_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a8f741689d269fdf11644732cddbfe4ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a850a001e3ca6191e14709d89ba673a14</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a3a781bafe5320286ca748f6c5aebad04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>af77e4791f0208dc0fe383b22161b4136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a2ca651d394b2b3c0bf82e9b597738868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a2ed93263ea97275742eef48a1c1e329b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>aed7d9075c93ffd9b28654f9a96f17c7d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a63653e45c565294e8d408bb2baa0ccad</anchor>
      <arglist>(SkinnerBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a128e3623c422973491bbc8a362c0fa3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a4b97413abea93be877bb5914c0b848a8</anchor>
      <arglist>(const SkinnerBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a55fcf91101fb08d530365a53dcc26a8f</anchor>
      <arglist>(SkinnerBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a6744b449f6bf0123ca2969fa64e8efeb</anchor>
      <arglist>(SkinnerBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a7fe68774d08de2541dbac48b0c357227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ad550292245e00cf9018ef51d8a793b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a400b16ca147c44e5a8afe3d9fa4731f8</anchor>
      <arglist>(const SkinnerBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a0b5e02d1a83e879b816c3acaca0b4a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a305ed24edf45e6575ff4871f797b5dd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SkinnerBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a11cabbf543be087d4771899c3446e516</anchor>
      <arglist>(const SkinnerBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SliderHUD</name>
    <filename>classnjli_1_1_slider_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a456996bd407aadcff106066fee534f79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a1f2cd8e4157d05801d22801e7f58ad1b</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a63c57f819484eb8113b95bda67ae5dec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a550113d4f011a4eb0ef2806b39f35197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a039c049aac266522b364987695ae3b73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>af297ea719c95c5c078620135d8b715c5</anchor>
      <arglist>(f32 v)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getValue</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>af496f8c3468bff59762afa64e805ea2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a8e672710948cf2d13e370b3de7e69d43</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a3ef7c7176f6a47e3571e4517ec093612</anchor>
      <arglist>(SliderHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a1e2aac44eff18d5dc4cbb54bbe107712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a1ffb50664f336faf67b4267d2b0c7d9c</anchor>
      <arglist>(const SliderHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>acd4aeb77b3ef645678c44efa7bccf7e8</anchor>
      <arglist>(const SliderHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>ae01f6f0fb75b0d441dc3ff16c511db9f</anchor>
      <arglist>(const SliderHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a382f29089def7850593f585fb68f3cf0</anchor>
      <arglist>(SliderHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a77d9fdb9bf26d4f08b905b2c25f8778c</anchor>
      <arglist>(SliderHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a3b8f5ee0421131472429a88cfee679a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a8cc2cb200f5a52bd7f4d5f1520a08524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a2ea762c03a7585d4e5c6d2aa3a23692a</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>adb10bba5954a63dc1b6c0a0c22b41899</anchor>
      <arglist>(const SliderHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a7804e6f55bef27c234667ab64595acca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a77a734f765313a878d1714165f01d147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SliderHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>af6cd08d6286ee05ad71780f92333d771</anchor>
      <arglist>(const SliderHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a9d55c42194c5f6d41a961de885c8fd5a</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a0b02cb21788a357fb319b8e788338196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a4345d7ad18c82bffdd598fa040dcf95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_knobPos</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a2f5beb25d041a338881130f604b76c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotHeight</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>adca46e42811634fb76694319deb9cce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotRadius</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a983798d2710f43d303b8b0d573cd041a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotFeather</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>aec325cfe3424cc232b5fe653e2ca6868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a52343c794850b57c10fe8ae72a89f18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a17b3288b1e99144187f62ad925e36a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobShadowGradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a72fffbbb906af2c53bcd4ae214720725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobShadowGradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a8eb7e4813c2c5db6b4017c122fc51109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobGradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a72191d6f3cf8188a0a84f26058700430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobGradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a63a84c5b27d77d69697e02540ea40c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>aa2045a80a0751ba59755d073d44087dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SliderHUDBuilder</name>
    <filename>classnjli_1_1_slider_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a0061cf9535f7cc39935a3a2b6419abf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a252f102d80b0b214068e07b4b348dda4</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a7b836aad94cee771998edfca54300465</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a64b5ef5ea1fa6be7c89295b8bd6461d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a013871974d7174b32fe363d04295b2cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a5d94578cdf1c5df6ced697ceb4d19804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>ac284be27bc0abc71c29fff04bb74af3c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>aa890f6a1f614fffd89aa991b807411e2</anchor>
      <arglist>(SliderHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a519507aafb3108f1126e8df5402b1210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a7209329582cee52192a66b688b93a888</anchor>
      <arglist>(const SliderHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a434a9f290dd5b85033601d9a59c4750e</anchor>
      <arglist>(SliderHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a645ef2afad7412a9b684e504fdd4db32</anchor>
      <arglist>(SliderHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>afd684e30c406ce48007ba34eb773b306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>af73a377428f6af72564355d163b4dc16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a196d311ee0b48ddb8d3afdc096f5e392</anchor>
      <arglist>(const SliderHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>afd9977bba090ace2dd35ea7fd0b8af19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a9eee74c1c95deef7050c6f804a56fcd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SliderHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a566743107cc161b227ba6b78971f03f5</anchor>
      <arglist>(const SliderHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sound</name>
    <filename>classnjli_1_1_sound.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractTransform</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a7c5b95794e007ccbc6df8b272f25c30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a76b263a615e9e27d6d7f3d5355ed478f</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a2404ec153a1af05e0463bef9de5a6115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a366d8700cb45a1b3a4b516936e92e940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a0d55fd96177c180592e2a2858cc9a01e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimePosition</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab901d2259a11d7fcfb81703bdd123f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimePosition</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab47ad411b9f9cc12b39ddd20080293e1</anchor>
      <arglist>(f32 pos)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeLength</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a310e49f228af60ce97e14fc1b6a448a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a24d6a4011b3148bf41801ad68350d14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aad31814ddad91970ae4418da96035b8a</anchor>
      <arglist>(bool isPaused=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab1bcced722c234e1f1e243ef2c0fec33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a78cf20388060b6be413aadc5967193c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ac9b262c7c7d7a68f3812e0d30b675648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unPause</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab6f878ee1163bab97ffffc98ee60789d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuted</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a75777bf34afc2d2c3a83238dbc67aae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mute</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>adf46d412ea87b44a16190049b74a18ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unMute</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aec8eb5528c8c0f4abfd7a69b0fb48aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getVolume</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab765af304f9023b6aa75cea03893fa32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a2dd1ddc8d8b04c90bb06808ad43e6642</anchor>
      <arglist>(f32 vol=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getLoopCount</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a200bee960269b65caf5e756db795cc31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoopCount</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a0b08a237f722aec6daa46c364026834d</anchor>
      <arglist>(s32 count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a4b7a8ece8e0e202333f2503439945412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>afe9d314ce74f806284a71dc06b4ed49a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>af1810cb796cda9c9d84ba28f3a0d8ddf</anchor>
      <arglist>(Sound **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a1e4eecd523bbdeb14ad7960be052ece9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a0541df0bea26b9f9f17d73b996d23aa6</anchor>
      <arglist>(const SoundBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a59f89544f5a6b184f8b19a53a7477000</anchor>
      <arglist>(const Sound &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a9ec3756dbe60a666478daf5e2d0a17d8</anchor>
      <arglist>(const Sound &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a023bb75371ded2019f650dfa8b6e03f6</anchor>
      <arglist>(Sound *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a41494cb822b91e70ec894f8eb2bfdd54</anchor>
      <arglist>(Sound &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a77826080c397a43ac8c78967aeea33f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a5e12f6636f376b32d2c8111348db08cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a646fac583099c08c0c4b8f6bea667ba6</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a9e7e19a78ee4e0bcdc9e5e7c3d7a7f67</anchor>
      <arglist>(const Sound &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a5292abe9fa05e3809af27839e05e146e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a579238f2638337c0a221b636577a9a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sound &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aeaf2801406eac8f11345eb664816e61d</anchor>
      <arglist>(const Sound &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldSound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ae0be99489b1d41e4e52d3692b0d9cab2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SoundBuilder</name>
    <filename>classnjli_1_1_sound_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a90bd12798a283224fb9a167d3c4e7726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a221547ecebd70a83b58a4fca922a80e8</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>aed98e081915ccd613bd505a76911417d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a9543039a507131337878936508df5f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>aab74e53f9fa857f9b72f8e5ce3e30aad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a6f67d4e604d12efab990599663ec2176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>af14e5735f8fd8bf6fad72e27c906640c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>abfe4ca72111e5d301adf3a8ecbed37f3</anchor>
      <arglist>(SoundBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a09e04e16b0e2794fd9bdd82b477688a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a29cff016ad68a4ef361460ae3157a78c</anchor>
      <arglist>(const SoundBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a4b95327afc6852a3f4e870df91e070f3</anchor>
      <arglist>(SoundBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a046d6997dcec11e9d12aa500143469e6</anchor>
      <arglist>(SoundBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>aaf93738c5ab95130da9ba655e12c463b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a8528324a8c0aaf4d7f92dcaf55529869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a5a0fda44d88783ea23ff9149c1ceb5e2</anchor>
      <arglist>(const SoundBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a29c0f9da4d66868dc0c5e7ceb55cc78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a052c02503625b8df852c6ca95ca9aa84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoundBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ad7b7e68d251003a1f28cc890374a85cd</anchor>
      <arglist>(const SoundBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2D</name>
    <filename>classnjli_1_1_sprite2_d.html</filename>
    <base>njli::Geometry</base>
    <class kind="class">njli::Sprite2D::SpriteQuad</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a252dd0b62cd706c9a805425aa59bb550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2f57128fa5ef1417ee3598fe0792187a</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a399f07b81f494a0f290bf8030d54eb0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ab7c1223bf41e4c9f6042a9e9204518f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>af49dc5ac3fecf2713da014ff01b4bca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2bb5395422f05e4adfd14054807c5c78</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a067aa1583f9d96a50313a0fe7213afa7</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ab0750f940f09b135e78dff8d0a682af9</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a317376e3e41a6a7106fddcfbfa930c0b</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a8e441e326e217489454e7efe22058344</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a8586916f92ba16b822a9acf80ac75fd1</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5b9118de6e4f58e6805a4f29e45fe4db</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a25d31baab5eb7bbaf1ac0716c527c3cd</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a532e19de2ce3261cb531fed35dc8ec77</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0f2a1109dff20c6aa307cc4f72975b5f</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5a66431d2ddbf6afb6acf279a9f1d59e</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a35fe1ecd260f04a3d60d33c3844f6459</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0ff724f572e6768e9d1b20b6898af095</anchor>
      <arglist>(Node *node, const f32 &amp;xoffset, const f32 &amp;yoffset, const f32 &amp;xdim, const f32 &amp;ydim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a925843b85976cb7df479f7ffc8635d5b</anchor>
      <arglist>(Node *node, const btVector2 &amp;offset, const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>adfdcb93f490645ae11398c033df8235f</anchor>
      <arglist>(Node *node, const Rect &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>af4869e2abefd5adc60b997628ec02a09</anchor>
      <arglist>(Node *node, SpriteFrameAtlas *atlas, const char *frameName, bool matchDimension=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a17b3bca9c69dda742fbf86a6853204ee</anchor>
      <arglist>(Node *node, SpriteFrameAtlas *atlas, int frameIndex, bool matchDimension=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a1df32861ec578642d7e92c77f6b886f2</anchor>
      <arglist>(Node *node, const btVector2 &amp;dimensions, const btVector2 &amp;spritePivotPoint=btVector2(0.5f, 0.5f))</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2f295be0f706866d5f6e1fe28ba582e4</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2f5c198459ce4e57063e9d23eefd4a1d</anchor>
      <arglist>(Node *node, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const </arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPivotPoint</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a62733dda4be3594298f362ac0c20fbd1</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureOffsets</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4d706d6c031c824764e933233829e63a</anchor>
      <arglist>(Node *node, const btVector2 &amp;textureCoordOffset, const btVector2 &amp;textureCoordDimensions)</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getTextureCoordinateOffsets</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a729e1c6cfcbd5d1206996b4e32054c11</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getTextureCoordinateDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a346be0ab31e72e3e736ec5950b960394</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0e06bbf2ab717c55c8ec8483ab6d8157</anchor>
      <arglist>(Node *node, const btVector4 &amp;bottomLeft, const btVector4 &amp;bottomRight, const btVector4 &amp;topLeft, const btVector4 &amp;topRight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ad8e90cd6c323796e293a883b10a67681</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorBottomLeft</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a8799822aec5a89799cadae26fb38b064</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorBottomRight</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a08ad1073612c01083a8ab77a95c6f7f0</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorTopLeft</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a38bb74b911ab8d87f46734b2f341fdfc</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorTopRight</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ab22b6cdba0d69342a55bb553d5dd34cc</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae93aa2f042548787935be2b59fbfc2a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ac8b3dc5445dd56697550ba5673a099fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7265065dfeb76dc5e8ecf5f708469841</anchor>
      <arglist>(Node *node, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0d2b57a42c8fbb0dc230778d473fa360</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae4f988c8100b7e41a4e933a0b0bd5dbf</anchor>
      <arglist>(Sprite2D **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>acbc1edf201be14f4cc83dbd8733174bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a3a216e95c1259d042dedbe8d8d512234</anchor>
      <arglist>(const Sprite2DBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>af4e662a2d06aa3ad8890de1898e4be56</anchor>
      <arglist>(const Sprite2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aec0dabe10e2e69ddfba95104ade3eb54</anchor>
      <arglist>(const Sprite2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aad9d625576aa91b73b90e5b2ab3f9cc2</anchor>
      <arglist>(Sprite2D *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a78ffb12bfeb0652fb6cabdc37b60b52b</anchor>
      <arglist>(Sprite2D &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a685a6b433bce4135232b540705c24c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae1afa39b1a31b063b987d75cb2cebb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0f243b6919f6ce210a53dbf5429b1609</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae9006247411dd22ca34f98cfe3f54f0c</anchor>
      <arglist>(const Sprite2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5ad2cf93a7f76fa359afeee9b4b7cccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ac02e2eee8a82bb056a7675addabb2adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sprite2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a23d3d60873eed1675f56957aff3b1407</anchor>
      <arglist>(const Sprite2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a35efc431082729f2dee7b4a2bb89c90a</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a1eb18ee4456f637f49d4f8af92c26d21</anchor>
      <arglist>(const u64 spriteIndex, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ab44453c3f9116876e71dad86d7bca445</anchor>
      <arglist>(const u64 spriteIndex, btVector2 &amp;bottomLeft, btVector2 &amp;bottomRight, btVector2 &amp;topLeft, btVector2 &amp;topRight) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2616b43af1538ab520962098e76372be</anchor>
      <arglist>(const u64 spriteIndex, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5e984dd03b07c3169307263b9c9ca046</anchor>
      <arglist>(const u64 spriteIndex, btVector2 &amp;bottomLeft, btVector2 &amp;bottomRight, btVector2 &amp;topLeft, btVector2 &amp;topRight) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a9e9b884bf7160977a67dc9e714827188</anchor>
      <arglist>(const u64 spriteIndex, const btVector4 &amp;bottomLeft, const btVector4 &amp;bottomRight, const btVector4 &amp;topLeft, const btVector4 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2aaf6d6f53722cebc44d688a5f3699ff</anchor>
      <arglist>(const u64 spriteIndex, btVector4 &amp;bottomLeft, btVector4 &amp;bottomRight, btVector4 &amp;topLeft, btVector4 &amp;topRight) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a909a90111bfa5855afcecf63593b747b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a83f109e731f5b8de3c802291adf8f45d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a310321527886b81f468aa818812a3347</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a834bf0764d3f8291b382620a1f201fb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a33b03c77f8da63cb555af5c3a30377ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a1198a11af1b9fd2a5acf04599cc670f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5287305ef66a218f3dc4c87b1c5ae26e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aa49d23d6a4309011c4709125e2f6d961</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a564dbc768536e5be4618a1413b1fd284</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4a0be33f855fcef2b8ab1ebed8b09652</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpriteQuad *</type>
      <name>m_Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0fad1694353e933dcd9793b071ff126b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16 *</type>
      <name>m_Indexes</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ad95a14aca71071fb7bca74a1320cd5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_SpritePivots</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a11de2ec387edcd23e7b0508e00e4266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2DBuilder</name>
    <filename>classnjli_1_1_sprite2_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a6ad05d05ace6d6eca5ffc35ea9769663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>aa563c46bd7829e75fea39e58e2f7571b</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>aac0d11f3b1398b91e61df46f2a7d72b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a8bf72942590a590c2cc516c23ef6c806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a42ababaf4045032d58ada3df42ec212a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ac6df29af2519db6000cec3b95b973db1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ad313bbfd9964993c6b89d83cbf32f558</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a9cea73c6e81457929d20147968432552</anchor>
      <arglist>(Sprite2DBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a8c2fbcdd93269abd28b1c785a6c45f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ab069c31a5506a7ee7ebf40530de52c16</anchor>
      <arglist>(const Sprite2DBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a3c58ec49a8da634e8bbac82de1910bc2</anchor>
      <arglist>(Sprite2DBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>acdf5dbc53ca6508c4578c3db3f655e68</anchor>
      <arglist>(Sprite2DBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>adedb4eef77cf21f226b73440e915dd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a2e85b174d6ad697a903b0f4fb3cd1f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ad2651a7e1fa270afeb471fff17074f4c</anchor>
      <arglist>(const Sprite2DBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a3cb3a2562d320aeb02a16b5ca981f9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a344b199afb537f9534db528e668f677c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sprite2DBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a9aa2563036e643f48fc564b1dedb7448</anchor>
      <arglist>(const Sprite2DBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SpriteFrameAtlas</name>
    <filename>classnjli_1_1_sprite_frame_atlas.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>aee7675db01493f21366214bc44519e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>ab276a9707f185e46ca7007d82db92540</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>adca5df13b8f7a74aa5a34e6d4253f958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>ac7373831fbb93394e36b86f9fc001b3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a111619cdfe31b436798411374a2b08d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acdb8abdcb12a78faaba9bc8bb03b1813</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSheetContentWidth</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a13cf0c784936ff97ddffbce245df1c9c</anchor>
      <arglist>(const u32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSheetContentHeight</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3ad6be6edaad4035f39bc4f2f992d424</anchor>
      <arglist>(const u32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a029155ea70b98a96833a1c27d6ce530a</anchor>
      <arglist>(Rect rect)</arglist>
    </member>
    <member kind="function">
      <type>const Rect &amp;</type>
      <name>getFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>adbd7abd6ed1c21ac861c8b467842f121</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <type>const Rect &amp;</type>
      <name>getFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3c284a97bfb873b861498944c2750545</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a134f8841de5ed9fb03d9e436dcc85559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>numberOfFrames</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a432c4b85aaa0821fe70a1fb1bac6b669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>contentDimension</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a4368d7f386dc33b4c4e1f737df05bcaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a9ca4801deaf79c268fdfe97d0f003fb3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>ab709acbedabc1725b06adaa6a0cb5896</anchor>
      <arglist>(SpriteFrameAtlas **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>afd905c2c9a1ead386f5ba4add34d0881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a0b6461ba4aae4330691ed67adda25b03</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a07d7ca821e0bbe478f795d214684b27c</anchor>
      <arglist>(const SpriteFrameAtlas &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a39c10536bb0b14e61f4b8d446c74b1de</anchor>
      <arglist>(const SpriteFrameAtlas &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a54915f405ea67606e46e93393b11f79b</anchor>
      <arglist>(SpriteFrameAtlas *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3dd3d7b14fc16e7f5eb257a709808888</anchor>
      <arglist>(SpriteFrameAtlas &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a71f9e4cb495f62f1cf99471e3ad79bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a596bc53daef8f1de21fb018c04b5b71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a15a8fe9a69c63d560897562decfc55e2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a425671e7ea1cc989dd59d60865ec4792</anchor>
      <arglist>(const SpriteFrameAtlas &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a79e815f85949f9e26a982b87344b94b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a1d9fb53aaa1f321f4cbab2afa578da12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SpriteFrameAtlas &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a0c47831444789935503e34d5ab267f5f</anchor>
      <arglist>(const SpriteFrameAtlas &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static s32</type>
      <name>countParameters</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a8e1e4a08c88fe319fccddd4e34043016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static njli::Rect</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a85cbbab899666861a829c1cb06a03f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3b74d61cf8f45bdb16b7d17eacc9ec47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_ContentDimension</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acbe7fbc410b99d7a736dd06b56c9a1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Rect &gt;</type>
      <name>m_Frames</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>aa93f565817540b4d7d18f3a39cda90ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SpriteFrameAtlasBuilder</name>
    <filename>classnjli_1_1_sprite_frame_atlas_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ab7087d8e74110082a9891d4502490c82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a251753cee40b4220e473e65df449c6bd</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a3444976beb566a852183b7677b1d4dd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a10af7358654bb4a2193d71a71c21c5e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ac2dcbba79d9fb67fef68ad35cfc6b913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a6c14cab8abd4a91c92e81a8919201f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ab85b6a7f516870dfe24ab831cd8c876d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a01cc9ee6d14da10bbeb5dc1d67274808</anchor>
      <arglist>(SpriteFrameAtlasBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a5676a58f9171ccdeee044ff4c3cff988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>abd0ba4b74c335304cd989cc07b729634</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ad6dc69686f1e3397cfb9750565f07a23</anchor>
      <arglist>(SpriteFrameAtlasBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a9f3455bdfb39665ff829f5f361af61db</anchor>
      <arglist>(SpriteFrameAtlasBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>afd8e4898f369d31a1b7d5035f785da1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>abec86e9a21df3c99e6377874d7c1e191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ae2fe8b7db6cf2781d147fee0a88ef81d</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a71d987eef7b62ec6e6e92a6557412d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ae8053c3a8476a0335bfa0a4e9361c186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SpriteFrameAtlasBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a8e8e522b427e2345a752e1c24422d65f</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2D::SpriteQuad</name>
    <filename>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</filename>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a1588bdc509bad614fa09659bc775eaad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SpriteQuad &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a97bb5f82275fdce50e4352eab0e14e6c</anchor>
      <arglist>(const SpriteQuad &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>bl</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>ae0ffef0622181dcc734b02cef8f45075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>br</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>aa7033cec9b83bad9dfcadb89f29dcf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>tl</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>aecfbaa6fa13750f9fa1347cf36d12f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>tr</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a0eb387285104214c4b47b616a923d48d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::StopWatch</name>
    <filename>classnjli_1_1_stop_watch.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractClock</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a290eeb5d4dd2d1d4df4c35db1aafdab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a55dd0bee07e17fc069ff2f3d4304995f</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a2773fc93edd309f9a843b814d66186f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a6ef8e17755492263922c31bf46053a9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a0632943ed03d5ca5112e2f00daccf728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aa3e50b644e35bf517d5dac02b64736b5</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a86c10437140b1a885228b17dca3697d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getMilliseconds</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aa18f65d2873cb83258cca59d2e9e600f</anchor>
      <arglist>(s32 index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a611f4cc1cd65b7099db654f1052c6910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a2a2b24ca04200f4456683d2178c1fa41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lap</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a94fa6e3e6b10171d826141c1c5c6dd50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearLaps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a190d183506dce6ce0497fd339e1891a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>numberOfLaps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a4c1ef7d5831b366836689566ac084d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a6997b9350a9ebc91cc8bd907de05dcb5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>adf9fb270122f9bafc7409bd7b6c31c5d</anchor>
      <arglist>(StopWatch **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a764ac05a9ef87e4f1989624ef148497d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>afba38db223744187e63dfd342413c155</anchor>
      <arglist>(const StopWatchBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aa591feca000823a56ec89fdf1fce7477</anchor>
      <arglist>(const StopWatch &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aa01ddd1f5ce8cd4394f58ba0c423c56c</anchor>
      <arglist>(const StopWatch &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ac7a3e33e822c06f7005c16c8d106d5d2</anchor>
      <arglist>(StopWatch *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aec19e2f84b17cba7e1aea4d90511e7bf</anchor>
      <arglist>(StopWatch &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a03f57023cfe0c00db7bf9d86639255f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ac094097f357ce5be29c99163839b69e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aebfc9a72bddb3b3be0e32ede9aad6c81</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a9417fb532a505e9bffc6833cab50c4fc</anchor>
      <arglist>(const StopWatch &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>acbfde61e615ca5f35cfb60307576015f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a64fbd3663170b21ab961a856730575cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StopWatch &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a0f6b0de9c6a97571825afa5d3b0caed4</anchor>
      <arglist>(const StopWatch &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned long int &gt;</type>
      <name>m_Laps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a8a743a402f3b3196e5d1821c15a7a567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_CurrentClock</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>abf7f6282ed8ff446622b56da25d5dbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsStopped</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a4e9ad8912f5c1d4246a5cda677f6d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long int</type>
      <name>m_StoppedMilliseconds</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a90f72afdaba0072fc81c3d11953e0a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::StopWatchBuilder</name>
    <filename>classnjli_1_1_stop_watch_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a5ec989825ff51c730d510ff83181e1b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>af3379c6b5ac90d2e3f4ab7f24bbabbfc</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a37622f388aedf591656f981de826a1c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>aa34fc2bb5b364bb627fc9bc74dd619ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a6fc5326c5b779c30769a62152044b5c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a768796e2ffd0653a7e60982925ff7ab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a07f15c8246e677be6ce3ffe5ef2e6cea</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a1b68ef0af6fdb2d15d538d6b2c680445</anchor>
      <arglist>(StopWatchBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>afbebc5121ffa8cbc487ac2728e4950ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>afb2cf552b312f3f45b2a663b87bef60a</anchor>
      <arglist>(const StopWatchBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a0ef5fd5e1bdadb5dc6ade1cae3a3f1c5</anchor>
      <arglist>(StopWatchBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a363294130aecea0eae1c780ecdf3bf83</anchor>
      <arglist>(StopWatchBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a153db19d8a7a1492516077e711cbb0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a7b5b92f163586f62f8d7c545f54e361a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a0affbfac16041e1e96a30c41df34db1a</anchor>
      <arglist>(const StopWatchBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a1bd5b633e5412e45bd1a002163295f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a1166dbcad7ba1a4e70c7fb2f8667756a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StopWatchBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>aef31b1922412f859cafa9b9e1abbfda7</anchor>
      <arglist>(const StopWatchBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Telegram</name>
    <filename>classnjli_1_1_telegram.html</filename>
    <member kind="function">
      <type></type>
      <name>Telegram</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>aa11c66843172eabb2329c15a4d7ebe05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Telegram</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ab4334c9796b4c8a8bbc3727061059c3d</anchor>
      <arglist>(f32 time, AbstractFactoryObject *sender, AbstractFactoryObject *receiver, s32 msg, void *info=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>AbstractFactoryObject *</type>
      <name>Sender</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ac8d9684f9beb98cdbfb912cefb18f036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AbstractFactoryObject *</type>
      <name>Receiver</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>aa2811ae30fb5bcbdb6dfd89bd1305b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>Msg</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>a5b15d94b15ff8de3637c94f93744b26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>DispatchTime</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ad3624ff53bc492416a0b19f39107bfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ExtraInfo</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>a2248c08d1f6bd31106010ec55c7c0818</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TextboxHUD</name>
    <filename>classnjli_1_1_textbox_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ac3beb5646d97d427a0ad996bba178255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a4e2d74acafe6d4a73d33d5b36af18262</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a17645de64a4f4e2fee9439c3ce7c59b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a7a3e8235e5dea77f7df71cad92c116bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a27882d0981b2e65f3a3eab173e27f034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a5d99a2f0aed8cb304f3210cfa7a4b5e0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a734b11614cdead2f988e261d2e9af002</anchor>
      <arglist>(TextboxHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a3639e9c9d773531950ce368f39daad11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>af37addb4399e851b53035a89a5e2dfb2</anchor>
      <arglist>(const TextboxHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a66cab53215f4b759b00aa3571c2dc9ce</anchor>
      <arglist>(const TextboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a5130c28f9b2d0aabc22da1cad6902210</anchor>
      <arglist>(const TextboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>aeb7b3169b46bf0789de05c4a459659b0</anchor>
      <arglist>(TextboxHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>afab0dd5084b5b95e10b328d2be71c7ff</anchor>
      <arglist>(TextboxHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a412a01554b1b65e80045bd35d94898c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a9a0ce975431d7930d46a0406bf82bffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a72ea32640b49facfc173d4bce0154059</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a2c12dbf9d897e48706af201df9e01cb2</anchor>
      <arglist>(const TextboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a75cfd14dba59041431b7363277633168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a7ac6e8aed20c166ebec3b8ac9437994f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextboxHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>acd5608ecdc9c6311fc1af249b2dabfef</anchor>
      <arglist>(const TextboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a39c061025334f4fd3f730dae39f7aa98</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a3fdbfd3f2db11b4a118fdc82a7bc1c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a27b131699bb7dcf4fc947bd6b00bb7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a380d4290dada0dc4d473607232c40583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a858485f108bca319bc515277ed761b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a48c6372c4c026a947fab4171e35a4e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerFeather</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ab28ef6131914c9b7a70c546ab8f8f4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_borderColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>aec80fd8dffdf0020e7c87cee649627ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a01079b7367a5e9e86893c53ec5db32d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a424e4e0af8b1edca7a9c25987e83ea1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fontColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a92f502e47b78d0ad705d2c38d657e2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a1bbc7f330620b73ffb42494271a304d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a60d9bc72cf0a7f5307dc3a65f6b15a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TextboxHUDBuilder</name>
    <filename>classnjli_1_1_textbox_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ac793e261982c0304bbf539c8145bf363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a11eeb7b8e499838f4b3300ef30edf835</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a3f3bc5defd264965d2136789375d832d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ac3aeb0683830a4f041c9901eded974cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a155c8e579dcac5d04a9c5029d01be675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a793838b780671e070bff97c137d62076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a4be7de32a385130c12c77108754ce065</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ad0aff287fbe9ec496d5a1da465581a11</anchor>
      <arglist>(TextboxHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a4837601a1dc0a08c571ceaa4b51f5be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a730a84212d74035e6f37ab0faf71f93e</anchor>
      <arglist>(const TextboxHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a7509ebd911a275936e13e859158fd342</anchor>
      <arglist>(TextboxHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a8f5358a099b1a136293c24df140ce2fc</anchor>
      <arglist>(TextboxHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ab3942847dd05ff7ad29ff784e535ffb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a28ac1b244ed9cdc522094f7a21179705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a3cd77b395d1e5a1f5d98702b3c5aa8b9</anchor>
      <arglist>(const TextboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a6eb96d9b8d9d5e9fc8122b43739c4a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>abe8066c15455b2b551f77e6f3485250a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextboxHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>abb7456959821fe64ac0182f81bcd4a3c</anchor>
      <arglist>(const TextboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Geometry::TexturedColoredVertex</name>
    <filename>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>TexturedColoredVertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a9981d5820df41bf186e25f16fa856d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TexturedColoredVertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>ab9fb6f1e0a5a679e666072a8ee0a4c41</anchor>
      <arglist>(const btVector3 vertex, const btVector4 color, const btVector2 texture, const f32 opacity, const f32 hidden)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a854961ee27a0b61a4bd70c773fda09c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TexturedColoredVertex &amp;</type>
      <name>operator=</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a50ea2a8262cb361b75f65a2a8b2d1006</anchor>
      <arglist>(const TexturedColoredVertex &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>vertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>ab49b5720f1cdbf1c63e62681db8f090f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a79e6bb9cb0daa0307eac09b828e4d993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector2</type>
      <name>texture</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a933ff52f4cd0a7768836e458f1a1218c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>opacity</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a8c7d91ac68083909b5116f7d130c39ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>hidden</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a506ec1fdd64c4b0530a33a53d075c3d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Geometry::TexturedNormaledColoredVertex</name>
    <filename>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>a8b7b19455b9e53f87e3b7afaa8ef4f97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>vertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>ae6a6ce74752e418ca7ae6fd3511c4515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>normal</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>af51b64c482f53d1b668dead055e37bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector2</type>
      <name>texture</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>a10525c570e5870adc1eff1e07a9cda0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>aed1b3ebbaf3b59beb3a04d40e977bb15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Thread</name>
    <filename>classnjli_1_1_thread.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a02def10c1bc81dbdbebffc6ccf4a491e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a95eeff9ff9e585d8aff7cb9fc7633693</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a2d002c89dac391a65321505e63366d9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a65c9777a551951a8251701c1059a0734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ac2fe85aabfdc007eecd967ebe5f21832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a644871703e3eaa5f500f8ee9d38e64b9</anchor>
      <arglist>(const std::string &amp;luaFunctionName, int _priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>add29f8799756f141a64f8b559445aa72</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>aa5a7bf5b86883cf8936e25118502d7d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a337a98642b6c61d7af26ecc942b7d12c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a14bd06414dc70facee0ec6840ab52c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a95eb64722ad2349240775774663987b3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>aad79375d2910b38a59e4a1b2e91d85fb</anchor>
      <arglist>(Thread **array, const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a486533462cfdcc2e7dce3e53af7e94d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a12a0e222e03c13bd20f8fad6addbf825</anchor>
      <arglist>(const ThreadBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a42a85484efe53176bcdfbe0f566e7b4f</anchor>
      <arglist>(const Thread &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a751c090a0afa997289dc78c7621c04d1</anchor>
      <arglist>(const Thread &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>abf3f9cd0d11a1759348b6ea421491be0</anchor>
      <arglist>(Thread *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a2d1ca58c2b5dacc63d57d187929e3ef1</anchor>
      <arglist>(Thread &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a902f7980e3959d28e793035c262fcb22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a317e23ba8f0ced14960249e4c54c6090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a0c051d119b52f3daec20229275c5f889</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ab2c08ff55a50001e1da7e03b2a91f59f</anchor>
      <arglist>(const Thread &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>afb0a6e67e331179054954ece61fc0b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a0aedb1abb61bcd6647abe362a242fdfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Thread &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>aa8f2155148e3a1b59610898dec424176</anchor>
      <arglist>(const Thread &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ad6f6f4cf48168e85787ad3c0d91f4d3d</anchor>
      <arglist>(JLIthreadcallback *_JLIthreadcallback, void *_userdata, int _priority)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>m_state</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a71f3ffb5bb782ea51fc7965a73d26228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_priority</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ad565b076bed5d905b4c8b55446106515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pthread_t</type>
      <name>m_thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a585b618ef3f37b59ed87b9a260b75316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_thread_hdl</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ac9a03c44d01aaa3103b179edf04ba488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>JLIthreadcallback *</type>
      <name>m_JLIthreadcallback</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ac180ff8a9b724385c44beafb47988a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>m_userdata</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a402f192eba9cdf6c041e050b9dd1a5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>wrap</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a4e3bf95b63db6ec0ddadd05ed67dde6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ThreadBuilder</name>
    <filename>classnjli_1_1_thread_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a96f4b7de7d0ff27e12d1a1daa17792c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a1cee7460592fa029cfa78c25e4dbf6da</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a682f5344a43db6547c46ae70cf8a0dd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>ab0e64f8c4aff080e5ebae0b49d7abe66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a89d02574e7d7c31157ddf80b5252d50c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a3bbac005e86932f5c84997197174c376</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>ab19ae2560cb758c4a89f344aebb76e72</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a51c575db6e693c1f7d8815099ab9a995</anchor>
      <arglist>(ThreadBuilder **array, const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a9cbf9da30a1e15ad77bdf7f706f7ec66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a6853e5c7741b19d72da6cd531d652cb8</anchor>
      <arglist>(const ThreadBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af3d9ccc8d4dac7a91e66dca0af421683</anchor>
      <arglist>(ThreadBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af3fcf8b6532ff74e3cca7195619879d4</anchor>
      <arglist>(ThreadBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a6aba44300c8c05bf9f8ab49d5902fb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a9227bab7e740e9493bc07a7fbfd705ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a887f0a70d7ad02680d18fa7d60300f8b</anchor>
      <arglist>(const ThreadBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af26adc22112326d0e02b78f5aa52b3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>afc546467fc78d4082bf94dcbfe29f749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ThreadBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>ac42866952153f3261969c88decb44367</anchor>
      <arglist>(const ThreadBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Timer</name>
    <filename>classnjli_1_1_timer.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ade61056a72278c046a2e62b7ac0ceeee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a6557e298455bd31c62f93b83fa9d67df</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ae5daa12bf38a2370e444a64e42e961b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a67d681ce97affb6b0e357e46bbfc9f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a24daf77b030cd6602cd9dc409c28b687</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tick</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a42a5df69255b8c27be94944e85f82ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a7b6b18b762f9037a0c45683f45961f5f</anchor>
      <arglist>(unsigned long int totalMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ab7f75a80b1152e200a086f09ce1817c4</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ad5179a68a00431049949b2eecccad057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ae8f6b8041497766a6e1c75ad4553a08d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMillisecondsLeft</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>aad84e59bdd39bbedef798ba99b41a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a9767427df2dec250e9a471fb4ce2910a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a4227537f96733c0011573cf0441e131e</anchor>
      <arglist>(Timer **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a3177c700256a5d3aaed07acafa8daacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a6473bc15f58f233df9acb6e74b322400</anchor>
      <arglist>(const TimerBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ae7222227dcda651a0c5c1174718c38ae</anchor>
      <arglist>(const Timer &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a48596d76d1b038a3064b57b0793d69ec</anchor>
      <arglist>(const Timer &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a1eec181ef8ab5a3131ed646eaa1839c4</anchor>
      <arglist>(Timer *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ab8d6b66ba61c8acd2c706faccd0313c8</anchor>
      <arglist>(Timer &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>af34fa692a4626b3be31757c5714ed01e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>afcd00947fc6d6c3a3a956ed57b4cd18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a3cc6b1b2968ae74823383e0cd84c5d78</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a9cfd12bef5e562a48bc5e5ca033c6a7c</anchor>
      <arglist>(const Timer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a982eac44a0cf0e6f3423de427d6035b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a7c164533d7a0cf91f4df5094349751fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Timer &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a5f26bfd9a36f08f50323eaaa8bc763f7</anchor>
      <arglist>(const Timer &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_Clock</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a4ffbc32862501214a88aaa1bb74612a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>m_CurrentTime</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a1ae3795457187736970ee2af90ae3a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsPaused</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a41a4f6b6f65df4beef065232a19b45d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TimerBuilder</name>
    <filename>classnjli_1_1_timer_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a57be632dab7674b4df58e6fd1705c87a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>afea3c5198b470396afbead31fc3fb0d2</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a542ca0413eb84c6f232d3b8d26e93f8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ab2499dd53e9dc21856514068f5d78eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ad27e4a291ff4048291526388912141d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a8d4e496c66f2c3236146e382e9cda35f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ace6b4a328ac972e6650e335cf035f2c7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ab310ad57c1f7a6e1b0a36feb5db2084c</anchor>
      <arglist>(TimerBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ac388f8e22d4446efb89c0ee9d13b952f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ae6bf6b37918dba536006c16a336bc798</anchor>
      <arglist>(const TimerBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ad5b4daa3238ca0e52af82e55c0108405</anchor>
      <arglist>(TimerBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a726a6eba924b2f3db018479dee1a106c</anchor>
      <arglist>(TimerBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a77595f14166f1f6845f60ed19e280e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a1e8b826dc7c0a51493c510658bb716f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ae5692fe6e38891da25c76bf325f1d58d</anchor>
      <arglist>(const TimerBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a19766dc135d3a03774036d99e4065818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a2051ac3477f69c4f07eacee102325424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TimerBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a8158096abdf95403d2ff0f6d954c3d52</anchor>
      <arglist>(const TimerBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::World</name>
    <filename>classnjli_1_1_world.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type>WorldFactory *</type>
      <name>getWorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a02d2a4cda6b5a38bc1db523aba97c52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldFactory *</type>
      <name>getWorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab344de6cddf96f4cfeaa358585ba4ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldResourceLoader *</type>
      <name>getWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac63f035e992870bd8b8a17f2273d8cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldResourceLoader *</type>
      <name>getWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a41f2109f9deb6d4eecf7d383e83c9464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldClock *</type>
      <name>getWorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a53d2776971466a8e3e8bd928058ac3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldClock *</type>
      <name>getWorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a671e2a935d966ebd09daf94390c7561c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldLuaVirtualMachine *</type>
      <name>getWorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>adfe48d79f8ed5f30aeb3675506d0f3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldLuaVirtualMachine *</type>
      <name>getWorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5b3c55392c4bd72b1fb7c4fd56e14fe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldSocket *</type>
      <name>getWorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad2e539aebc7349a690c930bc00ba9761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldSocket *</type>
      <name>getWorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aeb2171b3be01fd166f48249b47abb43a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldHUD *</type>
      <name>getWorldHUD</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a40adfae9fbe51bb80879166d3f91acbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldHUD *</type>
      <name>getWorldHUD</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2e440ab39d0a2d3c02bee623e84e712e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldInput *</type>
      <name>getWorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a712594bdfb7bd51cdbbb2de4d5393d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldInput *</type>
      <name>getWorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a716faf8b9b15ff7a584da9fb1685a5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldSound *</type>
      <name>getWorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4a5a98058882437d3eb23814b4cacdb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldSound *</type>
      <name>getWorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6636a00ece9288ae469f623139d9cb18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a32d0d1105d6a0f8b0411e7ebd2b60b60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4f0f084bc7d61f7b776d133d12044207</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldDebugDrawer *</type>
      <name>getDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aeb8eee919b8281fc8bbc5749e9a88303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldDebugDrawer *</type>
      <name>getDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0d5a1cb767b22e5af8bc17ec806fd8cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WorldSQLite *</type>
      <name>getWorldSQLite</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a29ea248bbec95dacc7b0f027b054e310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldSQLite *</type>
      <name>getWorldSQLite</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>afc0f1d8b0c7610d4d5391239c6d6f594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af2a39625b45e1de4d7363e817e80df58</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0aa11e8df6bf8f01f53bf2c5fe06ce3e</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abe96b82186df7d0f6f18e8970e8a0d3d</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac885088233b87f30b5be62cd7f6a6c08</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTouchCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aeec194d8bb29e91a3a51c8af7cae6452</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getTouchCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa5833c82b6b49b2fa4e130be6c9e428e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Camera *</type>
      <name>getTouchCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2be8a1f61c69a00fce5c62d00b20a00c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getViewPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a18b7d4f19e5c8fbb43e52f7fbc3f89f8</anchor>
      <arglist>(s32 *viewPort) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a248c324a0a97b0f286eaedf8f997688e</anchor>
      <arglist>(f32 timeStep, const u32 numSubSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a3e7f68f7467d421971e13dfcc5e2100e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae01dbf26d72e505fd67458d881dfa44c</anchor>
      <arglist>(s32 width, s32 height, s32 orientation)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getViewportDimensions</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0c840ed03a509073591181a0db3326be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAspectRatio</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9625ac484cd8e0bfd4533d1bd4308432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4860bc3b1638d3d4c0138f21b1078206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad9b777af5ff42c8010f2eb6581ca2837</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a39f4eb464e14da5f5bcb00f30e13c707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2c0fcfa71f2459fd3e4eec11d5146ab5</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aabf2a07e2fab640f5800357ad1fd7717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene *</type>
      <name>getScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a77de3f785d9c487c510f9061945a83ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scene *</type>
      <name>getScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0d14db95ba73974567bac4e98a49564c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a319c7afd4e53395eac71c2f2e0a5a5a2</anchor>
      <arglist>(Camera *camera, ShaderProgram *shader, Material *material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0451b10adb6965957a2b9de6ff72df90</anchor>
      <arglist>(Camera *camera, ShaderProgram *shader=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4894e4a53f692a503661a7836bf7713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5b67da9acd56cec605ad0dccc2b957cd</anchor>
      <arglist>(u8 n0, u8 n1, u8 n2, u8 n3, u16 port=2223)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac4b819fe8d34e6661d8f47138c318ff5</anchor>
      <arglist>(u16 port=2223)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSocketEnabled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a1d671225308c15c773354a73b67f4539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7d217f38577d72d349e2df64761dc4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSocketAddress</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7789d1910fb503a23af33bf15d9c2a02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>u16</type>
      <name>getSocketPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad85d66e2b189aa69a267dad3a96c6308</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundAlpha</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7eebf55a7920061d87e5dc03feb692da</anchor>
      <arglist>(const f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a011db5e9383aa6628892cd431c3657a5</anchor>
      <arglist>(const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab7bbd4dee42bec416fb2b64e9843ddf1</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af71f1daa7201bc43fec380f0d8e59886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7c0486ee9156abea442848faf85051cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5c9cc63ac7cb847e6d581a867614e47d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePauseAnimation</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a41b67b3dea3196afa6ff1b0d961b39d2</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a23a43bf65b215f40803dca83ff9f738c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePauseGame</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae8f238cc0f23ce6b8a05ad5a3da555f7</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPausedGame</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6c78f7f0112fea8a0c56b20835a8ae2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDebug</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0c6f38f48b3d7393d01f922a499a4fd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a3f112f579abdd04d6b59b1ff8941cc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a37e168a7d1dde0b24c184cf092b5f506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static World *</type>
      <name>getInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a916b92be91d763c4dda322458eca74be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab92bd6e910bf66b785200f5ca9b1012f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processMessage</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4118fbcbb82b872369b235bbc7cde67f</anchor>
      <arglist>(const std::string &amp;msg, const std::string delimeter=&quot;root&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSocketMessage</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a322956de68eb15d43bfb39083942edee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af01e96219aea73e611ba28179b3532ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9afc8afbde61ce7dde33ef37877c7453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abf9c0b24c17244baf76d760e81974cfe</anchor>
      <arglist>(const World &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2fe83dc2d899a91ef21ac20220e2ada4</anchor>
      <arglist>(const World &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldFactory *</type>
      <name>m_WorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae50678873f637941aa87ec45c33e9a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldResourceLoader *</type>
      <name>m_WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4ebb658eba80c17e930b96881d3a4e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldClock *</type>
      <name>m_WorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aacebc8d861e42a409cf1a875972da641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldLuaVirtualMachine *</type>
      <name>m_WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab3878c3df6c61327dfd7a08864e567a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldStateMachine *</type>
      <name>m_stateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a14412bd1ed14fca506732c0234db2b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_ViewPortDimensions</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0ac18bfa72f55b16c00703e1035a0af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scene *</type>
      <name>m_Scene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9c9279cbbb77ef973cb7d003198789b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldSocket *</type>
      <name>m_WorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0f6ea126555fa904aa246baba084c9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldHUD *</type>
      <name>m_WorldHUD</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a922a3ec1f96ac87f97faee6329f39686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldInput *</type>
      <name>m_WorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a87601ddb30dead7b8b0bd05bcc1f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldSound *</type>
      <name>m_WorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a004cd4a3a730b83733b3ff91bfaedce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldDebugDrawer *</type>
      <name>m_WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa92f105e6f53c7d8c30b8e453e1181c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldSQLite *</type>
      <name>m_WorldSQLite</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a08dcff070cf899e54e3aa9e4d1741c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac9ab0b237e486a28bd08adf913b3908c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_DebugDrawCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5ae1a42d02339871c60b45ecacc92753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_DebugDrawMaterial</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a180a3f557467c6bb6d88cf05b691a6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_TouchCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a67cab53aa644efd7c2e6f6d7df9c1745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_SocketEnabled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab701cb678bcb47262db407e4684608a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SocketAddress</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a51c1d3b5047c2e10c2850faf137efa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16</type>
      <name>m_SocketPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aafbdf669fc3dbc91c2b746b653ac4f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_BackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>acf0b94b1d7cba8d62158065b03de9012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9dc158249ba20ca7b1523cce0d8d309f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_AnimationPaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5a261c335c55b2fd0e678e815a6cc85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_GamePaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af387313aec7a62f3792e76d9610b70a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static World *</type>
      <name>s_Instance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a95bcdb1d140d15e4b022f72ea55286c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldClock</name>
    <filename>classnjli_1_1_world_clock.html</filename>
    <base>njli::AbstractClock</base>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>abc95e23fc5d9c28884e4775c2c61e232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>aa1e2db0b586cf4efa94fb46f349c715e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a02d250cbe1640a5c9ae3a71de7ed8ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>afa34673e3eee04c5482bce5d57e97fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>af8250a7e552a466941f5bdc405dfbac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>totalMilliseconds</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a182f24f3b21da04811d8f893683baeb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>timeStep</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>acb3793456c4e7d5116b583f9afca9c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>aefc634d6396d8a5a8b441ea5cb041ea8</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a7980edaac13345c4a1589542a699d53e</anchor>
      <arglist>(const WorldClock &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a4e158b42fd4835209dce260ffe490420</anchor>
      <arglist>(const WorldClock &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_TimeStep</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>aa727682fd2ee70cbfba4e78813e8f730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_TotalMilliseconds</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a2fccbd5a2216651b2614cf5b0d960046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldDebugDrawer</name>
    <filename>classnjli_1_1_world_debug_drawer.html</filename>
    <base>njli::Geometry</base>
    <class kind="struct">njli::WorldDebugDrawer::Line</class>
    <member kind="function">
      <type></type>
      <name>WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab55308c80918b35de864ddf762be9415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>adabe6c1aca9124710655c4826cd8ba9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>abd0c0c85d8cbc843b7e34dd3e57458e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>afb0bf0de73c92a41b5cc1d69c5cb856a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a4d833532351fd78967c053e66f10223a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a81b295c06c84d89dfab99560db2eb2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a4e07898a8039ae0208293161b40112c6</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawContactPoint</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7ce3d22842311634f28c259544d1cfd2</anchor>
      <arglist>(const btVector3 &amp;PointOnB, const btVector3 &amp;normalOnB, btScalar distance, int lifeTime, const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reportErrorWarning</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a3b4573cdd6e989d5eb682b8d3dd07ceb</anchor>
      <arglist>(const char *warningString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw3dText</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a02ee8524a5aaadd9ba1ca6eb099189fb</anchor>
      <arglist>(const btVector3 &amp;location, const char *textString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7651c295d2b8274550ff785ad5d1a9f1</anchor>
      <arglist>(int debugMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aa799900d51a549e47262f229f53e7609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ae1c8f0225a7b6aff2f6538f22a6ef8aa</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a812eb78b0b9635b7ef0aa2488d859059</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aa7accb0413c14183460304dadcbd203c</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>acf890519d9fcb0064ab2eda316ac6be2</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a770d1752fe97b560bf931a81111a8fd0</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ac7811b662fa729e4b5c0508e736a83ef</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a61eb96da979c4341e76c1c6edd049b68</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a49fef1f9de281617abe2efe0b05d809a</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ac994902d023b22c9e7c85aa07ca62f57</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a669aad8d50b4129b7b8063eaa2cedbb4</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aeb61102ee2a4cebeaedb0c06ca764a9b</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7dc1ef95d2f69950dba8c084f6b0ad54</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a23349848c577df07aa536940c8d63d4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a2f75bb440956bd601cbed359cd79d344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab15bbd29cdde5834c7532b90d1ec61ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a835cf504a5040b54788f3c896f6af10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ac57da5cab4d176189af1830d490b7e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ae1d68af96302e0286da1fa14b4249702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a961797cbc0699158f292d01d21782962</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>abfb1e640bb06c83e7a3c34803682ea41</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a4b7684d485ebfbaca779f336f2076bce</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a846f3504b58252d985402926e3202bc5</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a86b6234a730c1315e42cb61b672e0489</anchor>
      <arglist>(Camera *camera, s32 mode=0x0004)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a38a9a2121e48f4e0bcc6f05197dae7d8</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexPositions</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a9a85f966a7f65df9604fe5b4ebef4f83</anchor>
      <arglist>(const u64 index, const btVector3 &amp;from, const btVector3 &amp;to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexPositions</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a06758a36f05f94bac8fd1f1548956fc2</anchor>
      <arglist>(const u64 index, btVector3 &amp;from, btVector3 &amp;to) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a52f0c52aedf2d5d580be9d0066374a73</anchor>
      <arglist>(const u64 index, const btVector2 &amp;from, const btVector2 &amp;to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a8f3a4bfd609cffb02c6f4c36ffb3102d</anchor>
      <arglist>(const u64 index, btVector2 &amp;from, btVector2 &amp;to) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexColors</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aa4013e406e2cd7bf427878e57f3f0ed5</anchor>
      <arglist>(const u64 index, const btVector4 &amp;from, const btVector4 &amp;to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a510ce51ae3e72ef5702df487c220033b</anchor>
      <arglist>(const u64 index, btVector4 &amp;from, btVector4 &amp;to) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a2e7ed21284a19184bdde1ca96859ab1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a3b5edea1bb350d90b1b96f13297770fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab9f0bad296b1c020d33c6fcb758c39be</anchor>
      <arglist>(const WorldDebugDrawer &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldDebugDrawer &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a75eefccdb877dc3d0140b95a8997decd</anchor>
      <arglist>(const WorldDebugDrawer &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Line *</type>
      <name>m_Line</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a54c7781c412ad0064ecf271d97a40284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16 *</type>
      <name>m_Indexes</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aa2b95280664b92a53a42eb430ebfd4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_DebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a1531502ece9afabebbf772bcc25f2811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_Index</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>af495ac72316af3288360e6f6c1649784</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldFactory</name>
    <filename>classnjli_1_1_world_factory.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="typedef">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>ObjectList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4783e795a32a2feb5b07db0cbddb9371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>ObjectArrayList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3cf9fde8a3186340fdec7f81de21f0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; u64, s32 &gt;</type>
      <name>ObjectDuplicatePair</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af17ac95ff692d4a098f82e45d135281f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; u64, s32 &gt;</type>
      <name>ObjectDuplicateMap</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a15eec8c4710c8ec66e7cd06dd2327be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>has</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6de4857f488e1ff055b8160620102615</anchor>
      <arglist>(AbstractFactoryObject *object) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyAll</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a65cfc38185622e37a14ce386de2365da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>size</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a460ca9070090b1516aa60255e8200de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfReferences</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad0cad99d856f764d363c823b1d778990</anchor>
      <arglist>(AbstractFactoryObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>get</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a18d7403d35bf7adcfffa291c06620039</anchor>
      <arglist>(const u32) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAll</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae2f30af43e11fee85059589ce05bdac5</anchor>
      <arglist>(std::vector&lt; AbstractFactoryObject * &gt; &amp;objects) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>index</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ada9249d9e9a89d724e5eb47e991014a4</anchor>
      <arglist>(AbstractFactoryObject *object) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3361e71f5627dc003a8655de1358f8a7</anchor>
      <arglist>(btSerializer *serializer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac66422fbed2f23d7c7054b0591a44373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3b8c1fe1c043d061a0a24970b6d54ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af51d9c815e480e6fba0715b993c161b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3d793e4bc22b7a72b733d62c6241c62f</anchor>
      <arglist>(u32)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6c379949bd79510d934515f9a0aa4008</anchor>
      <arglist>(const u32 type, const u32 size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2998139e94a357430e4d3a26606d7efb</anchor>
      <arglist>(const u32 type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0d1d4899df154be4d988821cd2efec48</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad45e7eac9f28b683a29fc3e397549d84</anchor>
      <arglist>(const AbstractFactoryObject &amp;, bool=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ace215cda602d0bc17315d755036fb497</anchor>
      <arglist>(AbstractFactoryObject *, bool array=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a40a00fcf24618fa8e4c037efe19119d9</anchor>
      <arglist>(AbstractFactoryObject **, const u32, bool isRenderObject=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a726158c2c7cfe4b1f1311e2c15c37f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldFactory</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab3de541502ca2ed1c281119e43d42863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a71669f6be7839a3634d9037e15ba5e31</anchor>
      <arglist>(const u32 &amp;size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject **</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0bd93d7b508048a0e6f38d6741d8f5e3</anchor>
      <arglist>(const u32 &amp;idx, u32 size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a255dc9b91f115314ce55c7589e0c77c0</anchor>
      <arglist>(const njli::AbstractBuilder &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a714e1e21eb48b2bedee8fc42d6924326</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>create_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a96f0ae6c8b847996217dd0737973b208</anchor>
      <arglist>(const u32)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>create_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8bd8bc397334214fd823552ba99631b7</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>clone_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac13a667d3fe7bd186096b985dfca1ba8</anchor>
      <arglist>(const AbstractFactoryObject &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfObjects_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a16e5466e3041d3abd9715b66742e9374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2e3f3c897e12187b0413ed58b85fba9b</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adda8260e8e970db55234fd12f13ce093</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfArrayObjects_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a557648faef4c6347863c1c447182982a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeArrayObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afceced94230870133427e27148963c58</anchor>
      <arglist>(AbstractFactoryObject **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addArrayObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab9fb791c31f5fda79de73949e32fd65a</anchor>
      <arglist>(AbstractFactoryObject **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfReferences_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3adffe81b38fb2a57d28405f5b299211</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeReference_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a739d97d5e0c332971564768bfa5e12c5</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addReference_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aadfd67f947c9ff8159f20fb3b6a893b0</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectGarbage</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8a119571be5748f45d525cfed1b66b6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s64</type>
      <name>collectGarbageSize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa3090848f6fa06c4e71fc2a155fd558a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectGarbage_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0f79c06f6add6fb56e77b4ee93d92574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s64</type>
      <name>collectGarbage_GPUSize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5d1da7f6e56ed127d22e49baa2aa76a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectList</type>
      <name>m_ObjectList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad8c7adb588d481784128249f971d0bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectArrayList</type>
      <name>m_ObjectArrayList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0502a6e72721c46c66ce443e5d051085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectDuplicateMap</type>
      <name>m_ObjectDuplicateMap</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1adb9a8f15198258dd3bbe3bedd2de2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>m_ObjectsToDelete</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9f786a2b7ca464a3a1a391283d8e4b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>m_ArrayObjectsToDelete</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8ed01a184e70e5f80d442af0dbe24c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>m_ObjectsToDelete_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5cb1fb329965dbb78c19e16092b9ed52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>m_ArrayObjectsToDelete_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6c68af6211ab6c9daac880ee67d6eb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a59f5fcb165066624f68fb5417aa3586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2df56bce875115e30eee589571642e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6a5fbb3d9afc8ecdda801eb0baa72618</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a19c07f330269ab1d6555234c92605d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8c026aede787124ffee5dfcadef572ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad8bd9afbbd7af19d996da80e9d25890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7752fee1bd2b982e8f23fedc42a80a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0aab48d603790a3ca2c4d7dd7ab9e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a218892def884e56259183e1a5999c6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5ae5b1616a53c84525df7446cb4014e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>acb9ae88f448a010684fe7bda1f015d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aada10170113bd62fd216e56e169c30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2c7af76413a94496eea595a1640f050f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8faee6be39d1c71eee071a7874631653</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a662086a007f158ad6a1a9cd4968b6f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aff628788b98fce5e2ba538f3d1548af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ace95ee82bd9b0868dca558d191db23fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad564b94b59dc295de3dfc4415d95cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa1571d8b2e1c2d040a767ed3b23f5e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5d6b29a75202aeeaef335faca9eb55e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6e4a3b87650c7e051e932fc81e2b2ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1c7fea89e4146ea859f344c20bf17ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afbd2803f566fe8f3d08650c15f61b2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa8844d2831cd99e31cc82dd81b171f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abcd9b8ad9755b1de56dd38ef4a89037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a27862a9fe512b352f98ec1c054680edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8cd2216c776d440c957f9961ce19b1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a30b1a5fe07be473df6700c36c640ed17</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a719da6b5d45b216585e173af095bb963</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Lua</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a92273d66fac956d168c3dcbd891ae6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LuaBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6ff54f81b70b57898d3cb747e0ad258d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab38588cd27b640aa96c8788441852561</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aba999bd8688594614e940d994d71b864</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3698ada19fa4946ec1b589a2b23e695f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adfdd1242f00ef4da9a9a01d996fc292c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab5f35f6c48aabf3adba3148d9e5017b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a37124479a38545f4b2bec91d7f6acda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa0337fe62ed48d71c7fb641e4588d796</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4663c75ff33f5066276a2beef9a10b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a75e9d5e413912c976f8b366674be6676</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a36d224b713bd19fb758d964b8111182a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac3d9efde8beb285372a9042d055c738a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8aab1bff165cf88cf8e13fb00b2b5f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af4691e69bff78222d4abfff307c0bcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aedf5835c05d4fe2aa76acfe736c1b9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aae9fd5c0211139108faab6d7ccf95c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa59c958a66870f0d251ec0dd477d2eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aed3f799c6061225153a01b5eb7141786</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aaf6a85f39db8c1e31e6aa37c65e1a674</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae8bb8accca080bd60527bc8d691149a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6b751cf38f887ce08753757be0cccc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a80d4d8b5e97b1f9310737e5230e0ca67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2740ddc13d801da4128c33e9a5b9b492</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aca6d04b7c0d4627405b54ec4ec7af313</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a933373e183ecd046f268e1b69038a02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af82a8eac76d39e47206a7eb1917e53f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa61adc7648e4c29d071f44e17614316c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8216afecc63791c1d19b902232c886b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a09c097cb47fc1f3568d827cf0536b6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2fb3e6c99ae1c2204a36f0e83adab75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a51efff0009aa2c9c621486a310037129</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a726223aef7972f289c4a01ccfd23d5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa594c185e502e1b87c998e01dd17a50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a32f571aedc28d4347ba0d3a2a9acc7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae9fdb8cf9943dbfd76910301cb0ac1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9300c5f6d79ededa841d102672c1abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aedad28d3885a187a21a94756dd00263c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afc061546bfa689988558e8bb36979312</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa2e59a26c135fb52f13d19f1f09b6880</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1df6e91827326ced519104ee8edcafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a08be67d95b7957ebd88a3944ff9a7afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a47391e36c657b268fe97217194bf713e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1e046c5bc3ad2999646274d22417d017</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a18107e28deb5ee79a2fd4d512772d7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6d8dd0dab37f03d905eb3066b816ae30</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a71dcdde15201e2df59abaa1bde57e73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a894f78151e6b10ffb19539384b946e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad33a0bea05e9549fd9950ac4a1acbfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a12f965e3d87c71370f0288e42f12a4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abf5b0c4f21459fff5c6ed5cb9fcd96c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4dc6a23ee90da790604a65d9e0e504d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a14ad61e7f0d93976b4a05ddf2bcccf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af5f61f67c01c8aa161044e2f7669b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0d9797805600b9e2c132b57950ea7926</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af4b40469a84199477879e33321c6f02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a04aa4ba3952aae7bb7bd4c31ad24a705</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab5ea5e632e260cb2f092d2423645bc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a89c71bac3ec153ca700e1cd69900b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abcb05c23b1eab15866956ae243491395</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af744eb288828f7c98d57adeb8603027a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ace13a6b81a7cce08dd6f9d0c1c00af04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab8cb8ab88a21ac3720ea996ba7e6aa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0554623d5c61159d79d55a1d5a0f3c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4d92e8ea8141a3032ed9fcc2a7451218</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aef20119bde6aff11ffd23f3ea2131b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a95d0213badfc8214cbfd42122b313cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7d2180162b18e72eaec14e87269710da</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a389430808fadd843bcbe0e688a805990</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a601e2cab15ade2e7f8e72cd6b68c3b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abf1112100157e104cac60cd5134cb52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a50914f77c7cf4fb97616c898c5291f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae2f1c8c3b6e1df88a207c6189f601fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a426536e3f63ba8c46a268e2fc01dc6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a83269c8e3483e24989223393adfe4cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9a77a7ee21b233ff37780fdba5ff2655</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9cfe516a7abece038bff141a1bbe49f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0c05537ccc765fccea6bc44fdd1c27fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a043f6c225e4e72e1152c60f8c442fdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a750965b3f8531f8610b0ed8fe05c00e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a50de43af5bed41f30c071d8cce0e81bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4bf1b31126e9d45534b120a6e4af0c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adbc148eaddd341d7ae4d07c9e9e33bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a96c37036c1767736e6aa216fd68b62a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3d8dab2e937d753e7ddb14442e9acdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a737b3b9af90a96d9da0b4f27196f97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abe950a299dceab3248d0732737858b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6da91779d499b1ad3035fe196aecd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab51c8e735775c191a627d07f8ca5890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldHUD</name>
    <filename>classnjli_1_1_world_h_u_d.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aaa03dd572c9d1a44922a1c200d4192fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a08260929135e73020a3ac9299980e304</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const s8 *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac8fa72d0b152fd01cf67d5712cda5b84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5069b8e7fb1711adb3521c0d5999bebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa5a553a0364b43ac4d5c6a76abbe695f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a642375ec9d4204c4e30ecd1c514db7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a9eb79412a9e58ed635026ea42ce3b56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a53e9e3898ebb81ba221c710380b554c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokeColor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aec50b89dcd5f2d5d43248e67419e7665</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokePaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa348c8907633ae02aff28a856f75cb45</anchor>
      <arglist>(JLIPaint paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acb11035d988c1f295e3923682a6bbced</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aff3e8d583cecd7baaea183fe160b9853</anchor>
      <arglist>(JLIPaint paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>miterLimit</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7d25dd7849d6f12f614d1382fd00f0c0</anchor>
      <arglist>(f32 limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokeWidth</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af219f2c63d6a6bdd85f6871e113be598</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineCap</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abe7199ca318efbb7fdd54b914ab4e224</anchor>
      <arglist>(njliHUDLineCap cap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineJoin</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad146f303482641516e66066115bcb19e</anchor>
      <arglist>(njliHUDLineCap join)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalAlpha</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2b1d005bd81d9e0b42a404c48ceb7cf9</anchor>
      <arglist>(f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTransform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7f21364c34dbacfbf206e440c4774dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a9e1891dc9cb350ab8c1a7a8e265694b8</anchor>
      <arglist>(const btMatrix3x3 &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8c859db03b1586bd440c30bade8a3bdd</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa54f2be918db534977909d80a5801158</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab0a05d76b5251719b228fed812d69ff7</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac354c68e141696172bd0b1fc07d89f28</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7db32bf294c4d55958d43188457bd866</anchor>
      <arglist>(const btVector2 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aaadec4b47522d9b7390d3e84ee8a5356</anchor>
      <arglist>(btMatrix3x3 &amp;xform)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a06961a0e927da93914ff9f3cb069e778</anchor>
      <arglist>(const s8 *filename, njliHUDImageFlags imageFlags)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createImageRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aab3c3c6a761de7f285b7a99f8a73dc04</anchor>
      <arglist>(const Image &amp;image, njliHUDImageFlags imageFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4e1dcdcdbaf62f4b9fd0412cf5ee23da</anchor>
      <arglist>(s32 imageHandle, const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageSize</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0ee16fbf9fd6ae61ca0a1a220d1eaa90</anchor>
      <arglist>(s32 imageHandle, s32 &amp;w, s32 &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ade08fde0f318b4ffad0ce0345cd34396</anchor>
      <arglist>(s32 imageHandle)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>linearGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1fca57ce05261de86c129c921b9c5223</anchor>
      <arglist>(const btVector2 &amp;startPos, const btVector2 &amp;endPos, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>boxGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a28cd9f803c36c1ed117941319f6de586</anchor>
      <arglist>(const Rect &amp;rect, f32 radius, f32 feather, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>radialGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ade8b232c106dea30004091edd418ab20</anchor>
      <arglist>(const btVector2 &amp;center, f32 innerRadius, f32 outerRadius, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>imagePattern</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a339bb4c0ca3e2a5fff0f7696644abaed</anchor>
      <arglist>(const btVector2 &amp;startPos, const btVector2 &amp;endPos, f32 angle, s32 imageHandle, f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a40f16dae5cfeec69081899c6e9e251f2</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a36707f986c16c94edb030110e9958d1f</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1510b2540e17040abc985f2b3485ea71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPath</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab5d63556e0d0e28e4458bb146e751b64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae93e5164ed89c2404f759efba1282383</anchor>
      <arglist>(const btVector2 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aba89dd5d668b6f7de9b943d13411961f</anchor>
      <arglist>(const btVector2 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a579fd8f82fda136d3bb2f916bbf767b3</anchor>
      <arglist>(const btVector2 &amp;controlPoint1, const btVector2 &amp;controlPoint2, const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8cefd17fd4ee43b393810cf5b6f92c3a</anchor>
      <arglist>(const btVector2 &amp;controlPoint, const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a71d2a7e98e92f02d75f80947ca93157f</anchor>
      <arglist>(const btVector2 &amp;pos1, const btVector2 &amp;pos2, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closePath</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a83640be06ba258db7a44297d561364e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathWinding</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab8e986fe57556113de8902cd91e58725</anchor>
      <arglist>(njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a09909494112f37d1ae3b3729e505769d</anchor>
      <arglist>(const btVector2 &amp;center, f32 radius, f32 fromAngle, f32 toAngle, njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4183aaaf55fabccdf9d1f9b7614f02a4</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roundedRect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a30d1f93d6d2fe68ccf1bb1ce56e279c8</anchor>
      <arglist>(const Rect &amp;rect, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ellipse</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af1b141d1009fc9a9c8de94c4709edf65</anchor>
      <arglist>(const btVector2 &amp;center, const btVector2 &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circle</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a3170986b281a79fc800322102ab17f51</anchor>
      <arglist>(const btVector2 &amp;center, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a14544b181d0c45c47843a562ed4b029a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stroke</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae4774f72db77fef1dbf4c6b7adc2e357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createFont</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a06b9f9f91b0a3429f728a9064dd5e2c7</anchor>
      <arglist>(const s8 *name, const s8 *filename)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>findFont</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5e016ba34d85a2bbdba535129d4fdc6a</anchor>
      <arglist>(const s8 *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontSize</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac51e71d915cdf53232247d7786fa883c</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontBlur</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac2e332b4befffbab6b44e2ea61ad0911</anchor>
      <arglist>(f32 blur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textLetterSpacing</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae618850d43566bb0e3d28e18a1b36037</anchor>
      <arglist>(f32 spacing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textLineHeight</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4aefcaeea459b42c7727d301db80ed4c</anchor>
      <arglist>(f32 lineHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textAlign</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e6124ce2225018131836b7eafd1d571</anchor>
      <arglist>(njliHUDAlign align)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontFaceId</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa6e14180c1643291e14b129eee1a6be3</anchor>
      <arglist>(s32 fontHandle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontFace</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e000d08f0aacae74231570760f0c7d9</anchor>
      <arglist>(const s8 *font)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>text</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0bab9dfc4848ec90b66fb3757c51f4b2</anchor>
      <arglist>(const btVector2 &amp;position, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBox</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a586a73295c4bf59ffe62642155b96a18</anchor>
      <arglist>(const btVector2 &amp;position, f32 breakRowWidth, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>textBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1e5d4bd2375c309bd3d0450ae2cd6781</anchor>
      <arglist>(const btVector2 &amp;position, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBoxBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5f0b515da70d4597cb5ee69b9ccd4783</anchor>
      <arglist>(const btVector2 &amp;position, f32 breakRowWidth, Rect &amp;bounds, const s8 *string, const s8 *end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textGlyphPositions</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2c3d54d2d74dcf511031a7dfbb0e05ec</anchor>
      <arglist>(const btVector2 &amp;position, const s8 *string, const s8 *end, btAlignedObjectArray&lt; JLIGlyphPosition &gt; &amp;glyphPositions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textMetrics</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1c2fe58e99ad361f25745a1a7abfb1aa</anchor>
      <arglist>(btMatrix3x3 &amp;ascender, btMatrix3x3 &amp;descender, btMatrix3x3 &amp;lineh)</arglist>
    </member>
    <member kind="function">
      <type>btAlignedObjectArray&lt; JLITextRow &gt;</type>
      <name>textBreakLines</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e8e57f428a868263ac81d4d9eba921d</anchor>
      <arglist>(const s8 *string, const s8 *end, f32 breakRowWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abf39159728f0defe021310b5ee195388</anchor>
      <arglist>(f32 scaleX, f32 skewY, f32 skewX, f32 scaleY, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abd989561682767b35d557221124e4883</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a14be92646f0a40e08b738dd0a3492329</anchor>
      <arglist>(f32 scalex, f32 scaley)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>linearGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aefa0dd5d84a7571fd9228e2d2b25eb46</anchor>
      <arglist>(f32 startx, f32 starty, f32 endx, f32 endy, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>boxGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7263a3a9af4c3db96bdd1d8755bb6d88</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height, f32 radius, f32 feather, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>radialGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a912072b46da8889ca18c84e05c8ac7e4</anchor>
      <arglist>(f32 centerx, f32 centery, f32 innerRadius, f32 outerRadius, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>imagePattern</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8ce1541f60418d89a0cde6918de0a304</anchor>
      <arglist>(f32 startx, f32 starty, f32 endx, f32 endy, f32 angle, s32 imageHandle, f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a200ca0f916219703e5c3e25c3c0a6533</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acc63b50dcb447279fd04118edd742aba</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae6e492a62f645f4cf375849b97a0c4b8</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a95cafc21277f080c5a19d56ec051010e</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>add9f4191577fa2242f116aabb111ba03</anchor>
      <arglist>(f32 controlPoint1x, f32 controlPoint1y, f32 controlPoint2x, f32 controlPoint2y, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a02ccb67d2aa481caeeb396ced6f9a8a1</anchor>
      <arglist>(f32 controlPointx, f32 controlPointy, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a898dd5908a3cf3ff0927f816e92bffa5</anchor>
      <arglist>(f32 pos1x, f32 pos1y, f32 pos2x, f32 pos2y, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2cb355cc0abb9f9906f415ee8a06ddc8</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radius, f32 fromAngle, f32 toAngle, njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ace6d5af98edbb9a27175baaf03b6581a</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roundedRect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a93df3aa8aa9eac57d15b721b8763a31b</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ellipse</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab9865a7ca65ce8e64f79983e6558fac3</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radiusx, f32 radiusy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circle</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acd63e699e6d794d6a404c5e84fa0972d</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>text</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4b7cf2022ede55dd9b9b043f6a3f20f2</anchor>
      <arglist>(f32 x, f32 y, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBox</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af0189937dc328cde8b98fe3322b4c4b1</anchor>
      <arglist>(f32 x, f32 y, f32 breakRowWidth, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>textBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad67518f90c4ae95749b99ed3c050f1d8</anchor>
      <arglist>(f32 x, f32 y, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBoxBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5d656a3f17364a405cacb8e348d7789a</anchor>
      <arglist>(f32 x, f32 y, f32 breakRowWidth, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textGlyphPositions</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4d1a7a9ba1a48de79a88272be7b842ec</anchor>
      <arglist>(f32 x, f32 y, const s8 *string, const s8 *end, btAlignedObjectArray&lt; JLIGlyphPosition &gt; &amp;glyphPositions)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acc6ee920231d8816cb730dfab94e8a09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s8 *</type>
      <name>cpToUTF8</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a22c6028db63fc60eb26aa124ed4c1ba5</anchor>
      <arglist>(s32 cp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgb</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af8b0b4208789867fdbbf79702e3ea646</anchor>
      <arglist>(u8 r, u8 g, u8 b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgbf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4baf5260d2b75e3242feca1897cb22e7</anchor>
      <arglist>(f32 r, f32 g, f32 b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgba</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0825c4ed0fb0884887c0c6f3f867ef4b</anchor>
      <arglist>(u8 r, u8 g, u8 b, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgbaf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a08960bf169c88bc311cdd986df9460ea</anchor>
      <arglist>(f32 r, f32 g, f32 b, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>lerpRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a51c6cd746846eccc0d9fd10ccc8e1cf6</anchor>
      <arglist>(const btVector4 &amp;c0, const btVector4 &amp;c1, f32 u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>transRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a485a4c13aeb97bced3035ebbe1dc4b4d</anchor>
      <arglist>(const btVector4 &amp;c0, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>transRGBAf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7265b58317f140c7004cfdf8fd3515e5</anchor>
      <arglist>(const btVector4 &amp;c0, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>hsl</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa5373f4f14898b0468285d300a26a85e</anchor>
      <arglist>(f32 h, f32 s, f32 l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>hsla</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a82093ddb2f8169e9a2e93164dbf756b6</anchor>
      <arglist>(f32 h, f32 s, f32 l, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformIdentity</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a17822e1112d4330b0a601e05c7fca44b</anchor>
      <arglist>(btMatrix3x3 &amp;floats)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformTranslate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0c224859cf3d2b43b504f61cebcd69c4</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btVector2 &amp;translatePos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformScale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa9e38b76a8f23b0b039aa54df1db8066</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btVector2 &amp;scale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformRotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0ab0e1255eedff4b9788f415c6242735</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a77433d56a87619797889e1e226fa9550</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af74067b7fb1d503683096b4ee03606be</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformMultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae437fe479930ace7164c9a5b9c0b1ddd</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btMatrix3x3 &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPremultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a64c6317ab91fdfc868a361756af72ecb</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btMatrix3x3 &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPoint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a9d25eb594584db2b94f8aee17be33337</anchor>
      <arglist>(btMatrix3x3 &amp;dstx, btMatrix3x3 &amp;dsty, btMatrix3x3 &amp;xform, const btVector2 &amp;sourcePos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformIdentity</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa1bcf603f965a7ca3c2ee6a6636e2774</anchor>
      <arglist>(f32 *floats)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformTranslate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0d4886c1f8a915e360f1aa2099412b25</anchor>
      <arglist>(f32 *floats, f32 tx, f32 ty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformScale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aea8eafca6aa88341fcc1ec047705910e</anchor>
      <arglist>(f32 *floats, f32 sx, f32 sy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformRotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac5a7c6254d51dcd3649b8dccea012eac</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae9b5df6668317804256d3fef178b7c88</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a432ca7f00a9beeffe52724dcd28c0afd</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformMultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a072ade5ce7868515255091db164e0551</anchor>
      <arglist>(f32 *floats, f32 *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPremultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4aa291ec24e2afe6c291180b497cb574</anchor>
      <arglist>(f32 *floats, f32 *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPoint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5f09a3d3ed7f4c578006dd3a4cf1fcea</anchor>
      <arglist>(f32 *dstx, f32 *dsty, f32 *xform, f32 srcx, f32 srcy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>degToRad</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2a7b1b23b403b96e76b370b91cc5aed1</anchor>
      <arglist>(f32 deg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>radToDeg</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a954d9952b01f0b09b2c2af8e85063b82</anchor>
      <arglist>(f32 rad)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderFBOs</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a93c0a1a56854f78c78fc1f3bfb5d91e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a71d1e7e224fd723fae0bb65cbdd235c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NVGcontext *</type>
      <name>getContext</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad0adcae2a2a50bd3b44e9a8913fb9742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addFBO</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af9a191868f90ef56bcfabf2b9367264c</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFBO</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4baeb3d5641693f60c61f5b982cb159b</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>btVector4ToNVGcolor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aec76fe94072600aa7cab39af5f93b7f0</anchor>
      <arglist>(NVGcolor &amp;color, const btVector4 &amp;vColor)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGcolorTobtVector4</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad16f84825e50b115305c69d2351b9ddc</anchor>
      <arglist>(btVector4 &amp;color, const NVGcolor &amp;vColor)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLIPaintToNVGPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a21f12e31d70e41afecaed2ea99210bb5</anchor>
      <arglist>(NVGpaint &amp;nvgPaint, const JLIPaint &amp;njliPaint)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGPaintToJLIPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a38095f1a99cc661b4975e7280f224860</anchor>
      <arglist>(JLIPaint &amp;njliPaint, const NVGpaint &amp;nvgPaint)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLIGlyphPositionToNVGglyphPosition</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab0cf014cd37556e0e0c1d9dbc61b5b02</anchor>
      <arglist>(NVGglyphPosition &amp;nvgGlyphPos, const JLIGlyphPosition &amp;njliGlyphPos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGglyphPositionToJLIGlyphPosition</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4cced553efc97436106b333c55632cd7</anchor>
      <arglist>(JLIGlyphPosition &amp;njliGlyphPos, const NVGglyphPosition &amp;nvgGlyphPos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLITextRowToNVGtextRow</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a82f3294ca8ee5366d0102998adc845d3</anchor>
      <arglist>(NVGtextRow &amp;nvgTextRow, const JLITextRow &amp;njliTextRow)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGtextRowToJLITextRow</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a3d9ac6e26058d7bb99f13b95ff594d3f</anchor>
      <arglist>(JLITextRow &amp;njliTextRow, const NVGtextRow &amp;nvgTextRow)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGaffineTobtMatrix3x3</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af5fe3cbd33306a79e3a2b7c03fbc7405</anchor>
      <arglist>(btMatrix3x3 &amp;mtx, f32 *floats)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>btMatrix3x3ToNVGaffine</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab95646a05222c31f8b844447985a14e1</anchor>
      <arglist>(f32 *floats, const btMatrix3x3 &amp;mtx)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5d7db06d3f35981665798e3dd5f1ddb6</anchor>
      <arglist>(const WorldHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a231ab1b0c3b57e374b906f55d4b5f5b7</anchor>
      <arglist>(const WorldHUD &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NVGcontext *</type>
      <name>m_NVGContext</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a08dbc205077c567128a8bc9c3d56fc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_matrixBuffer</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a35f13368cab9b866ea08ad9f0dc6cc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; s32 &gt;</type>
      <name>m_images</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5c267043670cc05af3e1b391af18cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFrameBufferObject * &gt;</type>
      <name>m_FBOvector</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae18bda94c395047c80f499acaf6dd61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a6ea154c63235e96fbd240cdd9c49dbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a19c07f330269ab1d6555234c92605d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0aab48d603790a3ca2c4d7dd7ab9e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aff628788b98fce5e2ba538f3d1548af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa8844d2831cd99e31cc82dd81b171f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a601e2cab15ade2e7f8e72cd6b68c3b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a043f6c225e4e72e1152c60f8c442fdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a74840235021f469fe6da7ae7d24c95ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldInput</name>
    <filename>classnjli_1_1_world_input.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a89828d16ae9ac53f0eefb12449aafe52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a742332c1db757e346d72bc5f71b9f1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a2d95441631fa9f9e5c1de66b9aafeeb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a316eb5db243b4633a9b4a999ce8a030f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a9c902dea89140d2d61e162477bef07e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DeviceTouch *</type>
      <name>getTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ac66dd313cdcb69be50ddc49a7653c873</anchor>
      <arglist>(const s32 index)</arglist>
    </member>
    <member kind="function">
      <type>const DeviceTouch *</type>
      <name>getTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a321b3c44e6aa80874bb341e11e05b911</anchor>
      <arglist>(const s32 index) const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ae83debebab208c3cf75e4a2c2f7ab6c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>aa7b53a83cf98095aa0fe67e6a8f4d91d</anchor>
      <arglist>(const void *touch, const int index, const int num_touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a8a9a3c6a6cbf5c5703dc697d7dc1caf1</anchor>
      <arglist>(const int x, const int y, const int index, const int num_touches, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearNodeTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ae4e8eb0430e1bcf3bb5855146ae7410b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a0c02a9d986d3f3be776934117f2a50c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a7966d477206916868ef60d20afbcb21a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a160e0283f28868727ac5cc924441f527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a730d0df9238d42780d15eb716f24543f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a453864260fa99d407de3453e3bea109b</anchor>
      <arglist>(const s32 orientation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPortraitOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>af6d60492be3051594630c8200b37d7cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLandscapeOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ae672eea4c93a9b69003cc6ab81c25a8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a758ebf2a314d52a4bd7430303449d5de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showKeyboard</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a903fab91e0b94cb0be9444b3095d0b28</anchor>
      <arglist>(const char *currentText)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>aef121326754d6da32e10ecb5f7b8ef38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a246e576e4b9214d96493fbb7ffd51455</anchor>
      <arglist>(const WorldInput &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldInput &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a2264836ad331a16cd3a729f3979020fb</anchor>
      <arglist>(const WorldInput &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DeviceTouch **</type>
      <name>m_AllTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a42a1a696f52eb48844918cb91ffddfbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DeviceTouch **</type>
      <name>m_CurrentTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>af989a57d688d1271003fdd7472e2e2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_NumTouches</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a219b4414666284ce6dd98c7b1c63ea2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ae4e2eea7b14113c53cab85a63d44b985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldLuaVirtualMachine</name>
    <filename>classnjli_1_1_world_lua_virtual_machine.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aa8699ef660c3378db4bfbcc1914fc95a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aaf6bf7f091189d8c5969a357e5dab58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a543f318979bc05c6d9aeed3cc3f6d7f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aa71583adc119ad79848d2de3bfd1a49b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a7c785589b8c8f4c77f14848375a8e528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStack</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a64ad43f3f5c5ce88f83a399116be7851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>adc172de3b59b78472ff5867f5e16041c</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadString</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ab7d712b7c1b78da1f32e70791adc1ac2</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doFile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a859edc6a83d71fec3722ad76313eef43</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doString</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a56e072d74d6c9810533e395ae44ec49c</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a267ae71c6d3064e2baf0ac9e48e4ec24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5d04b69a8ca98a5e77ec1a03abd6ece1</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af9efb7780458024e60c886b5c30cc594</anchor>
      <arglist>(const char *code, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a1e20adef1ec977bc52e3343320ac7ff6</anchor>
      <arglist>(const char *code, s32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a8e4cfb46cfc326f39c95f87abf1ed570</anchor>
      <arglist>(const char *code, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a063c843476fae634bfa3b37341bf6bc7</anchor>
      <arglist>(const char *code, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2bf26f519cdd10cded878aeb2bdf1f98</anchor>
      <arglist>(const char *code, Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a6fa89f17cc97432e1bbbad2a94d93eb8</anchor>
      <arglist>(const char *code, Scene *scene, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5f84df3f3b820cf49bd362285adb5d7c</anchor>
      <arglist>(const char *code, Scene *scene, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aeaf2624365c5c37dd5d90d7c9ab6d6a4</anchor>
      <arglist>(const char *code, Node *node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af224a80d62b53a01e22e64a9813af3c9</anchor>
      <arglist>(const char *code, Node *node, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a1ffc2b1e696b6c1a2d5955eaeca22d48</anchor>
      <arglist>(const char *code, Node *node, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a6a204d9d842254c7cce5bf4c336fe2fe</anchor>
      <arglist>(const char *code, DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a21227c3230633061ac2cc99a05c41e4e</anchor>
      <arglist>(const char *code, Node *node, Node *node2, const btManifoldPoint &amp;mani)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2b0155a6ae5dc65eea24fef0bac79821</anchor>
      <arglist>(const char *code, Node *node, Node *node2, const btDispatcherInfo &amp;mani)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a0c9cac6960558de8c59c03f331c00afc</anchor>
      <arglist>(const char *code, const PhysicsRayContact &amp;rayContact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a47416c76b82401891a6e9c8febf9d1cf</anchor>
      <arglist>(const char *code, const btAlignedObjectArray&lt; njli::PhysicsRayContact * &gt; &amp;rayContacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a02bcf617fdf1b7958846e585e870506e</anchor>
      <arglist>(const char *code, Action *action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a4fce503e637d2425c53e9e6afd486e02</anchor>
      <arglist>(const char *code, Action *action, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxNumber</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a387dddb69f304d2d1cbc8e2d29fe3eaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinNumber</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>accb6fea36a9a32cca7e590c329079119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>adafe224987a62685972c4ee97a3e9ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af42ee292e12ae835a77eee13a1fb4c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initLua</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a76b4bb35fb03f0deb5014d9cc11783d6</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unInit</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af32f979aa34ff932fc1a358e3fcd44c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doREPL</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ac13bdb02d1744b950413f502cd650d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getError</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a3656304f995527d8888ad13d98770108</anchor>
      <arglist>(const char *code, int error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>lua_State *</type>
      <name>m_lua_State</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>abe1c0bd72cd6dc032a3c52886bf3f920</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ae1cb82578d5b11df857c605468bb539f</anchor>
      <arglist>(const WorldLuaVirtualMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldLuaVirtualMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aad84aef1b87d168be779005926e412d7</anchor>
      <arglist>(const WorldLuaVirtualMachine &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldResourceLoader</name>
    <filename>classnjli_1_1_world_resource_loader.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a0bdde94c5d76a1bba1f91980a5e81582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ae17667b26bebb44a4daa4c82e767d399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a0864eec12bcb0ba99cbe19f07160dd70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a93f8c1fb996b25ce682e6cb18bd46843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ab5c791db75efdce65ee49df538354cae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a533265d53baee29672057acc70f5eb83</anchor>
      <arglist>(const char *filePath, Image &amp;img)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aeeb978f3bd043a6647584f223776525c</anchor>
      <arglist>(const char *file, ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ac1a793a4a100afaf8a2a1e8c09809b06</anchor>
      <arglist>(const char *vertexFile, const char *fragmentFile, ShaderProgram *shader)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ae4ae9a2915ebddbabfd72cf927b0afee</anchor>
      <arglist>(const char *file, Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5e5f9156810ac9bad5e76a81868f29d8</anchor>
      <arglist>(const char *file, Light *light)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a9a65176315945a2201c160ca0df35edd</anchor>
      <arglist>(const char *file, Geometry *geo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aace00d44c99e64510a75ac65a19178aa</anchor>
      <arglist>(const char *file, Font *font)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a7bc64cf33159a03c3fa1775b6945fe70</anchor>
      <arglist>(const char *file, Lua *lua)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5841d6c7619db6821d2bad70dc34bd2b</anchor>
      <arglist>(const char *file, Xml *xml)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>af27a57867941d659a2b497656b3e6b42</anchor>
      <arglist>(const char *file, JsonJLI *json)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a8ea241bd485254b9edf6d3a32b1532db</anchor>
      <arglist>(const char *file, Material *material)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a97c72c0dc49dc9be8ec668fbbfbcf9a0</anchor>
      <arglist>(const char *file, Skinner *skinner)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a46e21edb3dd2513f4fb06c2ccce908e5</anchor>
      <arglist>(const char *file, Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a59a0ff1b51de8148e733037d76bd2571</anchor>
      <arglist>(const char *filePath, const void **content, unsigned long *file_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadZip</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>adb28886c8a310576ec780f558879e8fa</anchor>
      <arglist>(const char *filePath, const char *password=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a565f073cdac67831e15fa9020da10012</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unLoadAll</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a86cdad587fb6ef372c4dcac741a5fa73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadDataFromFile</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aa80c8682caefb186e92a075937562ebf</anchor>
      <arglist>(const char *filePath, const void **buff, unsigned long *length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a1a1d58baf3b8d4fa094d565a795265f7</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>njliFileType</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a9816de12b7d86d6fdd368a72c516c8c4</anchor>
      <arglist>(const char *file) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a865424382353fba11d679944f414391e</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const void *</type>
      <name>addFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a7fb699a1eee1e0a65488350c7bb0c6a7</anchor>
      <arglist>(const char *filePath, const void *buffer, unsigned long size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData *</type>
      <name>createFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a0563ad167a4c6552f0535ae191e6e2a0</anchor>
      <arglist>(const char *filePath, const void *buffer, s32 size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ac3a031dc592f5907a2e7579c4a98739f</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aeb9fa5adb09005e9a6fa38171bae3a96</anchor>
      <arglist>(const char *filePath, const void **buffer=NULL, unsigned long *size=NULL) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aca0a853c5159760d6d37cad0bbad7363</anchor>
      <arglist>(const WorldResourceLoader &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldResourceLoader &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a1c317a6c19a9bbd4e578a1bc70784d51</anchor>
      <arglist>(const WorldResourceLoader &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::string &gt;</type>
      <name>m_HashKeys</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a452c1dff079e717879b22d69fdcb96ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btHashMap&lt; btHashString, FileData * &gt;</type>
      <name>m_FileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a31760b72a6066eb6b8f99496126a5ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5d6b29a75202aeeaef335faca9eb55e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldSocket</name>
    <filename>classnjli_1_1_world_socket.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a48206691f6d67e6d2cadd5871236e688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a595738108e6bd4b89ea5374e1e5b48f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a2b4d599c2117de89fda5c71686936209</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a40a24386be0acbef64d763464b8fbe71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab0523e70263a7061c0f2b8f4f1101988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectJLI</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a9fa97067d750876046d8a0b79eaa2708</anchor>
      <arglist>(const char *ip, u16 port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a72f3fbc4ed89cd5fc2c98e02e85577a0</anchor>
      <arglist>(const std::string &amp;delimeter=&quot;root&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ae2c1126915dd134e3bb45bfd7226b69a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>popMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab748f606af5d49786785a5d9f3b9fa97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>aeb35c51f861acc84da71dd68a09fd2c2</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectJLI</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>af3e1664b23b7ded9a695c51140a8c209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab6c049520ef97c9df4722298aa4b0576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>socketSetOpt</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ae15dc1f2db17e7ef5faccc4e6ad335e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a6c5aa4b415b1260606c4c81f2aad03e6</anchor>
      <arglist>(const WorldSocket &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldSocket &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a1a085ac09dc8bd9504fa4c03b1f4d86d</anchor>
      <arglist>(const WorldSocket &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_sck</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a6535269e736f06ed9464a85e1ee94ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct sockaddr_in</type>
      <name>m_sck_addr</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab8eaf650ed60181c5984c50190967952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s8 *</type>
      <name>m_buffer</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a20a56b50c5086151d1ceb67034ae4cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isConnected</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>afc58ced137ddce637734bb7b67a8accb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SocketData</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ad139dd74c61b2663bfb08861cc51f1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; std::string &gt;</type>
      <name>m_MessageQueue</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>adb76e0e0966e72716f105875633a727a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldSound</name>
    <filename>classnjli_1_1_world_sound.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>aed4012c3031f6f1b8fdf0c3f9ebc37b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a2fb62ddebed62016ca546b1f496bac17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const s8 *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a0933e99eb24fd1c61018ff45e97fb090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a3543dab9cc602f734b08963efc580a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a59d7ae570e3cb6416f97f2806d6933e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSuspend</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a094a4fcadcf6d2f9b22cdd5a96a88a64</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a30ef05c01a98642bb0b86f77c86a46b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>playSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a6d5b69217a2ad24faca15ade9c7b5c63</anchor>
      <arglist>(Sound &amp;sound, bool isPaused=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a966fc1572f60a40e3268d49c43c9702e</anchor>
      <arglist>(const char *fileContent, size_t file_size, Sound &amp;sound)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>aa22855a62c62ec48cafb88d34a7cc2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a50914f77c7cf4fb97616c898c5291f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldSQLite</name>
    <filename>classnjli_1_1_world_s_q_lite.html</filename>
    <member kind="function">
      <type></type>
      <name>WorldSQLite</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>ae8b49b545d08177a4e58056ae27d7859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldSQLite</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>aacd5989ec668af746b8418a674d6aafd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a8e2f5d242c1a8ea8abe1e98818079590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openDatabase</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>accef1db356e5808ce4a8b09f6e281e15</anchor>
      <arglist>(const char *database_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBool</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>af8e9250d44184a8de8e40dc9ed1c40c0</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBool</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>afb82be07208f59c71a9b6e04917362a0</anchor>
      <arglist>(const char *key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getInt</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a3bb42e79df188cc25b6d3904576b75d1</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInt</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>aadc1f838093117092df257b2fea7258f</anchor>
      <arglist>(const char *key, s32 value)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFloat</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a916b11643626a38c6d433750f102fff5</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFloat</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>ad16a39bfeb227189ca498a6901981b33</anchor>
      <arglist>(const char *key, f32 value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a61b599bccb2ca51a6607917c3bc19e8c</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setString</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>aebae42b8891cba7d8bf52cee9f14b084</anchor>
      <arglist>(const char *key, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createFile</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a09a2776ae95b66db3a312a12135f9119</anchor>
      <arglist>(const char *filename, const char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateFile</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a579fb614f206ee25a233749bfa50f721</anchor>
      <arglist>(const char *filename, s32 offset, s32 size, const void *buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteFile</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>adeb13af951e08c35fbfa8dc70bd2fe02</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setBuffer</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>ab51f837fdf4648da70e8d70290870586</anchor>
      <arglist>(const void *, int size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createBuffer</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a931ee4df5343e19945fa3d6169e10279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteBuffer</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a3765395e887176976ef67e4c363119f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldSQLite</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>af9696cbf07856690ed16438604d1e003</anchor>
      <arglist>(const WorldSQLite &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldSQLite &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>af9543d2b6b4c105a1e58385d3babea7f</anchor>
      <arglist>(const WorldSQLite &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>sqlite3 *</type>
      <name>m_db</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>a87141c2dcaf02be8e00dc2696f4a7e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static void *</type>
      <name>s_Buffer</name>
      <anchorfile>classnjli_1_1_world_s_q_lite.html</anchorfile>
      <anchor>ac0a96c31f65afc8ffc24ed0c60f3e10d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldState</name>
    <filename>classnjli_1_1_world_state.html</filename>
    <base>AbstractState&lt; void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a90d15e3d2ce35a1d51f2891c54829b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a98936f2ad09b94a3fb4248ef9b198e05</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ad9e83f72b2e5a9a8660af01f5d41886d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a0b8dbb1cabc69330aec71aab27265c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ada951c1f437c682b0eff122095ad44fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab562443d252b72b566fcf04e2c75df65</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a08b1d6911d58d2c95b40ab8c0a7472d3</anchor>
      <arglist>(void *, f32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>acfb9a8834b64a12a705d8ce4172f8f7b</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a940b8f2e2cf0d8819123bb89ef34eb15</anchor>
      <arglist>(void *, const Telegram &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a8f7777c76419c110d8b711e603b1a561</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a43411b66ff8313e26661620baf3c585a</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ac0b5984d1fa3067454eccc42ee7ec4bf</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a39285cf0ad0e34c0b6bf9eb20a7de70c</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ac9f228133dc0190895bfb34a2f42d364</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a59eef2d48bfd0177c49e597019ff4b8e</anchor>
      <arglist>(WorldState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab2ef4f6fa80549d7308b4ca63baffbf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>afa4c69b98c0d74a82e15964634150f08</anchor>
      <arglist>(const WorldStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a592c64f0cf34c55eac50fcc425353fca</anchor>
      <arglist>(const WorldState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a02e655227bb06ccdefa100bc5cc6d6ef</anchor>
      <arglist>(const WorldState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a4f1e48be7d3de7a0c07352081f0dbd11</anchor>
      <arglist>(WorldState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ae4d2fff5dab2dbc92de708ff4115e8b4</anchor>
      <arglist>(WorldState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a41c433370d61452345f4a3d61318238c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>aa79b71b3516c96515eef6af9b8606286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>afc6c9395d05e594f76653bbeb2f7071b</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a25d2acb92950ac2f0e2aa0a1db1ead88</anchor>
      <arglist>(const WorldState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab1d6ddaa5a0e87c155772346996e167a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a645c49e5c9e93ab72a2746407899b6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a7bc9cd866e5723fc2769766c007b7d49</anchor>
      <arglist>(const WorldState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRayCollision</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a2fe18cd592e8b060b8a3705201b95dfc</anchor>
      <arglist>(DeviceTouch **m_CurrentTouches, const char *code, bool disableNodeTouched=false)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; njli::PhysicsRayContact * &gt;</type>
      <name>m_RayContacts</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a1fa3cdf26038f5a61d5846d3a3b8a3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateBuilder</name>
    <filename>classnjli_1_1_world_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>adb59a5671a922b1015b881dd0c449cb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>abccaf8b1a144a49da28232d5c8c94acb</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a96f7fc6bf2238baae129ef00d2d0af27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a78ed9e232c9001b8afd5c7a3853d6cf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a4d09be319464b4e5c4bce25f385b2f38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a60233da3c5f0893f061803ce76a587f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a525b4aa3a6967808c1c86ea94c2c985e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>ad748ef4ac33eb1164a7ffaf6da297f52</anchor>
      <arglist>(WorldStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>add931e23d388b4acadfa7729ce581137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>ade0f69a65c8c109265671a642d4ed769</anchor>
      <arglist>(const WorldStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a7e91437379cd99ea510fc0fca27340cb</anchor>
      <arglist>(WorldStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>afed2221363da3f7959ced3b25c45e88a</anchor>
      <arglist>(WorldStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a31a6fadd9dd9d66dd3e4c4fde786802f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a493f158507353962abf95cc07ae4b415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a36d3be2c287ef79a893d1edd703f32d9</anchor>
      <arglist>(const WorldStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>aa3dd8d7b48312dfa0baf6f6b6acf4746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a1951b19d34fba7c547e0d4c178f891cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a591edd908b5b27cd061f6261ef90a3e1</anchor>
      <arglist>(const WorldStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateMachine</name>
    <filename>classnjli_1_1_world_state_machine.html</filename>
    <base>AbstractStateMachine&lt; void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a7645fd57d7769219ea67f83db718ff70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ae734d8563fe9816995a99233385e788d</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>af9011a17098a6d29554556aa2a8be289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a9d5c8d02162086a496373eea065671f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>af611b1faa067ba41caabe593dd3f8afe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>aaf9a18ec5a67dc05a71886cfd22dc69b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>aa9b7ec4e62f56e50dd5d5473d2ce5c9b</anchor>
      <arglist>(WorldStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a5f5919d235f32fff8aa2c275c2d9bcbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a2dcfb4df4d5696c5424d4bc34a2f7c19</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a778b6c635551fd1dec15269a9f448748</anchor>
      <arglist>(const WorldStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a4f47ef9a218fb30bc486992f5f5d1e48</anchor>
      <arglist>(const WorldStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a8d893b2cc44756592a3cd3a1c0019754</anchor>
      <arglist>(WorldStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ac804a9109ffe57886d67672eefe5b070</anchor>
      <arglist>(WorldStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ae71cb033bb32a8daf04408651a3aaf3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a80041da9020fb96c011424d51348f32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a9b37c82c6bd19265ec08cfacdc6d91b2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>af9a9e52e10ffa0e657cd2a3a7f5f6660</anchor>
      <arglist>(const WorldStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ab6b55bb83f3296f134b5855287782d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a85e3a78e1db487fa376c418d12845586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ad2059ccd4afdbb14fae1b1aeb8e5f16c</anchor>
      <arglist>(const WorldStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateMachineBuilder</name>
    <filename>classnjli_1_1_world_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a2292ecf5ef96a60724cfa853f6ab49d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>aa4e6f0ffcb105c5486d63de8e1c037b4</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>ada4597b3631bdcd5873a5da7fb9f812f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a827bc448025bf0cc4d2bb45cf316fe57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>afdd9b9688034982fa4e5291583a7ed4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>adfd5af74349931af33056cbb58058f80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a42590d7e7c19fdb799231ba337e4c520</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>ad96d4afb8c6582994daa817ac1398774</anchor>
      <arglist>(WorldStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a852dd1c431fee9934a1ef1866388cdbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>abc5299ad29bd421199f4042300359d77</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a6bfd68f7c271417820683ee4f5a8a6da</anchor>
      <arglist>(WorldStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a1fd089cf2ba2ff42913ed4c79b20dded</anchor>
      <arglist>(WorldStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a28272915c82776806f0301782774d284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a335dc89d4e7d99ba9c8bb4eb83b0d690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a8af3314f1c7bbb35ffc91fcca6fb98a3</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a87c06b98978431b165f3e5d2a95a86d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a5360170cd214b3426503ebd0d6bf1a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a10537eba1cea38156e90bde9fdd9b173</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::wrap</name>
    <filename>structnjli_1_1wrap.html</filename>
    <member kind="function">
      <type></type>
      <name>wrap</name>
      <anchorfile>structnjli_1_1wrap.html</anchorfile>
      <anchor>a2d6762e15815bb762e1da6ac8c4299c2</anchor>
      <arglist>(const Thread &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Thread</type>
      <name>ins</name>
      <anchorfile>structnjli_1_1wrap.html</anchorfile>
      <anchor>a642a7dd725d24a5c0a540c8d6158bbb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::OcclusionBuffer::WriteOCL</name>
    <filename>structnjli_1_1_occlusion_buffer_1_1_write_o_c_l.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Process</name>
      <anchorfile>structnjli_1_1_occlusion_buffer_1_1_write_o_c_l.html</anchorfile>
      <anchor>ab1841025272f3cb025f969875205e9d4</anchor>
      <arglist>(btScalar &amp;q, btScalar v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Xml</name>
    <filename>classnjli_1_1_xml.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a11efabd574d565380a36f14f7164a5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>afacda94402ce1aabee14daa4fda38443</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ae2ca3cebfa554b462659d47a59b3853c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ae114d459c2affce5b011b9f7d5ef1eb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ac8f625eab130cf680b03ec7099a55947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ab82ed91ca594737415cf306b842f441b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a9df0ad30ab40e43e36dde7d974fe29c4</anchor>
      <arglist>(Xml **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ad8b441fd4430980f9ae04388b0c6f5ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a2029d805465affa328e8019e41b66323</anchor>
      <arglist>(const XmlBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>acd4e20e4c8326666fdea9e99966873ef</anchor>
      <arglist>(const Xml &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>adba239159cca11c7e1f5aa7c81d9aafc</anchor>
      <arglist>(const Xml &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a51c30b901bdbf0df4a3f67b24b0c68de</anchor>
      <arglist>(Xml *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>aaf1c2b806130c7c9b395d7d46c411f2d</anchor>
      <arglist>(Xml &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>afd214fa3cdea6c5d27423f1954d9d498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a15ff5ffe5ebd69a06625f9fefcc02ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a8986e8e3e9835d76295a9834a66a58fa</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>abda0af05e4c99f0c0826e2b4684a21f2</anchor>
      <arglist>(const Xml &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ac73a8aacfe51e9bf35daca96d5bbf11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a4b5d2b7ddefc276b6bf9153ea9c6c4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Xml &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>af6b90344025c3d501d3f6bb6b2288614</anchor>
      <arglist>(const Xml &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::XmlBuilder</name>
    <filename>classnjli_1_1_xml_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a4529a397c935b1d72a1443d2f485f75b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>acc36a3cb04cc69d541ef7fab8f1b15a8</anchor>
      <arglist>(void *, btSerializer *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a7e870fbe38752cc25e5c095c9c9e700f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a9b6e54f88d03e4ba19fab733b6d3a417</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aa641e2f9b558c50dfda29b65992f13fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a3d1af7efed75248f0d60ba5d1e968eae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ac2411dcfa6f20bc46d12382508e0c366</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a9686704d3f64326a4b9ac0bc27592333</anchor>
      <arglist>(XmlBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a0d914bbf1493aed90a3d0d31cb5d9867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a86997d6f5347e632162dc782305bd910</anchor>
      <arglist>(const XmlBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ac1fd3cc70a3ad85e2a6bb4f9db914546</anchor>
      <arglist>(XmlBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aac248e6c763e6f79840033293563cd49</anchor>
      <arglist>(XmlBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a6d7fa88f93964fdba5e7edad2120b095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aa62b57286a7d073acc7e14c92fd976e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a94c70f4b615a9665c1ee0311b1e1f107</anchor>
      <arglist>(const XmlBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ab4670b7871d43bdbbd5e1c63f8d54b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>acfbf43898f6ae287f320d1762ca46e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>XmlBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a977d9074ae28ea94bfee023a0ef64739</anchor>
      <arglist>(const XmlBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>njli</name>
    <filename>namespacenjli.html</filename>
    <class kind="class">njli::AbstractActionable</class>
    <class kind="class">njli::AbstractBuilder</class>
    <class kind="class">njli::AbstractClock</class>
    <class kind="class">njli::AbstractDecorator</class>
    <class kind="class">njli::AbstractFactoryObject</class>
    <class kind="class">njli::AbstractFrameBufferObject</class>
    <class kind="class">njli::AbstractObject</class>
    <class kind="class">njli::AbstractState</class>
    <class kind="class">njli::AbstractStateMachine</class>
    <class kind="class">njli::AbstractTransform</class>
    <class kind="class">njli::Action</class>
    <class kind="class">njli::ActionBuilder</class>
    <class kind="class">njli::ButtonHUD</class>
    <class kind="class">njli::ButtonHUDBuilder</class>
    <class kind="class">njli::Camera</class>
    <class kind="class">njli::CameraBuilder</class>
    <class kind="class">njli::CheckboxHUD</class>
    <class kind="class">njli::CheckboxHUDBuilder</class>
    <class kind="class">njli::Clock</class>
    <class kind="class">njli::ClockBuilder</class>
    <class kind="class">njli::CollisionResponse</class>
    <class kind="class">njli::CollisionResponseBuilder</class>
    <class kind="class">njli::Cube</class>
    <class kind="class">njli::CubeBuilder</class>
    <class kind="class">njli::DeviceInputTime</class>
    <class kind="class">njli::DeviceTouch</class>
    <class kind="class">njli::DropdownHUD</class>
    <class kind="class">njli::DropdownHUDBuilder</class>
    <class kind="struct">njli::FileData</class>
    <class kind="class">njli::Font</class>
    <class kind="class">njli::FontBuilder</class>
    <class kind="class">njli::GameClock</class>
    <class kind="class">njli::Geometry</class>
    <class kind="class">njli::Image</class>
    <class kind="class">njli::ImageBuilder</class>
    <class kind="struct">njli::JLIGlyphPosition</class>
    <class kind="struct">njli::JLIPaint</class>
    <class kind="struct">njli::JLITextRow</class>
    <class kind="class">njli::JsonJLI</class>
    <class kind="class">njli::JsonJLIBuilder</class>
    <class kind="class">njli::LabelHUD</class>
    <class kind="class">njli::LabelHUDBuilder</class>
    <class kind="class">njli::LevelOfDetail</class>
    <class kind="class">njli::LevelOfDetailBuilder</class>
    <class kind="class">njli::Light</class>
    <class kind="class">njli::LightBuilder</class>
    <class kind="class">njli::Material</class>
    <class kind="class">njli::MaterialBuilder</class>
    <class kind="class">njli::MaterialProperty</class>
    <class kind="class">njli::MaterialPropertyBuilder</class>
    <class kind="class">njli::NJLIGameEngine</class>
    <class kind="class">njli::Node</class>
    <class kind="class">njli::NodeBuilder</class>
    <class kind="class">njli::NodeState</class>
    <class kind="class">njli::NodeStateBuilder</class>
    <class kind="class">njli::NodeStateMachine</class>
    <class kind="class">njli::NodeStateMachineBuilder</class>
    <class kind="struct">njli::OcclusionBuffer</class>
    <class kind="class">njli::ParticleEmitter</class>
    <class kind="class">njli::ParticleEmitterBuilder</class>
    <class kind="class">njli::PhysicsBody</class>
    <class kind="class">njli::PhysicsBodyGhost</class>
    <class kind="class">njli::PhysicsBodyGhostBuilder</class>
    <class kind="class">njli::PhysicsBodyRigid</class>
    <class kind="class">njli::PhysicsBodyRigidBuilder</class>
    <class kind="class">njli::PhysicsBodySoft</class>
    <class kind="class">njli::PhysicsBodySoftBuilder</class>
    <class kind="class">njli::PhysicsCloseContact</class>
    <class kind="class">njli::PhysicsCloseContactBuilder</class>
    <class kind="class">njli::PhysicsConstraint</class>
    <class kind="class">njli::PhysicsConstraintBuilder</class>
    <class kind="class">njli::PhysicsConstraintConeTwist</class>
    <class kind="class">njli::PhysicsConstraintConeTwistBuilder</class>
    <class kind="class">njli::PhysicsConstraintFixed</class>
    <class kind="class">njli::PhysicsConstraintFixedBuilder</class>
    <class kind="class">njli::PhysicsConstraintGeneric6Dof</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofBuilder</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpring</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpringBuilder</class>
    <class kind="class">njli::PhysicsConstraintHinge</class>
    <class kind="class">njli::PhysicsConstraintHingeBuilder</class>
    <class kind="class">njli::PhysicsConstraintPointToPoint</class>
    <class kind="class">njli::PhysicsConstraintPointToPointBuilder</class>
    <class kind="class">njli::PhysicsConstraintSlider</class>
    <class kind="class">njli::PhysicsConstraintSliderBuilder</class>
    <class kind="class">njli::PhysicsContact</class>
    <class kind="class">njli::PhysicsContactBuilder</class>
    <class kind="class">njli::PhysicsField</class>
    <class kind="class">njli::PhysicsFieldBuilder</class>
    <class kind="class">njli::PhysicsRayContact</class>
    <class kind="class">njli::PhysicsRayContactBuilder</class>
    <class kind="class">njli::PhysicsShape</class>
    <class kind="class">njli::PhysicsShapeBox</class>
    <class kind="class">njli::PhysicsShapeBox2D</class>
    <class kind="class">njli::PhysicsShapeBox2DBuilder</class>
    <class kind="class">njli::PhysicsShapeBoxBuilder</class>
    <class kind="class">njli::PhysicsShapeBvhTriangleMesh</class>
    <class kind="class">njli::PhysicsShapeBvhTriangleMeshBuilder</class>
    <class kind="class">njli::PhysicsShapeCapsule</class>
    <class kind="class">njli::PhysicsShapeCapsuleBuilder</class>
    <class kind="class">njli::PhysicsShapeCone</class>
    <class kind="class">njli::PhysicsShapeConeBuilder</class>
    <class kind="class">njli::PhysicsShapeConvexHull</class>
    <class kind="class">njli::PhysicsShapeConvexHullBuilder</class>
    <class kind="class">njli::PhysicsShapeConvexTriangleMesh</class>
    <class kind="class">njli::PhysicsShapeConvexTriangleMeshBuilder</class>
    <class kind="class">njli::PhysicsShapeCylinder</class>
    <class kind="class">njli::PhysicsShapeCylinderBuilder</class>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrain</class>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrainBuilder</class>
    <class kind="class">njli::PhysicsShapeMultiSphere</class>
    <class kind="class">njli::PhysicsShapeMultiSphereBuilder</class>
    <class kind="class">njli::PhysicsShapeSphere</class>
    <class kind="class">njli::PhysicsShapeSphereBuilder</class>
    <class kind="class">njli::PhysicsShapeStaticPlane</class>
    <class kind="class">njli::PhysicsShapeStaticPlaneBuilder</class>
    <class kind="class">njli::PhysicsWorld</class>
    <class kind="class">njli::PhysicsWorldBuilder</class>
    <class kind="class">njli::Plane</class>
    <class kind="class">njli::PlaneBuilder</class>
    <class kind="class">njli::Rect</class>
    <class kind="class">njli::Scene</class>
    <class kind="class">njli::SceneBuilder</class>
    <class kind="class">njli::SceneRenderer</class>
    <class kind="class">njli::SceneState</class>
    <class kind="class">njli::SceneStateBuilder</class>
    <class kind="class">njli::SceneStateMachine</class>
    <class kind="class">njli::SceneStateMachineBuilder</class>
    <class kind="class">njli::ShaderProgram</class>
    <class kind="class">njli::ShaderProgramBuilder</class>
    <class kind="class">njli::Skinner</class>
    <class kind="class">njli::SkinnerBuilder</class>
    <class kind="class">njli::SliderHUD</class>
    <class kind="class">njli::SliderHUDBuilder</class>
    <class kind="class">njli::Sound</class>
    <class kind="class">njli::SoundBuilder</class>
    <class kind="class">njli::Sprite2D</class>
    <class kind="class">njli::Sprite2DBuilder</class>
    <class kind="class">njli::SpriteFrameAtlas</class>
    <class kind="class">njli::SpriteFrameAtlasBuilder</class>
    <class kind="class">njli::StopWatch</class>
    <class kind="class">njli::StopWatchBuilder</class>
    <class kind="class">njli::Telegram</class>
    <class kind="class">njli::TextboxHUD</class>
    <class kind="class">njli::TextboxHUDBuilder</class>
    <class kind="class">njli::Thread</class>
    <class kind="class">njli::ThreadBuilder</class>
    <class kind="class">njli::Timer</class>
    <class kind="class">njli::TimerBuilder</class>
    <class kind="class">njli::World</class>
    <class kind="class">njli::WorldClock</class>
    <class kind="class">njli::WorldDebugDrawer</class>
    <class kind="class">njli::WorldFactory</class>
    <class kind="class">njli::WorldHUD</class>
    <class kind="class">njli::WorldInput</class>
    <class kind="class">njli::WorldLuaVirtualMachine</class>
    <class kind="class">njli::WorldResourceLoader</class>
    <class kind="class">njli::WorldSocket</class>
    <class kind="class">njli::WorldSound</class>
    <class kind="class">njli::WorldSQLite</class>
    <class kind="class">njli::WorldState</class>
    <class kind="class">njli::WorldStateBuilder</class>
    <class kind="class">njli::WorldStateMachine</class>
    <class kind="class">njli::WorldStateMachineBuilder</class>
    <class kind="struct">njli::wrap</class>
    <class kind="class">njli::Xml</class>
    <class kind="class">njli::XmlBuilder</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>ghostCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a1fa129854a8e7752403465871495fc68</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliActionTimingMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDSolidity</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDAlign</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDWinding</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDImageFlags</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDLineCap</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureCubeSides</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMinificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMagnificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureWrapType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliShaderType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliFileType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliPhysicsType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTransparencyMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliCullMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliBitCategories</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliObjectEnumType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_THREAD_PRIORITY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_STATE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>isPowerOfTwo</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad830ed1e932d7b3943468a3371f4acd6</anchor>
      <arglist>(s32 v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s32</type>
      <name>fixPowerOfTwo</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8319acb11732308c934ec1af950a959d</anchor>
      <arglist>(s32 v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPreTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a198074fecee1ecd3469a9eb42d3b1672</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPostTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a805528e68206342abc780b53e418030d</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>CustomNearCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a402c299bd8ac856eb95211ce9a9ff561</anchor>
      <arglist>(btBroadphasePair &amp;collisionPair, btCollisionDispatcher &amp;dispatcher, const btDispatcherInfo &amp;dispatchInfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btScalar</type>
      <name>CustomCalculateCombinedFriction</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5a1d0391db0ec9962dafeb111b04ffd7</anchor>
      <arglist>(float friction0, float friction1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btScalar</type>
      <name>CustomCalculateCombinedRestitution</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a964de90b3d32f6780da381270d0928bf</anchor>
      <arglist>(float restitution0, float restitution1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactAddedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3906a027082baad67e169df7b3765907</anchor>
      <arglist>(btManifoldPoint &amp;cp, const btCollisionObjectWrapper *colObj0Wrap, int partId0, int index0, const btCollisionObjectWrapper *colObj1Wrap, int partId1, int index1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactProcessedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>acd7e5a77476fef5406733dbcfbb9d864</anchor>
      <arglist>(btManifoldPoint &amp;cp, void *body0, void *body1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CustomContactDestroyedCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a255c1939055a2c771dddaa2f05f9b7c2</anchor>
      <arglist>(void *userPersistentData)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>call_func</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a132a484910213b3e28681c51fe0b69bb</anchor>
      <arglist>(void *f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>lstop</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2cf6b77aac0764b3cd5f931aff91188e</anchor>
      <arglist>(lua_State *L, lua_Debug *ar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>laction</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a66a4ca6e08a1d754198fb074fcb74303</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print_usage</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9e55125fd1b7ceb0e47f2e74a23028e0</anchor>
      <arglist>(const char *badoption)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>l_message</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ada99d702e7655d32803965a658420825</anchor>
      <arglist>(const char *pname, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>report</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adf55db544efebce3945e6d377a3846f9</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>msghandler</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af038d6f4f95be952fea559db725a4cd5</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>docall</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a56ef3b16f431769debb9f573fbad3472</anchor>
      <arglist>(lua_State *L, int narg, int nres)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print_version</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a42bbebd7e19fd129e8965dd038df8739</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createargtable</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>abfc8caf0b773a1e5aee696e23fe8cec8</anchor>
      <arglist>(lua_State *L, char **argv, int argc, int script)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dochunk</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a010b737b6f0704ee725b795789165f1a</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dofile</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a4a5df8269893769335b43152209cd81a</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dostring</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6a78608b2c6c62b665044f25cdddd015</anchor>
      <arglist>(lua_State *L, const char *s, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dolibrary</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a35c514d99c14aa359be8b6e0a8c9b101</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_prompt</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ab84c9d4e4063a855f07f576fd0538a5d</anchor>
      <arglist>(lua_State *L, int firstline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>incomplete</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8e10896a57f674e564cd721a0853eef9</anchor>
      <arglist>(lua_State *L, int status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pushline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a67ae45d8e6e14757a6cd5cfbf9e54417</anchor>
      <arglist>(lua_State *L, int firstline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>addreturn</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad8082b14213b632babd7d400bae3b5bb</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>multiline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aaa3dddf4399350a0274b73384825ea65</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadline</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>abaa044d04062bd2ac5cb7ed65eed3041</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>l_print</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac3c1a4e14d8d9314544e6bdf34af35a1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pushargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ab06d5334211e1cf7303c765f64127af2</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>handle_script</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac0bef8597194699acc07e80a9d8499bb</anchor>
      <arglist>(lua_State *L, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>collectargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a727c73a892f0f282c6a903f01a401604</anchor>
      <arglist>(char **argv, int *first)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>runargs</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afb1211dd5f81ba577b00a5f7546bcad5</anchor>
      <arglist>(lua_State *L, char **argv, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>handle_luainit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7899874f7ffc3b32a54f93d48bab774</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>_doREPL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a13820d7e4e510bcb288c64a5677c34cf</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>pmain</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aa635589a98be774a07f196fe8cb9f5d9</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetVariableValue</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>aebba3f7bb2f8420f9f63d51559bea913</anchor>
      <arglist>(lua_State *L, const int &amp;index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCallStackSize</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a0b89d95e0c07f86cf6e963fed6eb1b98</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ReplaceStringInPlace</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5aa06a6430e9e3583719f718c36979bc</anchor>
      <arglist>(std::string &amp;subject, const std::string &amp;search, const std::string &amp;replace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createFBO</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a250589dfb52cb55a0cea374beb111622</anchor>
      <arglist>(GLuint &amp;frameBuffer, GLuint &amp;texColorBuffer, GLuint &amp;rboDepthStencil, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="variable">
      <type>const u32</type>
      <name>njliRenderCategoryValues</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ad2ab6dbf5b09eba518fd9d26d6f65c90</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>isInteractive</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a821f510d84ef15e6136525000b3af59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static lua_State *</type>
      <name>globalL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a592ea58bd7221fb73783c74db6161d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>progname</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ac7f24ac3abb70f5d7aee1b84c3447e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>DEFAULTCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6a44dbb9165c43c497c0c9f5d2e6e37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>REDCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a4c075939a4846b2084e1c92e0d690544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>GREENCOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a211a57822620ac58634a963fa38ce4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const btVector4</type>
      <name>BLUECOLOR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a5039b2e053a3827786be49ea3f891736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Geometry::TexturedColoredVertex</type>
      <name>CubeVertices</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6bbe5d8def41a353834dac740208f67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const GLubyte</type>
      <name>Indices</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a7306037e378d1b12ebc05d41a161ae71</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
</tagfile>
